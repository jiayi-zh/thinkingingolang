// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: deviceServer.proto

package main

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DoorStatusListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     int64  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	AreaId    string `protobuf:"bytes,2,opt,name=areaId,proto3" json:"areaId,omitempty"`
	DeviceId  string `protobuf:"bytes,3,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	Page      int64  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *DoorStatusListReq) Reset() {
	*x = DoorStatusListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoorStatusListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoorStatusListReq) ProtoMessage() {}

func (x *DoorStatusListReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoorStatusListReq.ProtoReflect.Descriptor instead.
func (*DoorStatusListReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{0}
}

func (x *DoorStatusListReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DoorStatusListReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DoorStatusListReq) GetAreaId() string {
	if x != nil {
		return x.AreaId
	}
	return ""
}

func (x *DoorStatusListReq) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DoorStatusListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type DeviceInfoUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gateway         string `protobuf:"bytes,17,opt,name=gateway,proto3" json:"gateway,omitempty"`
	DeviceId        string `protobuf:"bytes,2,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	DeviceName      string `protobuf:"bytes,4,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	Imei            string `protobuf:"bytes,12,opt,name=imei,proto3" json:"imei,omitempty"`
	ExtInfo         string `protobuf:"bytes,13,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	SubnetMask      string `protobuf:"bytes,16,opt,name=subnetMask,proto3" json:"subnetMask,omitempty"`
	Manufacturer    string `protobuf:"bytes,21,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	ProjectId       string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	DeviceUuid      string `protobuf:"bytes,3,opt,name=deviceUuid,proto3" json:"deviceUuid,omitempty"`
	DeviceType      string `protobuf:"bytes,5,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	Port            int64  `protobuf:"varint,10,opt,name=port,proto3" json:"port,omitempty"`
	Mac             string `protobuf:"bytes,11,opt,name=mac,proto3" json:"mac,omitempty"`
	HardwareVersion string `protobuf:"bytes,23,opt,name=hardwareVersion,proto3" json:"hardwareVersion,omitempty"`
	DeviceSn        string `protobuf:"bytes,7,opt,name=deviceSn,proto3" json:"deviceSn,omitempty"`
	ProductType     string `protobuf:"bytes,8,opt,name=productType,proto3" json:"productType,omitempty"`
	Ip              string `protobuf:"bytes,9,opt,name=ip,proto3" json:"ip,omitempty"`
	Version         int64  `protobuf:"varint,14,opt,name=version,proto3" json:"version,omitempty"`
	Dns             string `protobuf:"bytes,18,opt,name=dns,proto3" json:"dns,omitempty"`
	IotExtInfo      string `protobuf:"bytes,24,opt,name=iotExtInfo,proto3" json:"iotExtInfo,omitempty"`
	Remarks         string `protobuf:"bytes,25,opt,name=remarks,proto3" json:"remarks,omitempty"`
	ServiceUuid     string `protobuf:"bytes,6,opt,name=serviceUuid,proto3" json:"serviceUuid,omitempty"`
	GbCode          string `protobuf:"bytes,15,opt,name=gbCode,proto3" json:"gbCode,omitempty"`
	Username        string `protobuf:"bytes,19,opt,name=username,proto3" json:"username,omitempty"`
	Password        string `protobuf:"bytes,20,opt,name=password,proto3" json:"password,omitempty"`
	SoftwareVersion string `protobuf:"bytes,22,opt,name=softwareVersion,proto3" json:"softwareVersion,omitempty"`
}

func (x *DeviceInfoUpdateReq) Reset() {
	*x = DeviceInfoUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoUpdateReq) ProtoMessage() {}

func (x *DeviceInfoUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoUpdateReq.ProtoReflect.Descriptor instead.
func (*DeviceInfoUpdateReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceInfoUpdateReq) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *DeviceInfoUpdateReq) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceInfoUpdateReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceInfoUpdateReq) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *DeviceInfoUpdateReq) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *DeviceInfoUpdateReq) GetSubnetMask() string {
	if x != nil {
		return x.SubnetMask
	}
	return ""
}

func (x *DeviceInfoUpdateReq) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *DeviceInfoUpdateReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeviceInfoUpdateReq) GetDeviceUuid() string {
	if x != nil {
		return x.DeviceUuid
	}
	return ""
}

func (x *DeviceInfoUpdateReq) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *DeviceInfoUpdateReq) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DeviceInfoUpdateReq) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *DeviceInfoUpdateReq) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

func (x *DeviceInfoUpdateReq) GetDeviceSn() string {
	if x != nil {
		return x.DeviceSn
	}
	return ""
}

func (x *DeviceInfoUpdateReq) GetProductType() string {
	if x != nil {
		return x.ProductType
	}
	return ""
}

func (x *DeviceInfoUpdateReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DeviceInfoUpdateReq) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DeviceInfoUpdateReq) GetDns() string {
	if x != nil {
		return x.Dns
	}
	return ""
}

func (x *DeviceInfoUpdateReq) GetIotExtInfo() string {
	if x != nil {
		return x.IotExtInfo
	}
	return ""
}

func (x *DeviceInfoUpdateReq) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *DeviceInfoUpdateReq) GetServiceUuid() string {
	if x != nil {
		return x.ServiceUuid
	}
	return ""
}

func (x *DeviceInfoUpdateReq) GetGbCode() string {
	if x != nil {
		return x.GbCode
	}
	return ""
}

func (x *DeviceInfoUpdateReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DeviceInfoUpdateReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DeviceInfoUpdateReq) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

type DeviceListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imei        string `protobuf:"bytes,6,opt,name=imei,proto3" json:"imei,omitempty"`
	ProjectId   string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	DeviceId    string `protobuf:"bytes,2,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	DeviceType  string `protobuf:"bytes,3,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	DeviceUuid  string `protobuf:"bytes,4,opt,name=deviceUuid,proto3" json:"deviceUuid,omitempty"`
	ServiceUuid string `protobuf:"bytes,5,opt,name=serviceUuid,proto3" json:"serviceUuid,omitempty"`
}

func (x *DeviceListReq) Reset() {
	*x = DeviceListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceListReq) ProtoMessage() {}

func (x *DeviceListReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceListReq.ProtoReflect.Descriptor instead.
func (*DeviceListReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceListReq) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *DeviceListReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeviceListReq) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceListReq) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *DeviceListReq) GetDeviceUuid() string {
	if x != nil {
		return x.DeviceUuid
	}
	return ""
}

func (x *DeviceListReq) GetServiceUuid() string {
	if x != nil {
		return x.ServiceUuid
	}
	return ""
}

type DeviceStatusQueryListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	DeviceId  string `protobuf:"bytes,2,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	StateType string `protobuf:"bytes,3,opt,name=stateType,proto3" json:"stateType,omitempty"`
	Page      int64  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Limit     int64  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *DeviceStatusQueryListReq) Reset() {
	*x = DeviceStatusQueryListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStatusQueryListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStatusQueryListReq) ProtoMessage() {}

func (x *DeviceStatusQueryListReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStatusQueryListReq.ProtoReflect.Descriptor instead.
func (*DeviceStatusQueryListReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceStatusQueryListReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeviceStatusQueryListReq) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceStatusQueryListReq) GetStateType() string {
	if x != nil {
		return x.StateType
	}
	return ""
}

func (x *DeviceStatusQueryListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DeviceStatusQueryListReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type AreaInfoAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remarks   string `protobuf:"bytes,5,opt,name=remarks,proto3" json:"remarks,omitempty"`
	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ParentId  string `protobuf:"bytes,2,opt,name=parentId,proto3" json:"parentId,omitempty"`
	AreaName  string `protobuf:"bytes,3,opt,name=areaName,proto3" json:"areaName,omitempty"`
	ExtInfo   string `protobuf:"bytes,4,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
}

func (x *AreaInfoAddReq) Reset() {
	*x = AreaInfoAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaInfoAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaInfoAddReq) ProtoMessage() {}

func (x *AreaInfoAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaInfoAddReq.ProtoReflect.Descriptor instead.
func (*AreaInfoAddReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{4}
}

func (x *AreaInfoAddReq) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *AreaInfoAddReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AreaInfoAddReq) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *AreaInfoAddReq) GetAreaName() string {
	if x != nil {
		return x.AreaName
	}
	return ""
}

func (x *AreaInfoAddReq) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

type AreaChannelListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId  string `protobuf:"bytes,3,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	Recursion bool   `protobuf:"varint,4,opt,name=recursion,proto3" json:"recursion,omitempty"`
	ChnType   string `protobuf:"bytes,5,opt,name=chnType,proto3" json:"chnType,omitempty"`
	Page      int64  `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	Limit     int64  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	AreaId    string `protobuf:"bytes,2,opt,name=areaId,proto3" json:"areaId,omitempty"`
}

func (x *AreaChannelListReq) Reset() {
	*x = AreaChannelListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaChannelListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaChannelListReq) ProtoMessage() {}

func (x *AreaChannelListReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaChannelListReq.ProtoReflect.Descriptor instead.
func (*AreaChannelListReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{5}
}

func (x *AreaChannelListReq) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *AreaChannelListReq) GetRecursion() bool {
	if x != nil {
		return x.Recursion
	}
	return false
}

func (x *AreaChannelListReq) GetChnType() string {
	if x != nil {
		return x.ChnType
	}
	return ""
}

func (x *AreaChannelListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AreaChannelListReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *AreaChannelListReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AreaChannelListReq) GetAreaId() string {
	if x != nil {
		return x.AreaId
	}
	return ""
}

type ChannelStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateValue string `protobuf:"bytes,5,opt,name=stateValue,proto3" json:"stateValue,omitempty"`
	Time       string `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`
	ExtInfo    string `protobuf:"bytes,7,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	Version    int64  `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty"`
	UpdateTime string `protobuf:"bytes,10,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Remarks    string `protobuf:"bytes,11,opt,name=remarks,proto3" json:"remarks,omitempty"`
	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StateType  string `protobuf:"bytes,4,opt,name=stateType,proto3" json:"stateType,omitempty"`
	CreateTime string `protobuf:"bytes,9,opt,name=createTime,proto3" json:"createTime,omitempty"`
	StatusId   string `protobuf:"bytes,2,opt,name=statusId,proto3" json:"statusId,omitempty"`
	ChannelId  string `protobuf:"bytes,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
}

func (x *ChannelStatus) Reset() {
	*x = ChannelStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStatus) ProtoMessage() {}

func (x *ChannelStatus) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStatus.ProtoReflect.Descriptor instead.
func (*ChannelStatus) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{6}
}

func (x *ChannelStatus) GetStateValue() string {
	if x != nil {
		return x.StateValue
	}
	return ""
}

func (x *ChannelStatus) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *ChannelStatus) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *ChannelStatus) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ChannelStatus) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ChannelStatus) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *ChannelStatus) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelStatus) GetStateType() string {
	if x != nil {
		return x.StateType
	}
	return ""
}

func (x *ChannelStatus) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ChannelStatus) GetStatusId() string {
	if x != nil {
		return x.StatusId
	}
	return ""
}

func (x *ChannelStatus) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type ChannelStatusDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string   `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	StateType []string `protobuf:"bytes,2,rep,name=stateType,proto3" json:"stateType,omitempty"`
}

func (x *ChannelStatusDelete) Reset() {
	*x = ChannelStatusDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStatusDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStatusDelete) ProtoMessage() {}

func (x *ChannelStatusDelete) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStatusDelete.ProtoReflect.Descriptor instead.
func (*ChannelStatusDelete) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{7}
}

func (x *ChannelStatusDelete) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelStatusDelete) GetStateType() []string {
	if x != nil {
		return x.StateType
	}
	return nil
}

type DeviceTreeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	AreaFlag   bool   `protobuf:"varint,2,opt,name=areaFlag,proto3" json:"areaFlag,omitempty"`
	InfFlag    bool   `protobuf:"varint,3,opt,name=infFlag,proto3" json:"infFlag,omitempty"`
	DeviceType string `protobuf:"bytes,4,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	RoleId     string `protobuf:"bytes,5,opt,name=roleId,proto3" json:"roleId,omitempty"`
}

func (x *DeviceTreeReq) Reset() {
	*x = DeviceTreeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTreeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTreeReq) ProtoMessage() {}

func (x *DeviceTreeReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTreeReq.ProtoReflect.Descriptor instead.
func (*DeviceTreeReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{8}
}

func (x *DeviceTreeReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeviceTreeReq) GetAreaFlag() bool {
	if x != nil {
		return x.AreaFlag
	}
	return false
}

func (x *DeviceTreeReq) GetInfFlag() bool {
	if x != nil {
		return x.InfFlag
	}
	return false
}

func (x *DeviceTreeReq) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *DeviceTreeReq) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

type DeviceAreaRl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RelationId int64  `protobuf:"varint,2,opt,name=relationId,proto3" json:"relationId,omitempty"`
	DeviceId   int64  `protobuf:"varint,3,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	AreaId     int64  `protobuf:"varint,4,opt,name=areaId,proto3" json:"areaId,omitempty"`
	CreateTime string `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime string `protobuf:"bytes,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *DeviceAreaRl) Reset() {
	*x = DeviceAreaRl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceAreaRl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAreaRl) ProtoMessage() {}

func (x *DeviceAreaRl) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAreaRl.ProtoReflect.Descriptor instead.
func (*DeviceAreaRl) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{9}
}

func (x *DeviceAreaRl) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceAreaRl) GetRelationId() int64 {
	if x != nil {
		return x.RelationId
	}
	return 0
}

func (x *DeviceAreaRl) GetDeviceId() int64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *DeviceAreaRl) GetAreaId() int64 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *DeviceAreaRl) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *DeviceAreaRl) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type LogoInfoPrjTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Type      string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *LogoInfoPrjTypeReq) Reset() {
	*x = LogoInfoPrjTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoInfoPrjTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoInfoPrjTypeReq) ProtoMessage() {}

func (x *LogoInfoPrjTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoInfoPrjTypeReq.ProtoReflect.Descriptor instead.
func (*LogoInfoPrjTypeReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{10}
}

func (x *LogoInfoPrjTypeReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *LogoInfoPrjTypeReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type AreaTreeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           string        `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	TreeId         string        `protobuf:"bytes,2,opt,name=treeId,proto3" json:"treeId,omitempty"`
	TreePid        string        `protobuf:"bytes,3,opt,name=treePid,proto3" json:"treePid,omitempty"`
	AreaId         string        `protobuf:"bytes,40002,opt,name=areaId,proto3" json:"areaId,omitempty"`
	AreaName       string        `protobuf:"bytes,40003,opt,name=areaName,proto3" json:"areaName,omitempty"`
	ParentId       string        `protobuf:"bytes,40004,opt,name=parentId,proto3" json:"parentId,omitempty"`
	Deleted        int32         `protobuf:"varint,40005,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Version        int64         `protobuf:"varint,40008,opt,name=version,proto3" json:"version,omitempty"`
	UpdateTime     string        `protobuf:"bytes,40010,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Remarks        string        `protobuf:"bytes,40011,opt,name=remarks,proto3" json:"remarks,omitempty"`
	UserPermission *PermissionVO `protobuf:"bytes,40012,opt,name=userPermission,proto3" json:"userPermission,omitempty"`
	Id             int64         `protobuf:"varint,40001,opt,name=id,proto3" json:"id,omitempty"`
	ExtInfo        string        `protobuf:"bytes,40006,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	OrgSn          int64         `protobuf:"varint,40007,opt,name=orgSn,proto3" json:"orgSn,omitempty"`
	CreateTime     string        `protobuf:"bytes,40009,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *AreaTreeInfo) Reset() {
	*x = AreaTreeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaTreeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaTreeInfo) ProtoMessage() {}

func (x *AreaTreeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaTreeInfo.ProtoReflect.Descriptor instead.
func (*AreaTreeInfo) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{11}
}

func (x *AreaTreeInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AreaTreeInfo) GetTreeId() string {
	if x != nil {
		return x.TreeId
	}
	return ""
}

func (x *AreaTreeInfo) GetTreePid() string {
	if x != nil {
		return x.TreePid
	}
	return ""
}

func (x *AreaTreeInfo) GetAreaId() string {
	if x != nil {
		return x.AreaId
	}
	return ""
}

func (x *AreaTreeInfo) GetAreaName() string {
	if x != nil {
		return x.AreaName
	}
	return ""
}

func (x *AreaTreeInfo) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *AreaTreeInfo) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *AreaTreeInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *AreaTreeInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *AreaTreeInfo) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *AreaTreeInfo) GetUserPermission() *PermissionVO {
	if x != nil {
		return x.UserPermission
	}
	return nil
}

func (x *AreaTreeInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AreaTreeInfo) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *AreaTreeInfo) GetOrgSn() int64 {
	if x != nil {
		return x.OrgSn
	}
	return 0
}

func (x *AreaTreeInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type ChannelStatusListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfId     string `protobuf:"bytes,2,opt,name=infId,proto3" json:"infId,omitempty"`
	StateType string `protobuf:"bytes,3,opt,name=stateType,proto3" json:"stateType,omitempty"`
	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
}

func (x *ChannelStatusListReq) Reset() {
	*x = ChannelStatusListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStatusListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStatusListReq) ProtoMessage() {}

func (x *ChannelStatusListReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStatusListReq.ProtoReflect.Descriptor instead.
func (*ChannelStatusListReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{12}
}

func (x *ChannelStatusListReq) GetInfId() string {
	if x != nil {
		return x.InfId
	}
	return ""
}

func (x *ChannelStatusListReq) GetStateType() string {
	if x != nil {
		return x.StateType
	}
	return ""
}

func (x *ChannelStatusListReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type ChannelStatusGetByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ChannelId string `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	StateType string `protobuf:"bytes,3,opt,name=stateType,proto3" json:"stateType,omitempty"`
}

func (x *ChannelStatusGetByIdReq) Reset() {
	*x = ChannelStatusGetByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStatusGetByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStatusGetByIdReq) ProtoMessage() {}

func (x *ChannelStatusGetByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStatusGetByIdReq.ProtoReflect.Descriptor instead.
func (*ChannelStatusGetByIdReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{13}
}

func (x *ChannelStatusGetByIdReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ChannelStatusGetByIdReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelStatusGetByIdReq) GetStateType() string {
	if x != nil {
		return x.StateType
	}
	return ""
}

type DeviceTagMoveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	TagId     string `protobuf:"bytes,2,opt,name=tagId,proto3" json:"tagId,omitempty"`
	AimPreId  string `protobuf:"bytes,3,opt,name=aimPreId,proto3" json:"aimPreId,omitempty"`
}

func (x *DeviceTagMoveReq) Reset() {
	*x = DeviceTagMoveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagMoveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagMoveReq) ProtoMessage() {}

func (x *DeviceTagMoveReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagMoveReq.ProtoReflect.Descriptor instead.
func (*DeviceTagMoveReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{14}
}

func (x *DeviceTagMoveReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeviceTagMoveReq) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *DeviceTagMoveReq) GetAimPreId() string {
	if x != nil {
		return x.AimPreId
	}
	return ""
}

type ImportDeviceTagChnReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string   `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	TagId     string   `protobuf:"bytes,2,opt,name=tagId,proto3" json:"tagId,omitempty"`
	Area      []string `protobuf:"bytes,3,rep,name=area,proto3" json:"area,omitempty"`
	Dev       []string `protobuf:"bytes,4,rep,name=dev,proto3" json:"dev,omitempty"`
	Chn       []string `protobuf:"bytes,5,rep,name=chn,proto3" json:"chn,omitempty"`
}

func (x *ImportDeviceTagChnReq) Reset() {
	*x = ImportDeviceTagChnReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportDeviceTagChnReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDeviceTagChnReq) ProtoMessage() {}

func (x *ImportDeviceTagChnReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDeviceTagChnReq.ProtoReflect.Descriptor instead.
func (*ImportDeviceTagChnReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{15}
}

func (x *ImportDeviceTagChnReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ImportDeviceTagChnReq) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *ImportDeviceTagChnReq) GetArea() []string {
	if x != nil {
		return x.Area
	}
	return nil
}

func (x *ImportDeviceTagChnReq) GetDev() []string {
	if x != nil {
		return x.Dev
	}
	return nil
}

func (x *ImportDeviceTagChnReq) GetChn() []string {
	if x != nil {
		return x.Chn
	}
	return nil
}

type ChannelBindRl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remarks    string `protobuf:"bytes,7,opt,name=remarks,proto3" json:"remarks,omitempty"`
	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChannelId  int64  `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	BindChnId  int64  `protobuf:"varint,3,opt,name=bindChnId,proto3" json:"bindChnId,omitempty"`
	ExtInfo    string `protobuf:"bytes,4,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	CreateTime string `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime string `protobuf:"bytes,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *ChannelBindRl) Reset() {
	*x = ChannelBindRl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelBindRl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelBindRl) ProtoMessage() {}

func (x *ChannelBindRl) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelBindRl.ProtoReflect.Descriptor instead.
func (*ChannelBindRl) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{16}
}

func (x *ChannelBindRl) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *ChannelBindRl) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelBindRl) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelBindRl) GetBindChnId() int64 {
	if x != nil {
		return x.BindChnId
	}
	return 0
}

func (x *ChannelBindRl) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *ChannelBindRl) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ChannelBindRl) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type InfChannelListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	InfId     string `protobuf:"bytes,2,opt,name=infId,proto3" json:"infId,omitempty"`
	DevType   string `protobuf:"bytes,3,opt,name=devType,proto3" json:"devType,omitempty"`
	ChnType   string `protobuf:"bytes,4,opt,name=chnType,proto3" json:"chnType,omitempty"`
}

func (x *InfChannelListReq) Reset() {
	*x = InfChannelListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfChannelListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfChannelListReq) ProtoMessage() {}

func (x *InfChannelListReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfChannelListReq.ProtoReflect.Descriptor instead.
func (*InfChannelListReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{17}
}

func (x *InfChannelListReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *InfChannelListReq) GetInfId() string {
	if x != nil {
		return x.InfId
	}
	return ""
}

func (x *InfChannelListReq) GetDevType() string {
	if x != nil {
		return x.DevType
	}
	return ""
}

func (x *InfChannelListReq) GetChnType() string {
	if x != nil {
		return x.ChnType
	}
	return ""
}

type DeviceTagQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
}

func (x *DeviceTagQueryReq) Reset() {
	*x = DeviceTagQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagQueryReq) ProtoMessage() {}

func (x *DeviceTagQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagQueryReq.ProtoReflect.Descriptor instead.
func (*DeviceTagQueryReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{18}
}

func (x *DeviceTagQueryReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type ChannelStatusDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string                 `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ChnIdList []*ChannelStatusDelete `protobuf:"bytes,2,rep,name=chnIdList,proto3" json:"chnIdList,omitempty"`
}

func (x *ChannelStatusDeleteReq) Reset() {
	*x = ChannelStatusDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStatusDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStatusDeleteReq) ProtoMessage() {}

func (x *ChannelStatusDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStatusDeleteReq.ProtoReflect.Descriptor instead.
func (*ChannelStatusDeleteReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{19}
}

func (x *ChannelStatusDeleteReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ChannelStatusDeleteReq) GetChnIdList() []*ChannelStatusDelete {
	if x != nil {
		return x.ChnIdList
	}
	return nil
}

type DeviceTagChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateTime string `protobuf:"bytes,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Remarks    string `protobuf:"bytes,8,opt,name=remarks,proto3" json:"remarks,omitempty"`
	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RelationId int64  `protobuf:"varint,2,opt,name=relationId,proto3" json:"relationId,omitempty"`
	TagId      string `protobuf:"bytes,3,opt,name=tagId,proto3" json:"tagId,omitempty"`
	ChannelId  string `protobuf:"bytes,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	ExtInfo    string `protobuf:"bytes,5,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	CreateTime string `protobuf:"bytes,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *DeviceTagChannel) Reset() {
	*x = DeviceTagChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagChannel) ProtoMessage() {}

func (x *DeviceTagChannel) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagChannel.ProtoReflect.Descriptor instead.
func (*DeviceTagChannel) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{20}
}

func (x *DeviceTagChannel) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *DeviceTagChannel) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *DeviceTagChannel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceTagChannel) GetRelationId() int64 {
	if x != nil {
		return x.RelationId
	}
	return 0
}

func (x *DeviceTagChannel) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *DeviceTagChannel) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *DeviceTagChannel) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *DeviceTagChannel) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type LogoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator     string `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`
	OperatorName string `protobuf:"bytes,7,opt,name=operatorName,proto3" json:"operatorName,omitempty"`
	ProjectId    string `protobuf:"bytes,2,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Image        string `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	Type         string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	CreateTime   string `protobuf:"bytes,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string `protobuf:"bytes,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LogoId       string `protobuf:"bytes,3,opt,name=logoId,proto3" json:"logoId,omitempty"`
}

func (x *LogoInfo) Reset() {
	*x = LogoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoInfo) ProtoMessage() {}

func (x *LogoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoInfo.ProtoReflect.Descriptor instead.
func (*LogoInfo) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{21}
}

func (x *LogoInfo) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *LogoInfo) GetOperatorName() string {
	if x != nil {
		return x.OperatorName
	}
	return ""
}

func (x *LogoInfo) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *LogoInfo) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *LogoInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LogoInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *LogoInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *LogoInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LogoInfo) GetLogoId() string {
	if x != nil {
		return x.LogoId
	}
	return ""
}

type AreaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId         string        `protobuf:"bytes,2,opt,name=areaId,proto3" json:"areaId,omitempty"`
	AreaName       string        `protobuf:"bytes,3,opt,name=areaName,proto3" json:"areaName,omitempty"`
	ParentId       string        `protobuf:"bytes,4,opt,name=parentId,proto3" json:"parentId,omitempty"`
	Deleted        int32         `protobuf:"varint,5,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Version        int64         `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty"`
	UpdateTime     string        `protobuf:"bytes,10,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Remarks        string        `protobuf:"bytes,11,opt,name=remarks,proto3" json:"remarks,omitempty"`
	UserPermission *PermissionVO `protobuf:"bytes,12,opt,name=userPermission,proto3" json:"userPermission,omitempty"`
	Id             int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ExtInfo        string        `protobuf:"bytes,6,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	OrgSn          int64         `protobuf:"varint,7,opt,name=orgSn,proto3" json:"orgSn,omitempty"`
	CreateTime     string        `protobuf:"bytes,9,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *AreaInfo) Reset() {
	*x = AreaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaInfo) ProtoMessage() {}

func (x *AreaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaInfo.ProtoReflect.Descriptor instead.
func (*AreaInfo) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{22}
}

func (x *AreaInfo) GetAreaId() string {
	if x != nil {
		return x.AreaId
	}
	return ""
}

func (x *AreaInfo) GetAreaName() string {
	if x != nil {
		return x.AreaName
	}
	return ""
}

func (x *AreaInfo) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *AreaInfo) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *AreaInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *AreaInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *AreaInfo) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *AreaInfo) GetUserPermission() *PermissionVO {
	if x != nil {
		return x.UserPermission
	}
	return nil
}

func (x *AreaInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AreaInfo) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *AreaInfo) GetOrgSn() int64 {
	if x != nil {
		return x.OrgSn
	}
	return 0
}

func (x *AreaInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type AreaInfoQueryByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	AreaId    string `protobuf:"bytes,2,opt,name=areaId,proto3" json:"areaId,omitempty"`
}

func (x *AreaInfoQueryByIdReq) Reset() {
	*x = AreaInfoQueryByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaInfoQueryByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaInfoQueryByIdReq) ProtoMessage() {}

func (x *AreaInfoQueryByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaInfoQueryByIdReq.ProtoReflect.Descriptor instead.
func (*AreaInfoQueryByIdReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{23}
}

func (x *AreaInfoQueryByIdReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AreaInfoQueryByIdReq) GetAreaId() string {
	if x != nil {
		return x.AreaId
	}
	return ""
}

type ChannelListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ChannelId   string `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	ChannelUuid string `protobuf:"bytes,3,opt,name=channelUuid,proto3" json:"channelUuid,omitempty"`
	ChannelType string `protobuf:"bytes,4,opt,name=channelType,proto3" json:"channelType,omitempty"`
	DeviceId    string `protobuf:"bytes,5,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
}

func (x *ChannelListReq) Reset() {
	*x = ChannelListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelListReq) ProtoMessage() {}

func (x *ChannelListReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelListReq.ProtoReflect.Descriptor instead.
func (*ChannelListReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{24}
}

func (x *ChannelListReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ChannelListReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelListReq) GetChannelUuid() string {
	if x != nil {
		return x.ChannelUuid
	}
	return ""
}

func (x *ChannelListReq) GetChannelType() string {
	if x != nil {
		return x.ChannelType
	}
	return ""
}

func (x *ChannelListReq) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type DeviceDeleteRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	Success  bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Msg      string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *DeviceDeleteRsp) Reset() {
	*x = DeviceDeleteRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDeleteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDeleteRsp) ProtoMessage() {}

func (x *DeviceDeleteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDeleteRsp.ProtoReflect.Descriptor instead.
func (*DeviceDeleteRsp) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{25}
}

func (x *DeviceDeleteRsp) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceDeleteRsp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeviceDeleteRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type LogoInfoId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogoId    string `protobuf:"bytes,2,opt,name=logoId,proto3" json:"logoId,omitempty"`
	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
}

func (x *LogoInfoId) Reset() {
	*x = LogoInfoId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoInfoId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoInfoId) ProtoMessage() {}

func (x *LogoInfoId) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoInfoId.ProtoReflect.Descriptor instead.
func (*LogoInfoId) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{26}
}

func (x *LogoInfoId) GetLogoId() string {
	if x != nil {
		return x.LogoId
	}
	return ""
}

func (x *LogoInfoId) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type ChannelGetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId   string `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	StatusFlag  bool   `protobuf:"varint,3,opt,name=statusFlag,proto3" json:"statusFlag,omitempty"`
	TagFlag     bool   `protobuf:"varint,4,opt,name=tagFlag,proto3" json:"tagFlag,omitempty"`
	BindChnFlag bool   `protobuf:"varint,5,opt,name=bindChnFlag,proto3" json:"bindChnFlag,omitempty"`
	ProjectId   string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
}

func (x *ChannelGetReq) Reset() {
	*x = ChannelGetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelGetReq) ProtoMessage() {}

func (x *ChannelGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelGetReq.ProtoReflect.Descriptor instead.
func (*ChannelGetReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{27}
}

func (x *ChannelGetReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelGetReq) GetStatusFlag() bool {
	if x != nil {
		return x.StatusFlag
	}
	return false
}

func (x *ChannelGetReq) GetTagFlag() bool {
	if x != nil {
		return x.TagFlag
	}
	return false
}

func (x *ChannelGetReq) GetBindChnFlag() bool {
	if x != nil {
		return x.BindChnFlag
	}
	return false
}

func (x *ChannelGetReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type ChannelDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChnIdList []string `protobuf:"bytes,2,rep,name=chnIdList,proto3" json:"chnIdList,omitempty"`
	ProjectId string   `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
}

func (x *ChannelDeleteReq) Reset() {
	*x = ChannelDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDeleteReq) ProtoMessage() {}

func (x *ChannelDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDeleteReq.ProtoReflect.Descriptor instead.
func (*ChannelDeleteReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{28}
}

func (x *ChannelDeleteReq) GetChnIdList() []string {
	if x != nil {
		return x.ChnIdList
	}
	return nil
}

func (x *ChannelDeleteReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type DeviceInfRl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RelationId int64  `protobuf:"varint,2,opt,name=relationId,proto3" json:"relationId,omitempty"`
	DeviceId   int64  `protobuf:"varint,3,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	InfId      int64  `protobuf:"varint,4,opt,name=infId,proto3" json:"infId,omitempty"`
	CreateTime string `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime string `protobuf:"bytes,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *DeviceInfRl) Reset() {
	*x = DeviceInfRl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfRl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfRl) ProtoMessage() {}

func (x *DeviceInfRl) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfRl.ProtoReflect.Descriptor instead.
func (*DeviceInfRl) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{29}
}

func (x *DeviceInfRl) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceInfRl) GetRelationId() int64 {
	if x != nil {
		return x.RelationId
	}
	return 0
}

func (x *DeviceInfRl) GetDeviceId() int64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *DeviceInfRl) GetInfId() int64 {
	if x != nil {
		return x.InfId
	}
	return 0
}

func (x *DeviceInfRl) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *DeviceInfRl) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type EmptyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
}

func (x *EmptyRsp) Reset() {
	*x = EmptyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRsp) ProtoMessage() {}

func (x *EmptyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRsp.ProtoReflect.Descriptor instead.
func (*EmptyRsp) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{30}
}

func (x *EmptyRsp) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type DeviceInfoAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip              string `protobuf:"bytes,8,opt,name=ip,proto3" json:"ip,omitempty"`
	Dns             string `protobuf:"bytes,18,opt,name=dns,proto3" json:"dns,omitempty"`
	RoleId          string `protobuf:"bytes,28,opt,name=roleId,proto3" json:"roleId,omitempty"`
	Enabled         int32  `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ServiceUuid     string `protobuf:"bytes,5,opt,name=serviceUuid,proto3" json:"serviceUuid,omitempty"`
	ExtInfo         string `protobuf:"bytes,12,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	DeviceUuid      string `protobuf:"bytes,1,opt,name=deviceUuid,proto3" json:"deviceUuid,omitempty"`
	ProductType     string `protobuf:"bytes,7,opt,name=productType,proto3" json:"productType,omitempty"`
	Mac             string `protobuf:"bytes,10,opt,name=mac,proto3" json:"mac,omitempty"`
	SubnetMask      string `protobuf:"bytes,16,opt,name=subnetMask,proto3" json:"subnetMask,omitempty"`
	Remarks         string `protobuf:"bytes,25,opt,name=remarks,proto3" json:"remarks,omitempty"`
	DeviceName      string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	Username        string `protobuf:"bytes,19,opt,name=username,proto3" json:"username,omitempty"`
	Imei            string `protobuf:"bytes,11,opt,name=imei,proto3" json:"imei,omitempty"`
	GbCode          string `protobuf:"bytes,15,opt,name=gbCode,proto3" json:"gbCode,omitempty"`
	Gateway         string `protobuf:"bytes,17,opt,name=gateway,proto3" json:"gateway,omitempty"`
	IotExtInfo      string `protobuf:"bytes,24,opt,name=iotExtInfo,proto3" json:"iotExtInfo,omitempty"`
	AreaId          string `protobuf:"bytes,26,opt,name=areaId,proto3" json:"areaId,omitempty"`
	DeviceSn        string `protobuf:"bytes,6,opt,name=deviceSn,proto3" json:"deviceSn,omitempty"`
	Version         int64  `protobuf:"varint,13,opt,name=version,proto3" json:"version,omitempty"`
	Source          int64  `protobuf:"varint,14,opt,name=source,proto3" json:"source,omitempty"`
	Password        string `protobuf:"bytes,20,opt,name=password,proto3" json:"password,omitempty"`
	InfId           string `protobuf:"bytes,27,opt,name=infId,proto3" json:"infId,omitempty"`
	DeviceType      string `protobuf:"bytes,4,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	Port            int64  `protobuf:"varint,9,opt,name=port,proto3" json:"port,omitempty"`
	Manufacturer    string `protobuf:"bytes,21,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	SoftwareVersion string `protobuf:"bytes,22,opt,name=softwareVersion,proto3" json:"softwareVersion,omitempty"`
	HardwareVersion string `protobuf:"bytes,23,opt,name=hardwareVersion,proto3" json:"hardwareVersion,omitempty"`
}

func (x *DeviceInfoAdd) Reset() {
	*x = DeviceInfoAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoAdd) ProtoMessage() {}

func (x *DeviceInfoAdd) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoAdd.ProtoReflect.Descriptor instead.
func (*DeviceInfoAdd) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{31}
}

func (x *DeviceInfoAdd) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DeviceInfoAdd) GetDns() string {
	if x != nil {
		return x.Dns
	}
	return ""
}

func (x *DeviceInfoAdd) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *DeviceInfoAdd) GetEnabled() int32 {
	if x != nil {
		return x.Enabled
	}
	return 0
}

func (x *DeviceInfoAdd) GetServiceUuid() string {
	if x != nil {
		return x.ServiceUuid
	}
	return ""
}

func (x *DeviceInfoAdd) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *DeviceInfoAdd) GetDeviceUuid() string {
	if x != nil {
		return x.DeviceUuid
	}
	return ""
}

func (x *DeviceInfoAdd) GetProductType() string {
	if x != nil {
		return x.ProductType
	}
	return ""
}

func (x *DeviceInfoAdd) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *DeviceInfoAdd) GetSubnetMask() string {
	if x != nil {
		return x.SubnetMask
	}
	return ""
}

func (x *DeviceInfoAdd) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *DeviceInfoAdd) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceInfoAdd) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DeviceInfoAdd) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *DeviceInfoAdd) GetGbCode() string {
	if x != nil {
		return x.GbCode
	}
	return ""
}

func (x *DeviceInfoAdd) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *DeviceInfoAdd) GetIotExtInfo() string {
	if x != nil {
		return x.IotExtInfo
	}
	return ""
}

func (x *DeviceInfoAdd) GetAreaId() string {
	if x != nil {
		return x.AreaId
	}
	return ""
}

func (x *DeviceInfoAdd) GetDeviceSn() string {
	if x != nil {
		return x.DeviceSn
	}
	return ""
}

func (x *DeviceInfoAdd) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DeviceInfoAdd) GetSource() int64 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *DeviceInfoAdd) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DeviceInfoAdd) GetInfId() string {
	if x != nil {
		return x.InfId
	}
	return ""
}

func (x *DeviceInfoAdd) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *DeviceInfoAdd) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DeviceInfoAdd) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *DeviceInfoAdd) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *DeviceInfoAdd) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

type DeviceStatusDeleteRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	Success  bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Msg      string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *DeviceStatusDeleteRsp) Reset() {
	*x = DeviceStatusDeleteRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStatusDeleteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStatusDeleteRsp) ProtoMessage() {}

func (x *DeviceStatusDeleteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStatusDeleteRsp.ProtoReflect.Descriptor instead.
func (*DeviceStatusDeleteRsp) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{32}
}

func (x *DeviceStatusDeleteRsp) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceStatusDeleteRsp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeviceStatusDeleteRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type AreaId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId string `protobuf:"bytes,1,opt,name=areaId,proto3" json:"areaId,omitempty"`
}

func (x *AreaId) Reset() {
	*x = AreaId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaId) ProtoMessage() {}

func (x *AreaId) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaId.ProtoReflect.Descriptor instead.
func (*AreaId) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{33}
}

func (x *AreaId) GetAreaId() string {
	if x != nil {
		return x.AreaId
	}
	return ""
}

type AreaInfoUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	AreaId    string `protobuf:"bytes,2,opt,name=areaId,proto3" json:"areaId,omitempty"`
	AreaName  string `protobuf:"bytes,3,opt,name=areaName,proto3" json:"areaName,omitempty"`
	Version   int64  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	ExtInfo   string `protobuf:"bytes,5,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	Remarks   string `protobuf:"bytes,6,opt,name=remarks,proto3" json:"remarks,omitempty"`
}

func (x *AreaInfoUpdateReq) Reset() {
	*x = AreaInfoUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaInfoUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaInfoUpdateReq) ProtoMessage() {}

func (x *AreaInfoUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaInfoUpdateReq.ProtoReflect.Descriptor instead.
func (*AreaInfoUpdateReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{34}
}

func (x *AreaInfoUpdateReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AreaInfoUpdateReq) GetAreaId() string {
	if x != nil {
		return x.AreaId
	}
	return ""
}

func (x *AreaInfoUpdateReq) GetAreaName() string {
	if x != nil {
		return x.AreaName
	}
	return ""
}

func (x *AreaInfoUpdateReq) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *AreaInfoUpdateReq) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *AreaInfoUpdateReq) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

type ChannelInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPermission  *PermissionVO     `protobuf:"bytes,10022,opt,name=userPermission,proto3" json:"userPermission,omitempty"`
	ChannelType     string            `protobuf:"bytes,10005,opt,name=channelType,proto3" json:"channelType,omitempty"`
	DeviceId        string            `protobuf:"bytes,10007,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	ExtInfo         string            `protobuf:"bytes,10012,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	ParentId        string            `protobuf:"bytes,10008,opt,name=parentId,proto3" json:"parentId,omitempty"`
	Deleted         int32             `protobuf:"varint,10010,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Version         int64             `protobuf:"varint,10014,opt,name=version,proto3" json:"version,omitempty"`
	CaptureAbility  string            `protobuf:"bytes,10016,opt,name=captureAbility,proto3" json:"captureAbility,omitempty"`
	Latitude        string            `protobuf:"bytes,10017,opt,name=latitude,proto3" json:"latitude,omitempty"`
	CreateTime      string            `protobuf:"bytes,10019,opt,name=createTime,proto3" json:"createTime,omitempty"`
	ChannelId       string            `protobuf:"bytes,10002,opt,name=channelId,proto3" json:"channelId,omitempty"`
	ChannelUuid     string            `protobuf:"bytes,10003,opt,name=channelUuid,proto3" json:"channelUuid,omitempty"`
	ChannelNo       string            `protobuf:"bytes,10006,opt,name=channelNo,proto3" json:"channelNo,omitempty"`
	UpdateTime      string            `protobuf:"bytes,10020,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Remarks         string            `protobuf:"bytes,10021,opt,name=remarks,proto3" json:"remarks,omitempty"`
	Direction       string            `protobuf:"bytes,10011,opt,name=direction,proto3" json:"direction,omitempty"`
	IotExtInfo      string            `protobuf:"bytes,10013,opt,name=iotExtInfo,proto3" json:"iotExtInfo,omitempty"`
	GbCode          string            `protobuf:"bytes,10015,opt,name=gbCode,proto3" json:"gbCode,omitempty"`
	Longitude       string            `protobuf:"bytes,10018,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Id              int64             `protobuf:"varint,10001,opt,name=id,proto3" json:"id,omitempty"`
	ChannelName     string            `protobuf:"bytes,10004,opt,name=channelName,proto3" json:"channelName,omitempty"`
	Enabled         int32             `protobuf:"varint,10009,opt,name=enabled,proto3" json:"enabled,omitempty"`
	StatusList      []*ChannelStatus  `protobuf:"bytes,2,rep,name=statusList,proto3" json:"statusList,omitempty"`
	TagList         []*DeviceTag      `protobuf:"bytes,3,rep,name=tagList,proto3" json:"tagList,omitempty"`
	BindChnList     []*ChannelInfo    `protobuf:"bytes,4,rep,name=bindChnList,proto3" json:"bindChnList,omitempty"`
	ReadHeadChnList []*ChannelInfoRsp `protobuf:"bytes,5,rep,name=readHeadChnList,proto3" json:"readHeadChnList,omitempty"`
}

func (x *ChannelInfoRsp) Reset() {
	*x = ChannelInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInfoRsp) ProtoMessage() {}

func (x *ChannelInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInfoRsp.ProtoReflect.Descriptor instead.
func (*ChannelInfoRsp) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{35}
}

func (x *ChannelInfoRsp) GetUserPermission() *PermissionVO {
	if x != nil {
		return x.UserPermission
	}
	return nil
}

func (x *ChannelInfoRsp) GetChannelType() string {
	if x != nil {
		return x.ChannelType
	}
	return ""
}

func (x *ChannelInfoRsp) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *ChannelInfoRsp) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *ChannelInfoRsp) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *ChannelInfoRsp) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *ChannelInfoRsp) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ChannelInfoRsp) GetCaptureAbility() string {
	if x != nil {
		return x.CaptureAbility
	}
	return ""
}

func (x *ChannelInfoRsp) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *ChannelInfoRsp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ChannelInfoRsp) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelInfoRsp) GetChannelUuid() string {
	if x != nil {
		return x.ChannelUuid
	}
	return ""
}

func (x *ChannelInfoRsp) GetChannelNo() string {
	if x != nil {
		return x.ChannelNo
	}
	return ""
}

func (x *ChannelInfoRsp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ChannelInfoRsp) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *ChannelInfoRsp) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *ChannelInfoRsp) GetIotExtInfo() string {
	if x != nil {
		return x.IotExtInfo
	}
	return ""
}

func (x *ChannelInfoRsp) GetGbCode() string {
	if x != nil {
		return x.GbCode
	}
	return ""
}

func (x *ChannelInfoRsp) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *ChannelInfoRsp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelInfoRsp) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *ChannelInfoRsp) GetEnabled() int32 {
	if x != nil {
		return x.Enabled
	}
	return 0
}

func (x *ChannelInfoRsp) GetStatusList() []*ChannelStatus {
	if x != nil {
		return x.StatusList
	}
	return nil
}

func (x *ChannelInfoRsp) GetTagList() []*DeviceTag {
	if x != nil {
		return x.TagList
	}
	return nil
}

func (x *ChannelInfoRsp) GetBindChnList() []*ChannelInfo {
	if x != nil {
		return x.BindChnList
	}
	return nil
}

func (x *ChannelInfoRsp) GetReadHeadChnList() []*ChannelInfoRsp {
	if x != nil {
		return x.ReadHeadChnList
	}
	return nil
}

type DeviceInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfList         []*InfIdName      `protobuf:"bytes,5,rep,name=infList,proto3" json:"infList,omitempty"`
	Version         int64             `protobuf:"varint,10016,opt,name=version,proto3" json:"version,omitempty"`
	DeviceName      string            `protobuf:"bytes,10004,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	GbCode          string            `protobuf:"bytes,10018,opt,name=gbCode,proto3" json:"gbCode,omitempty"`
	SoftwareVersion string            `protobuf:"bytes,10025,opt,name=softwareVersion,proto3" json:"softwareVersion,omitempty"`
	UpdateTime      string            `protobuf:"bytes,10029,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Id              int64             `protobuf:"varint,10001,opt,name=id,proto3" json:"id,omitempty"`
	Ip              string            `protobuf:"bytes,10011,opt,name=ip,proto3" json:"ip,omitempty"`
	SubnetMask      string            `protobuf:"bytes,10019,opt,name=subnetMask,proto3" json:"subnetMask,omitempty"`
	UserPermission  *PermissionVO     `protobuf:"bytes,10031,opt,name=userPermission,proto3" json:"userPermission,omitempty"`
	DeviceId        string            `protobuf:"bytes,10002,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	DeviceUuid      string            `protobuf:"bytes,10003,opt,name=deviceUuid,proto3" json:"deviceUuid,omitempty"`
	ProductType     string            `protobuf:"bytes,10010,opt,name=productType,proto3" json:"productType,omitempty"`
	Dns             string            `protobuf:"bytes,10021,opt,name=dns,proto3" json:"dns,omitempty"`
	Username        string            `protobuf:"bytes,10022,opt,name=username,proto3" json:"username,omitempty"`
	Remarks         string            `protobuf:"bytes,10030,opt,name=remarks,proto3" json:"remarks,omitempty"`
	CreateTime      string            `protobuf:"bytes,10028,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Deleted         int32             `protobuf:"varint,10006,opt,name=deleted,proto3" json:"deleted,omitempty"`
	DeviceType      string            `protobuf:"bytes,10007,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	Source          int64             `protobuf:"varint,10017,opt,name=source,proto3" json:"source,omitempty"`
	Gateway         string            `protobuf:"bytes,10020,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Manufacturer    string            `protobuf:"bytes,10024,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	IotExtInfo      string            `protobuf:"bytes,10027,opt,name=iotExtInfo,proto3" json:"iotExtInfo,omitempty"`
	DeviceSn        string            `protobuf:"bytes,10009,opt,name=deviceSn,proto3" json:"deviceSn,omitempty"`
	Port            int64             `protobuf:"varint,10012,opt,name=port,proto3" json:"port,omitempty"`
	Imei            string            `protobuf:"bytes,10014,opt,name=imei,proto3" json:"imei,omitempty"`
	Password        string            `protobuf:"bytes,10023,opt,name=password,proto3" json:"password,omitempty"`
	Enabled         int32             `protobuf:"varint,10005,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ServiceUuid     string            `protobuf:"bytes,10008,opt,name=serviceUuid,proto3" json:"serviceUuid,omitempty"`
	Mac             string            `protobuf:"bytes,10013,opt,name=mac,proto3" json:"mac,omitempty"`
	ExtInfo         string            `protobuf:"bytes,10015,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	HardwareVersion string            `protobuf:"bytes,10026,opt,name=hardwareVersion,proto3" json:"hardwareVersion,omitempty"`
	ChnList         []*ChannelInfoRsp `protobuf:"bytes,2,rep,name=chnList,proto3" json:"chnList,omitempty"`
	StatusList      []*DeviceStatus   `protobuf:"bytes,3,rep,name=statusList,proto3" json:"statusList,omitempty"`
	AreaList        []*AreaInfo       `protobuf:"bytes,4,rep,name=areaList,proto3" json:"areaList,omitempty"`
}

func (x *DeviceInfoRsp) Reset() {
	*x = DeviceInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoRsp) ProtoMessage() {}

func (x *DeviceInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoRsp.ProtoReflect.Descriptor instead.
func (*DeviceInfoRsp) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{36}
}

func (x *DeviceInfoRsp) GetInfList() []*InfIdName {
	if x != nil {
		return x.InfList
	}
	return nil
}

func (x *DeviceInfoRsp) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DeviceInfoRsp) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceInfoRsp) GetGbCode() string {
	if x != nil {
		return x.GbCode
	}
	return ""
}

func (x *DeviceInfoRsp) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *DeviceInfoRsp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *DeviceInfoRsp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceInfoRsp) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DeviceInfoRsp) GetSubnetMask() string {
	if x != nil {
		return x.SubnetMask
	}
	return ""
}

func (x *DeviceInfoRsp) GetUserPermission() *PermissionVO {
	if x != nil {
		return x.UserPermission
	}
	return nil
}

func (x *DeviceInfoRsp) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceInfoRsp) GetDeviceUuid() string {
	if x != nil {
		return x.DeviceUuid
	}
	return ""
}

func (x *DeviceInfoRsp) GetProductType() string {
	if x != nil {
		return x.ProductType
	}
	return ""
}

func (x *DeviceInfoRsp) GetDns() string {
	if x != nil {
		return x.Dns
	}
	return ""
}

func (x *DeviceInfoRsp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DeviceInfoRsp) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *DeviceInfoRsp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *DeviceInfoRsp) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *DeviceInfoRsp) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *DeviceInfoRsp) GetSource() int64 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *DeviceInfoRsp) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *DeviceInfoRsp) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *DeviceInfoRsp) GetIotExtInfo() string {
	if x != nil {
		return x.IotExtInfo
	}
	return ""
}

func (x *DeviceInfoRsp) GetDeviceSn() string {
	if x != nil {
		return x.DeviceSn
	}
	return ""
}

func (x *DeviceInfoRsp) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DeviceInfoRsp) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *DeviceInfoRsp) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DeviceInfoRsp) GetEnabled() int32 {
	if x != nil {
		return x.Enabled
	}
	return 0
}

func (x *DeviceInfoRsp) GetServiceUuid() string {
	if x != nil {
		return x.ServiceUuid
	}
	return ""
}

func (x *DeviceInfoRsp) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *DeviceInfoRsp) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *DeviceInfoRsp) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

func (x *DeviceInfoRsp) GetChnList() []*ChannelInfoRsp {
	if x != nil {
		return x.ChnList
	}
	return nil
}

func (x *DeviceInfoRsp) GetStatusList() []*DeviceStatus {
	if x != nil {
		return x.StatusList
	}
	return nil
}

func (x *DeviceInfoRsp) GetAreaList() []*AreaInfo {
	if x != nil {
		return x.AreaList
	}
	return nil
}

type DeviceTagQueryByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	TagId     string `protobuf:"bytes,2,opt,name=tagId,proto3" json:"tagId,omitempty"`
}

func (x *DeviceTagQueryByIdReq) Reset() {
	*x = DeviceTagQueryByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagQueryByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagQueryByIdReq) ProtoMessage() {}

func (x *DeviceTagQueryByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagQueryByIdReq.ProtoReflect.Descriptor instead.
func (*DeviceTagQueryByIdReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{37}
}

func (x *DeviceTagQueryByIdReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeviceTagQueryByIdReq) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

type RemoveDeviceTagChnReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string   `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	TagId     string   `protobuf:"bytes,2,opt,name=tagId,proto3" json:"tagId,omitempty"`
	ChnId     []string `protobuf:"bytes,3,rep,name=chnId,proto3" json:"chnId,omitempty"`
}

func (x *RemoveDeviceTagChnReq) Reset() {
	*x = RemoveDeviceTagChnReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDeviceTagChnReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDeviceTagChnReq) ProtoMessage() {}

func (x *RemoveDeviceTagChnReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDeviceTagChnReq.ProtoReflect.Descriptor instead.
func (*RemoveDeviceTagChnReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{38}
}

func (x *RemoveDeviceTagChnReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *RemoveDeviceTagChnReq) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *RemoveDeviceTagChnReq) GetChnId() []string {
	if x != nil {
		return x.ChnId
	}
	return nil
}

type AreaInfoQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId    string `protobuf:"bytes,3,opt,name=roleId,proto3" json:"roleId,omitempty"`
	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ParentId  string `protobuf:"bytes,2,opt,name=parentId,proto3" json:"parentId,omitempty"`
}

func (x *AreaInfoQueryReq) Reset() {
	*x = AreaInfoQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaInfoQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaInfoQueryReq) ProtoMessage() {}

func (x *AreaInfoQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaInfoQueryReq.ProtoReflect.Descriptor instead.
func (*AreaInfoQueryReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{39}
}

func (x *AreaInfoQueryReq) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *AreaInfoQueryReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AreaInfoQueryReq) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

type AreaInfoDelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  string   `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	AreaIdList []string `protobuf:"bytes,2,rep,name=areaIdList,proto3" json:"areaIdList,omitempty"`
}

func (x *AreaInfoDelReq) Reset() {
	*x = AreaInfoDelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaInfoDelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaInfoDelReq) ProtoMessage() {}

func (x *AreaInfoDelReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaInfoDelReq.ProtoReflect.Descriptor instead.
func (*AreaInfoDelReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{40}
}

func (x *AreaInfoDelReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AreaInfoDelReq) GetAreaIdList() []string {
	if x != nil {
		return x.AreaIdList
	}
	return nil
}

type MulCheckDoorOpenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ChannelId       string `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	RecognitionMode string `protobuf:"bytes,3,opt,name=recognitionMode,proto3" json:"recognitionMode,omitempty"`
	Version         int64  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *MulCheckDoorOpenReq) Reset() {
	*x = MulCheckDoorOpenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MulCheckDoorOpenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MulCheckDoorOpenReq) ProtoMessage() {}

func (x *MulCheckDoorOpenReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MulCheckDoorOpenReq.ProtoReflect.Descriptor instead.
func (*MulCheckDoorOpenReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{41}
}

func (x *MulCheckDoorOpenReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *MulCheckDoorOpenReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *MulCheckDoorOpenReq) GetRecognitionMode() string {
	if x != nil {
		return x.RecognitionMode
	}
	return ""
}

func (x *MulCheckDoorOpenReq) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DeviceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateTime string `protobuf:"bytes,10,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Remarks    string `protobuf:"bytes,11,opt,name=remarks,proto3" json:"remarks,omitempty"`
	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DeviceId   string `protobuf:"bytes,3,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	StateValue string `protobuf:"bytes,5,opt,name=stateValue,proto3" json:"stateValue,omitempty"`
	Time       string `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`
	ExtInfo    string `protobuf:"bytes,7,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	StatusId   string `protobuf:"bytes,2,opt,name=statusId,proto3" json:"statusId,omitempty"`
	StateType  string `protobuf:"bytes,4,opt,name=stateType,proto3" json:"stateType,omitempty"`
	Version    int64  `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty"`
	CreateTime string `protobuf:"bytes,9,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *DeviceStatus) Reset() {
	*x = DeviceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStatus) ProtoMessage() {}

func (x *DeviceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStatus.ProtoReflect.Descriptor instead.
func (*DeviceStatus) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{42}
}

func (x *DeviceStatus) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *DeviceStatus) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *DeviceStatus) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceStatus) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceStatus) GetStateValue() string {
	if x != nil {
		return x.StateValue
	}
	return ""
}

func (x *DeviceStatus) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *DeviceStatus) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *DeviceStatus) GetStatusId() string {
	if x != nil {
		return x.StatusId
	}
	return ""
}

func (x *DeviceStatus) GetStateType() string {
	if x != nil {
		return x.StateType
	}
	return ""
}

func (x *DeviceStatus) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DeviceStatus) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type DeviceTagMove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId    string `protobuf:"bytes,1,opt,name=tagId,proto3" json:"tagId,omitempty"`
	AimPreId string `protobuf:"bytes,2,opt,name=aimPreId,proto3" json:"aimPreId,omitempty"`
}

func (x *DeviceTagMove) Reset() {
	*x = DeviceTagMove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagMove) ProtoMessage() {}

func (x *DeviceTagMove) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagMove.ProtoReflect.Descriptor instead.
func (*DeviceTagMove) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{43}
}

func (x *DeviceTagMove) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *DeviceTagMove) GetAimPreId() string {
	if x != nil {
		return x.AimPreId
	}
	return ""
}

type LogoInfoAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Image     string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *LogoInfoAddReq) Reset() {
	*x = LogoInfoAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoInfoAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoInfoAddReq) ProtoMessage() {}

func (x *LogoInfoAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoInfoAddReq.ProtoReflect.Descriptor instead.
func (*LogoInfoAddReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{44}
}

func (x *LogoInfoAddReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LogoInfoAddReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *LogoInfoAddReq) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type PermissionVO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationPermissions []*PermissionVO `protobuf:"bytes,14,rep,name=operationPermissions,proto3" json:"operationPermissions,omitempty"`
	ParentResourceId     string          `protobuf:"bytes,7,opt,name=parentResourceId,proto3" json:"parentResourceId,omitempty"`
	ParentResourceType   string          `protobuf:"bytes,8,opt,name=parentResourceType,proto3" json:"parentResourceType,omitempty"`
	CustomOperation      int64           `protobuf:"varint,11,opt,name=customOperation,proto3" json:"customOperation,omitempty"`
	Check                int32           `protobuf:"varint,13,opt,name=check,proto3" json:"check,omitempty"`
	ParentId             string          `protobuf:"bytes,6,opt,name=parentId,proto3" json:"parentId,omitempty"`
	PermissionId         string          `protobuf:"bytes,1,opt,name=permissionId,proto3" json:"permissionId,omitempty"`
	Visible              int32           `protobuf:"varint,5,opt,name=visible,proto3" json:"visible,omitempty"`
	OperationOffset      int64           `protobuf:"varint,10,opt,name=operationOffset,proto3" json:"operationOffset,omitempty"`
	Action               string          `protobuf:"bytes,12,opt,name=action,proto3" json:"action,omitempty"`
	ResourceId           string          `protobuf:"bytes,2,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	ResourceType         string          `protobuf:"bytes,3,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	Name                 string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Operation            int64           `protobuf:"varint,9,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *PermissionVO) Reset() {
	*x = PermissionVO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionVO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionVO) ProtoMessage() {}

func (x *PermissionVO) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionVO.ProtoReflect.Descriptor instead.
func (*PermissionVO) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{45}
}

func (x *PermissionVO) GetOperationPermissions() []*PermissionVO {
	if x != nil {
		return x.OperationPermissions
	}
	return nil
}

func (x *PermissionVO) GetParentResourceId() string {
	if x != nil {
		return x.ParentResourceId
	}
	return ""
}

func (x *PermissionVO) GetParentResourceType() string {
	if x != nil {
		return x.ParentResourceType
	}
	return ""
}

func (x *PermissionVO) GetCustomOperation() int64 {
	if x != nil {
		return x.CustomOperation
	}
	return 0
}

func (x *PermissionVO) GetCheck() int32 {
	if x != nil {
		return x.Check
	}
	return 0
}

func (x *PermissionVO) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *PermissionVO) GetPermissionId() string {
	if x != nil {
		return x.PermissionId
	}
	return ""
}

func (x *PermissionVO) GetVisible() int32 {
	if x != nil {
		return x.Visible
	}
	return 0
}

func (x *PermissionVO) GetOperationOffset() int64 {
	if x != nil {
		return x.OperationOffset
	}
	return 0
}

func (x *PermissionVO) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PermissionVO) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *PermissionVO) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *PermissionVO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PermissionVO) GetOperation() int64 {
	if x != nil {
		return x.Operation
	}
	return 0
}

type ChannelId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
}

func (x *ChannelId) Reset() {
	*x = ChannelId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelId) ProtoMessage() {}

func (x *ChannelId) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelId.ProtoReflect.Descriptor instead.
func (*ChannelId) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{46}
}

func (x *ChannelId) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type ChannelStatusGetListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateType string `protobuf:"bytes,3,opt,name=stateType,proto3" json:"stateType,omitempty"`
	Page      int64  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Limit     int64  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ChannelId string `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
}

func (x *ChannelStatusGetListReq) Reset() {
	*x = ChannelStatusGetListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStatusGetListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStatusGetListReq) ProtoMessage() {}

func (x *ChannelStatusGetListReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStatusGetListReq.ProtoReflect.Descriptor instead.
func (*ChannelStatusGetListReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{47}
}

func (x *ChannelStatusGetListReq) GetStateType() string {
	if x != nil {
		return x.StateType
	}
	return ""
}

func (x *ChannelStatusGetListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ChannelStatusGetListReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ChannelStatusGetListReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ChannelStatusGetListReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type DeviceGetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	DeviceId   string `protobuf:"bytes,2,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	ChnFlag    bool   `protobuf:"varint,3,opt,name=chnFlag,proto3" json:"chnFlag,omitempty"`
	StatusFlag bool   `protobuf:"varint,4,opt,name=statusFlag,proto3" json:"statusFlag,omitempty"`
	AreaFlag   bool   `protobuf:"varint,5,opt,name=areaFlag,proto3" json:"areaFlag,omitempty"`
	InfFlag    bool   `protobuf:"varint,6,opt,name=infFlag,proto3" json:"infFlag,omitempty"`
}

func (x *DeviceGetReq) Reset() {
	*x = DeviceGetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceGetReq) ProtoMessage() {}

func (x *DeviceGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceGetReq.ProtoReflect.Descriptor instead.
func (*DeviceGetReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{48}
}

func (x *DeviceGetReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeviceGetReq) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceGetReq) GetChnFlag() bool {
	if x != nil {
		return x.ChnFlag
	}
	return false
}

func (x *DeviceGetReq) GetStatusFlag() bool {
	if x != nil {
		return x.StatusFlag
	}
	return false
}

func (x *DeviceGetReq) GetAreaFlag() bool {
	if x != nil {
		return x.AreaFlag
	}
	return false
}

func (x *DeviceGetReq) GetInfFlag() bool {
	if x != nil {
		return x.InfFlag
	}
	return false
}

type DeviceEditReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	DeviceId  string `protobuf:"bytes,2,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
}

func (x *DeviceEditReq) Reset() {
	*x = DeviceEditReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEditReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEditReq) ProtoMessage() {}

func (x *DeviceEditReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEditReq.ProtoReflect.Descriptor instead.
func (*DeviceEditReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{49}
}

func (x *DeviceEditReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeviceEditReq) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type DeviceTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtInfo    string `protobuf:"bytes,5,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	CreateTime string `protobuf:"bytes,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime string `protobuf:"bytes,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Remarks    string `protobuf:"bytes,8,opt,name=remarks,proto3" json:"remarks,omitempty"`
	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TagId      string `protobuf:"bytes,2,opt,name=tagId,proto3" json:"tagId,omitempty"`
	TagName    string `protobuf:"bytes,3,opt,name=tagName,proto3" json:"tagName,omitempty"`
	TagSn      int64  `protobuf:"varint,4,opt,name=tagSn,proto3" json:"tagSn,omitempty"`
}

func (x *DeviceTag) Reset() {
	*x = DeviceTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTag) ProtoMessage() {}

func (x *DeviceTag) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTag.ProtoReflect.Descriptor instead.
func (*DeviceTag) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{50}
}

func (x *DeviceTag) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *DeviceTag) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *DeviceTag) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *DeviceTag) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *DeviceTag) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceTag) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *DeviceTag) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *DeviceTag) GetTagSn() int64 {
	if x != nil {
		return x.TagSn
	}
	return 0
}

type AreaMoveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AimParId  string `protobuf:"bytes,5,opt,name=aimParId,proto3" json:"aimParId,omitempty"`
	Version   int64  `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	CurId     string `protobuf:"bytes,2,opt,name=curId,proto3" json:"curId,omitempty"`
	CurParId  string `protobuf:"bytes,3,opt,name=curParId,proto3" json:"curParId,omitempty"`
	AimPreId  string `protobuf:"bytes,4,opt,name=aimPreId,proto3" json:"aimPreId,omitempty"`
}

func (x *AreaMoveReq) Reset() {
	*x = AreaMoveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaMoveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaMoveReq) ProtoMessage() {}

func (x *AreaMoveReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaMoveReq.ProtoReflect.Descriptor instead.
func (*AreaMoveReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{51}
}

func (x *AreaMoveReq) GetAimParId() string {
	if x != nil {
		return x.AimParId
	}
	return ""
}

func (x *AreaMoveReq) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *AreaMoveReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AreaMoveReq) GetCurId() string {
	if x != nil {
		return x.CurId
	}
	return ""
}

func (x *AreaMoveReq) GetCurParId() string {
	if x != nil {
		return x.CurParId
	}
	return ""
}

func (x *AreaMoveReq) GetAimPreId() string {
	if x != nil {
		return x.AimPreId
	}
	return ""
}

type DeviceInfoAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string           `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	DevList   []*DeviceInfoAdd `protobuf:"bytes,2,rep,name=devList,proto3" json:"devList,omitempty"`
}

func (x *DeviceInfoAddReq) Reset() {
	*x = DeviceInfoAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoAddReq) ProtoMessage() {}

func (x *DeviceInfoAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoAddReq.ProtoReflect.Descriptor instead.
func (*DeviceInfoAddReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{52}
}

func (x *DeviceInfoAddReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeviceInfoAddReq) GetDevList() []*DeviceInfoAdd {
	if x != nil {
		return x.DevList
	}
	return nil
}

type DeviceInfoAddRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	DeviceId string `protobuf:"bytes,2,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	Msg      string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *DeviceInfoAddRsp) Reset() {
	*x = DeviceInfoAddRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoAddRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoAddRsp) ProtoMessage() {}

func (x *DeviceInfoAddRsp) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoAddRsp.ProtoReflect.Descriptor instead.
func (*DeviceInfoAddRsp) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{53}
}

func (x *DeviceInfoAddRsp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeviceInfoAddRsp) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceInfoAddRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type DeviceManagedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip         string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	DeviceName string `protobuf:"bytes,3,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	DeviceType string `protobuf:"bytes,5,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	Page       int64  `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	Limit      int64  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	SortColumn string `protobuf:"bytes,8,opt,name=sortColumn,proto3" json:"sortColumn,omitempty"`
	SortOrder  string `protobuf:"bytes,9,opt,name=sortOrder,proto3" json:"sortOrder,omitempty"`
	ProjectId  string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	AreaId     string `protobuf:"bytes,2,opt,name=areaId,proto3" json:"areaId,omitempty"`
}

func (x *DeviceManagedReq) Reset() {
	*x = DeviceManagedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceManagedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceManagedReq) ProtoMessage() {}

func (x *DeviceManagedReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceManagedReq.ProtoReflect.Descriptor instead.
func (*DeviceManagedReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{54}
}

func (x *DeviceManagedReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DeviceManagedReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceManagedReq) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *DeviceManagedReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DeviceManagedReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DeviceManagedReq) GetSortColumn() string {
	if x != nil {
		return x.SortColumn
	}
	return ""
}

func (x *DeviceManagedReq) GetSortOrder() string {
	if x != nil {
		return x.SortOrder
	}
	return ""
}

func (x *DeviceManagedReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeviceManagedReq) GetAreaId() string {
	if x != nil {
		return x.AreaId
	}
	return ""
}

type DeviceTagDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	TagId     string `protobuf:"bytes,2,opt,name=tagId,proto3" json:"tagId,omitempty"`
}

func (x *DeviceTagDeleteReq) Reset() {
	*x = DeviceTagDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagDeleteReq) ProtoMessage() {}

func (x *DeviceTagDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagDeleteReq.ProtoReflect.Descriptor instead.
func (*DeviceTagDeleteReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{55}
}

func (x *DeviceTagDeleteReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeviceTagDeleteReq) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

type DeviceTagChnReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChnName   string `protobuf:"bytes,3,opt,name=chnName,proto3" json:"chnName,omitempty"`
	ChnType   string `protobuf:"bytes,4,opt,name=chnType,proto3" json:"chnType,omitempty"`
	DevName   string `protobuf:"bytes,5,opt,name=devName,proto3" json:"devName,omitempty"`
	Page      int64  `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	Limit     int64  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	TagId     int64  `protobuf:"varint,2,opt,name=tagId,proto3" json:"tagId,omitempty"`
}

func (x *DeviceTagChnReq) Reset() {
	*x = DeviceTagChnReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagChnReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagChnReq) ProtoMessage() {}

func (x *DeviceTagChnReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagChnReq.ProtoReflect.Descriptor instead.
func (*DeviceTagChnReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{56}
}

func (x *DeviceTagChnReq) GetChnName() string {
	if x != nil {
		return x.ChnName
	}
	return ""
}

func (x *DeviceTagChnReq) GetChnType() string {
	if x != nil {
		return x.ChnType
	}
	return ""
}

func (x *DeviceTagChnReq) GetDevName() string {
	if x != nil {
		return x.DevName
	}
	return ""
}

func (x *DeviceTagChnReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DeviceTagChnReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DeviceTagChnReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeviceTagChnReq) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

type ChannelTreeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           string        `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	TreeId         string        `protobuf:"bytes,2,opt,name=treeId,proto3" json:"treeId,omitempty"`
	TreePid        string        `protobuf:"bytes,3,opt,name=treePid,proto3" json:"treePid,omitempty"`
	ParentId       string        `protobuf:"bytes,40008,opt,name=parentId,proto3" json:"parentId,omitempty"`
	Version        int64         `protobuf:"varint,40014,opt,name=version,proto3" json:"version,omitempty"`
	CaptureAbility string        `protobuf:"bytes,40016,opt,name=captureAbility,proto3" json:"captureAbility,omitempty"`
	Latitude       string        `protobuf:"bytes,40017,opt,name=latitude,proto3" json:"latitude,omitempty"`
	CreateTime     string        `protobuf:"bytes,40019,opt,name=createTime,proto3" json:"createTime,omitempty"`
	ChannelId      string        `protobuf:"bytes,40002,opt,name=channelId,proto3" json:"channelId,omitempty"`
	ChannelUuid    string        `protobuf:"bytes,40003,opt,name=channelUuid,proto3" json:"channelUuid,omitempty"`
	ChannelNo      string        `protobuf:"bytes,40006,opt,name=channelNo,proto3" json:"channelNo,omitempty"`
	Deleted        int32         `protobuf:"varint,40010,opt,name=deleted,proto3" json:"deleted,omitempty"`
	UpdateTime     string        `protobuf:"bytes,40020,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Remarks        string        `protobuf:"bytes,40021,opt,name=remarks,proto3" json:"remarks,omitempty"`
	IotExtInfo     string        `protobuf:"bytes,40013,opt,name=iotExtInfo,proto3" json:"iotExtInfo,omitempty"`
	GbCode         string        `protobuf:"bytes,40015,opt,name=gbCode,proto3" json:"gbCode,omitempty"`
	Longitude      string        `protobuf:"bytes,40018,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Id             int64         `protobuf:"varint,40001,opt,name=id,proto3" json:"id,omitempty"`
	ChannelName    string        `protobuf:"bytes,40004,opt,name=channelName,proto3" json:"channelName,omitempty"`
	Enabled        int32         `protobuf:"varint,40009,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Direction      string        `protobuf:"bytes,40011,opt,name=direction,proto3" json:"direction,omitempty"`
	ChannelType    string        `protobuf:"bytes,40005,opt,name=channelType,proto3" json:"channelType,omitempty"`
	DeviceId       string        `protobuf:"bytes,40007,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	ExtInfo        string        `protobuf:"bytes,40012,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	UserPermission *PermissionVO `protobuf:"bytes,40022,opt,name=userPermission,proto3" json:"userPermission,omitempty"`
}

func (x *ChannelTreeInfo) Reset() {
	*x = ChannelTreeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelTreeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelTreeInfo) ProtoMessage() {}

func (x *ChannelTreeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelTreeInfo.ProtoReflect.Descriptor instead.
func (*ChannelTreeInfo) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{57}
}

func (x *ChannelTreeInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChannelTreeInfo) GetTreeId() string {
	if x != nil {
		return x.TreeId
	}
	return ""
}

func (x *ChannelTreeInfo) GetTreePid() string {
	if x != nil {
		return x.TreePid
	}
	return ""
}

func (x *ChannelTreeInfo) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *ChannelTreeInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ChannelTreeInfo) GetCaptureAbility() string {
	if x != nil {
		return x.CaptureAbility
	}
	return ""
}

func (x *ChannelTreeInfo) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *ChannelTreeInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ChannelTreeInfo) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelTreeInfo) GetChannelUuid() string {
	if x != nil {
		return x.ChannelUuid
	}
	return ""
}

func (x *ChannelTreeInfo) GetChannelNo() string {
	if x != nil {
		return x.ChannelNo
	}
	return ""
}

func (x *ChannelTreeInfo) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *ChannelTreeInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ChannelTreeInfo) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *ChannelTreeInfo) GetIotExtInfo() string {
	if x != nil {
		return x.IotExtInfo
	}
	return ""
}

func (x *ChannelTreeInfo) GetGbCode() string {
	if x != nil {
		return x.GbCode
	}
	return ""
}

func (x *ChannelTreeInfo) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *ChannelTreeInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelTreeInfo) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *ChannelTreeInfo) GetEnabled() int32 {
	if x != nil {
		return x.Enabled
	}
	return 0
}

func (x *ChannelTreeInfo) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *ChannelTreeInfo) GetChannelType() string {
	if x != nil {
		return x.ChannelType
	}
	return ""
}

func (x *ChannelTreeInfo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *ChannelTreeInfo) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *ChannelTreeInfo) GetUserPermission() *PermissionVO {
	if x != nil {
		return x.UserPermission
	}
	return nil
}

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtInfo         string        `protobuf:"bytes,15,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	HardwareVersion string        `protobuf:"bytes,26,opt,name=hardwareVersion,proto3" json:"hardwareVersion,omitempty"`
	Enabled         int32         `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ServiceUuid     string        `protobuf:"bytes,8,opt,name=serviceUuid,proto3" json:"serviceUuid,omitempty"`
	Mac             string        `protobuf:"bytes,13,opt,name=mac,proto3" json:"mac,omitempty"`
	Version         int64         `protobuf:"varint,16,opt,name=version,proto3" json:"version,omitempty"`
	UpdateTime      string        `protobuf:"bytes,29,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	DeviceName      string        `protobuf:"bytes,4,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	GbCode          string        `protobuf:"bytes,18,opt,name=gbCode,proto3" json:"gbCode,omitempty"`
	SoftwareVersion string        `protobuf:"bytes,25,opt,name=softwareVersion,proto3" json:"softwareVersion,omitempty"`
	UserPermission  *PermissionVO `protobuf:"bytes,31,opt,name=userPermission,proto3" json:"userPermission,omitempty"`
	Id              int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ip              string        `protobuf:"bytes,11,opt,name=ip,proto3" json:"ip,omitempty"`
	SubnetMask      string        `protobuf:"bytes,19,opt,name=subnetMask,proto3" json:"subnetMask,omitempty"`
	Dns             string        `protobuf:"bytes,21,opt,name=dns,proto3" json:"dns,omitempty"`
	Username        string        `protobuf:"bytes,22,opt,name=username,proto3" json:"username,omitempty"`
	Remarks         string        `protobuf:"bytes,30,opt,name=remarks,proto3" json:"remarks,omitempty"`
	DeviceId        string        `protobuf:"bytes,2,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	DeviceUuid      string        `protobuf:"bytes,3,opt,name=deviceUuid,proto3" json:"deviceUuid,omitempty"`
	ProductType     string        `protobuf:"bytes,10,opt,name=productType,proto3" json:"productType,omitempty"`
	CreateTime      string        `protobuf:"bytes,28,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Gateway         string        `protobuf:"bytes,20,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Manufacturer    string        `protobuf:"bytes,24,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	IotExtInfo      string        `protobuf:"bytes,27,opt,name=iotExtInfo,proto3" json:"iotExtInfo,omitempty"`
	Deleted         int32         `protobuf:"varint,6,opt,name=deleted,proto3" json:"deleted,omitempty"`
	DeviceType      string        `protobuf:"bytes,7,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	Source          int64         `protobuf:"varint,17,opt,name=source,proto3" json:"source,omitempty"`
	Password        string        `protobuf:"bytes,23,opt,name=password,proto3" json:"password,omitempty"`
	DeviceSn        string        `protobuf:"bytes,9,opt,name=deviceSn,proto3" json:"deviceSn,omitempty"`
	Port            int64         `protobuf:"varint,12,opt,name=port,proto3" json:"port,omitempty"`
	Imei            string        `protobuf:"bytes,14,opt,name=imei,proto3" json:"imei,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{58}
}

func (x *DeviceInfo) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *DeviceInfo) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

func (x *DeviceInfo) GetEnabled() int32 {
	if x != nil {
		return x.Enabled
	}
	return 0
}

func (x *DeviceInfo) GetServiceUuid() string {
	if x != nil {
		return x.ServiceUuid
	}
	return ""
}

func (x *DeviceInfo) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *DeviceInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DeviceInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *DeviceInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceInfo) GetGbCode() string {
	if x != nil {
		return x.GbCode
	}
	return ""
}

func (x *DeviceInfo) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *DeviceInfo) GetUserPermission() *PermissionVO {
	if x != nil {
		return x.UserPermission
	}
	return nil
}

func (x *DeviceInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DeviceInfo) GetSubnetMask() string {
	if x != nil {
		return x.SubnetMask
	}
	return ""
}

func (x *DeviceInfo) GetDns() string {
	if x != nil {
		return x.Dns
	}
	return ""
}

func (x *DeviceInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DeviceInfo) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *DeviceInfo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceInfo) GetDeviceUuid() string {
	if x != nil {
		return x.DeviceUuid
	}
	return ""
}

func (x *DeviceInfo) GetProductType() string {
	if x != nil {
		return x.ProductType
	}
	return ""
}

func (x *DeviceInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *DeviceInfo) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *DeviceInfo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *DeviceInfo) GetIotExtInfo() string {
	if x != nil {
		return x.IotExtInfo
	}
	return ""
}

func (x *DeviceInfo) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *DeviceInfo) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *DeviceInfo) GetSource() int64 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *DeviceInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DeviceInfo) GetDeviceSn() string {
	if x != nil {
		return x.DeviceSn
	}
	return ""
}

func (x *DeviceInfo) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DeviceInfo) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

type DeviceTreeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            string        `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	TreeId          string        `protobuf:"bytes,2,opt,name=treeId,proto3" json:"treeId,omitempty"`
	TreePid         string        `protobuf:"bytes,3,opt,name=treePid,proto3" json:"treePid,omitempty"`
	Gateway         string        `protobuf:"bytes,40020,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Manufacturer    string        `protobuf:"bytes,40024,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	IotExtInfo      string        `protobuf:"bytes,40027,opt,name=iotExtInfo,proto3" json:"iotExtInfo,omitempty"`
	Deleted         int32         `protobuf:"varint,40006,opt,name=deleted,proto3" json:"deleted,omitempty"`
	DeviceType      string        `protobuf:"bytes,40007,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	Source          int64         `protobuf:"varint,40017,opt,name=source,proto3" json:"source,omitempty"`
	Password        string        `protobuf:"bytes,40023,opt,name=password,proto3" json:"password,omitempty"`
	DeviceSn        string        `protobuf:"bytes,40009,opt,name=deviceSn,proto3" json:"deviceSn,omitempty"`
	Port            int64         `protobuf:"varint,40012,opt,name=port,proto3" json:"port,omitempty"`
	Imei            string        `protobuf:"bytes,40014,opt,name=imei,proto3" json:"imei,omitempty"`
	ExtInfo         string        `protobuf:"bytes,40015,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	HardwareVersion string        `protobuf:"bytes,40026,opt,name=hardwareVersion,proto3" json:"hardwareVersion,omitempty"`
	Enabled         int32         `protobuf:"varint,40005,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ServiceUuid     string        `protobuf:"bytes,40008,opt,name=serviceUuid,proto3" json:"serviceUuid,omitempty"`
	Mac             string        `protobuf:"bytes,40013,opt,name=mac,proto3" json:"mac,omitempty"`
	Version         int64         `protobuf:"varint,40016,opt,name=version,proto3" json:"version,omitempty"`
	UpdateTime      string        `protobuf:"bytes,40029,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	DeviceName      string        `protobuf:"bytes,40004,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	GbCode          string        `protobuf:"bytes,40018,opt,name=gbCode,proto3" json:"gbCode,omitempty"`
	SoftwareVersion string        `protobuf:"bytes,40025,opt,name=softwareVersion,proto3" json:"softwareVersion,omitempty"`
	UserPermission  *PermissionVO `protobuf:"bytes,40031,opt,name=userPermission,proto3" json:"userPermission,omitempty"`
	Id              int64         `protobuf:"varint,40001,opt,name=id,proto3" json:"id,omitempty"`
	Ip              string        `protobuf:"bytes,40011,opt,name=ip,proto3" json:"ip,omitempty"`
	SubnetMask      string        `protobuf:"bytes,40019,opt,name=subnetMask,proto3" json:"subnetMask,omitempty"`
	Dns             string        `protobuf:"bytes,40021,opt,name=dns,proto3" json:"dns,omitempty"`
	Username        string        `protobuf:"bytes,40022,opt,name=username,proto3" json:"username,omitempty"`
	Remarks         string        `protobuf:"bytes,40030,opt,name=remarks,proto3" json:"remarks,omitempty"`
	DeviceId        string        `protobuf:"bytes,40002,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	DeviceUuid      string        `protobuf:"bytes,40003,opt,name=deviceUuid,proto3" json:"deviceUuid,omitempty"`
	ProductType     string        `protobuf:"bytes,40010,opt,name=productType,proto3" json:"productType,omitempty"`
	CreateTime      string        `protobuf:"bytes,40028,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *DeviceTreeInfo) Reset() {
	*x = DeviceTreeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTreeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTreeInfo) ProtoMessage() {}

func (x *DeviceTreeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTreeInfo.ProtoReflect.Descriptor instead.
func (*DeviceTreeInfo) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{59}
}

func (x *DeviceTreeInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DeviceTreeInfo) GetTreeId() string {
	if x != nil {
		return x.TreeId
	}
	return ""
}

func (x *DeviceTreeInfo) GetTreePid() string {
	if x != nil {
		return x.TreePid
	}
	return ""
}

func (x *DeviceTreeInfo) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *DeviceTreeInfo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *DeviceTreeInfo) GetIotExtInfo() string {
	if x != nil {
		return x.IotExtInfo
	}
	return ""
}

func (x *DeviceTreeInfo) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *DeviceTreeInfo) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *DeviceTreeInfo) GetSource() int64 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *DeviceTreeInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DeviceTreeInfo) GetDeviceSn() string {
	if x != nil {
		return x.DeviceSn
	}
	return ""
}

func (x *DeviceTreeInfo) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DeviceTreeInfo) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *DeviceTreeInfo) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *DeviceTreeInfo) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

func (x *DeviceTreeInfo) GetEnabled() int32 {
	if x != nil {
		return x.Enabled
	}
	return 0
}

func (x *DeviceTreeInfo) GetServiceUuid() string {
	if x != nil {
		return x.ServiceUuid
	}
	return ""
}

func (x *DeviceTreeInfo) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *DeviceTreeInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DeviceTreeInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *DeviceTreeInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceTreeInfo) GetGbCode() string {
	if x != nil {
		return x.GbCode
	}
	return ""
}

func (x *DeviceTreeInfo) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *DeviceTreeInfo) GetUserPermission() *PermissionVO {
	if x != nil {
		return x.UserPermission
	}
	return nil
}

func (x *DeviceTreeInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceTreeInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DeviceTreeInfo) GetSubnetMask() string {
	if x != nil {
		return x.SubnetMask
	}
	return ""
}

func (x *DeviceTreeInfo) GetDns() string {
	if x != nil {
		return x.Dns
	}
	return ""
}

func (x *DeviceTreeInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DeviceTreeInfo) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *DeviceTreeInfo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceTreeInfo) GetDeviceUuid() string {
	if x != nil {
		return x.DeviceUuid
	}
	return ""
}

func (x *DeviceTreeInfo) GetProductType() string {
	if x != nil {
		return x.ProductType
	}
	return ""
}

func (x *DeviceTreeInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type DeviceStatusUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remarks    string `protobuf:"bytes,8,opt,name=remarks,proto3" json:"remarks,omitempty"`
	ProjectId  string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	DeviceId   string `protobuf:"bytes,2,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	StateType  string `protobuf:"bytes,3,opt,name=stateType,proto3" json:"stateType,omitempty"`
	StateValue string `protobuf:"bytes,4,opt,name=stateValue,proto3" json:"stateValue,omitempty"`
	Time       string `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	Version    int64  `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	ExtInfo    string `protobuf:"bytes,7,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
}

func (x *DeviceStatusUpdateReq) Reset() {
	*x = DeviceStatusUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStatusUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStatusUpdateReq) ProtoMessage() {}

func (x *DeviceStatusUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStatusUpdateReq.ProtoReflect.Descriptor instead.
func (*DeviceStatusUpdateReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{60}
}

func (x *DeviceStatusUpdateReq) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *DeviceStatusUpdateReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeviceStatusUpdateReq) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceStatusUpdateReq) GetStateType() string {
	if x != nil {
		return x.StateType
	}
	return ""
}

func (x *DeviceStatusUpdateReq) GetStateValue() string {
	if x != nil {
		return x.StateValue
	}
	return ""
}

func (x *DeviceStatusUpdateReq) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *DeviceStatusUpdateReq) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DeviceStatusUpdateReq) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

type DeviceStatusDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string                `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	DevIdList []*DeviceStatusDelete `protobuf:"bytes,2,rep,name=devIdList,proto3" json:"devIdList,omitempty"`
}

func (x *DeviceStatusDeleteReq) Reset() {
	*x = DeviceStatusDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStatusDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStatusDeleteReq) ProtoMessage() {}

func (x *DeviceStatusDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStatusDeleteReq.ProtoReflect.Descriptor instead.
func (*DeviceStatusDeleteReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{61}
}

func (x *DeviceStatusDeleteReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeviceStatusDeleteReq) GetDevIdList() []*DeviceStatusDelete {
	if x != nil {
		return x.DevIdList
	}
	return nil
}

type ChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IotExtInfo     string        `protobuf:"bytes,13,opt,name=iotExtInfo,proto3" json:"iotExtInfo,omitempty"`
	GbCode         string        `protobuf:"bytes,15,opt,name=gbCode,proto3" json:"gbCode,omitempty"`
	Longitude      string        `protobuf:"bytes,18,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Id             int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChannelName    string        `protobuf:"bytes,4,opt,name=channelName,proto3" json:"channelName,omitempty"`
	Enabled        int32         `protobuf:"varint,9,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Direction      string        `protobuf:"bytes,11,opt,name=direction,proto3" json:"direction,omitempty"`
	ChannelType    string        `protobuf:"bytes,5,opt,name=channelType,proto3" json:"channelType,omitempty"`
	DeviceId       string        `protobuf:"bytes,7,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	ExtInfo        string        `protobuf:"bytes,12,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	UserPermission *PermissionVO `protobuf:"bytes,22,opt,name=userPermission,proto3" json:"userPermission,omitempty"`
	ParentId       string        `protobuf:"bytes,8,opt,name=parentId,proto3" json:"parentId,omitempty"`
	Version        int64         `protobuf:"varint,14,opt,name=version,proto3" json:"version,omitempty"`
	CaptureAbility string        `protobuf:"bytes,16,opt,name=captureAbility,proto3" json:"captureAbility,omitempty"`
	Latitude       string        `protobuf:"bytes,17,opt,name=latitude,proto3" json:"latitude,omitempty"`
	CreateTime     string        `protobuf:"bytes,19,opt,name=createTime,proto3" json:"createTime,omitempty"`
	ChannelId      string        `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	ChannelUuid    string        `protobuf:"bytes,3,opt,name=channelUuid,proto3" json:"channelUuid,omitempty"`
	ChannelNo      string        `protobuf:"bytes,6,opt,name=channelNo,proto3" json:"channelNo,omitempty"`
	Deleted        int32         `protobuf:"varint,10,opt,name=deleted,proto3" json:"deleted,omitempty"`
	UpdateTime     string        `protobuf:"bytes,20,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Remarks        string        `protobuf:"bytes,21,opt,name=remarks,proto3" json:"remarks,omitempty"`
}

func (x *ChannelInfo) Reset() {
	*x = ChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInfo) ProtoMessage() {}

func (x *ChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInfo.ProtoReflect.Descriptor instead.
func (*ChannelInfo) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{62}
}

func (x *ChannelInfo) GetIotExtInfo() string {
	if x != nil {
		return x.IotExtInfo
	}
	return ""
}

func (x *ChannelInfo) GetGbCode() string {
	if x != nil {
		return x.GbCode
	}
	return ""
}

func (x *ChannelInfo) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *ChannelInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelInfo) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *ChannelInfo) GetEnabled() int32 {
	if x != nil {
		return x.Enabled
	}
	return 0
}

func (x *ChannelInfo) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *ChannelInfo) GetChannelType() string {
	if x != nil {
		return x.ChannelType
	}
	return ""
}

func (x *ChannelInfo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *ChannelInfo) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *ChannelInfo) GetUserPermission() *PermissionVO {
	if x != nil {
		return x.UserPermission
	}
	return nil
}

func (x *ChannelInfo) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *ChannelInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ChannelInfo) GetCaptureAbility() string {
	if x != nil {
		return x.CaptureAbility
	}
	return ""
}

func (x *ChannelInfo) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *ChannelInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ChannelInfo) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelInfo) GetChannelUuid() string {
	if x != nil {
		return x.ChannelUuid
	}
	return ""
}

func (x *ChannelInfo) GetChannelNo() string {
	if x != nil {
		return x.ChannelNo
	}
	return ""
}

func (x *ChannelInfo) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *ChannelInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ChannelInfo) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

type DeviceDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceIdList []string `protobuf:"bytes,2,rep,name=deviceIdList,proto3" json:"deviceIdList,omitempty"`
	ProjectId    string   `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
}

func (x *DeviceDeleteReq) Reset() {
	*x = DeviceDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDeleteReq) ProtoMessage() {}

func (x *DeviceDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDeleteReq.ProtoReflect.Descriptor instead.
func (*DeviceDeleteReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{63}
}

func (x *DeviceDeleteReq) GetDeviceIdList() []string {
	if x != nil {
		return x.DeviceIdList
	}
	return nil
}

func (x *DeviceDeleteReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type DeviceStatusQueryByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateType string `protobuf:"bytes,3,opt,name=stateType,proto3" json:"stateType,omitempty"`
	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	DeviceId  string `protobuf:"bytes,2,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
}

func (x *DeviceStatusQueryByIdReq) Reset() {
	*x = DeviceStatusQueryByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStatusQueryByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStatusQueryByIdReq) ProtoMessage() {}

func (x *DeviceStatusQueryByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStatusQueryByIdReq.ProtoReflect.Descriptor instead.
func (*DeviceStatusQueryByIdReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{64}
}

func (x *DeviceStatusQueryByIdReq) GetStateType() string {
	if x != nil {
		return x.StateType
	}
	return ""
}

func (x *DeviceStatusQueryByIdReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeviceStatusQueryByIdReq) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type DeviceStatusDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateType []string `protobuf:"bytes,2,rep,name=stateType,proto3" json:"stateType,omitempty"`
	DeviceId  string   `protobuf:"bytes,1,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
}

func (x *DeviceStatusDelete) Reset() {
	*x = DeviceStatusDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStatusDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStatusDelete) ProtoMessage() {}

func (x *DeviceStatusDelete) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStatusDelete.ProtoReflect.Descriptor instead.
func (*DeviceStatusDelete) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{65}
}

func (x *DeviceStatusDelete) GetStateType() []string {
	if x != nil {
		return x.StateType
	}
	return nil
}

func (x *DeviceStatusDelete) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type LogoInfoUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image     string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Type      string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	LogoId    string `protobuf:"bytes,2,opt,name=logoId,proto3" json:"logoId,omitempty"`
}

func (x *LogoInfoUpdateReq) Reset() {
	*x = LogoInfoUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoInfoUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoInfoUpdateReq) ProtoMessage() {}

func (x *LogoInfoUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoInfoUpdateReq.ProtoReflect.Descriptor instead.
func (*LogoInfoUpdateReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{66}
}

func (x *LogoInfoUpdateReq) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *LogoInfoUpdateReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LogoInfoUpdateReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *LogoInfoUpdateReq) GetLogoId() string {
	if x != nil {
		return x.LogoId
	}
	return ""
}

type AreaRl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateTime string `protobuf:"bytes,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ancestor   int64  `protobuf:"varint,2,opt,name=ancestor,proto3" json:"ancestor,omitempty"`
	Descendant int64  `protobuf:"varint,3,opt,name=descendant,proto3" json:"descendant,omitempty"`
	Depth      int64  `protobuf:"varint,4,opt,name=depth,proto3" json:"depth,omitempty"`
	CreateTime string `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *AreaRl) Reset() {
	*x = AreaRl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaRl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaRl) ProtoMessage() {}

func (x *AreaRl) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaRl.ProtoReflect.Descriptor instead.
func (*AreaRl) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{67}
}

func (x *AreaRl) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *AreaRl) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AreaRl) GetAncestor() int64 {
	if x != nil {
		return x.Ancestor
	}
	return 0
}

func (x *AreaRl) GetDescendant() int64 {
	if x != nil {
		return x.Descendant
	}
	return 0
}

func (x *AreaRl) GetDepth() int64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *AreaRl) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type ChannelTreeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaFlag    bool   `protobuf:"varint,3,opt,name=areaFlag,proto3" json:"areaFlag,omitempty"`
	DevFlag     bool   `protobuf:"varint,4,opt,name=devFlag,proto3" json:"devFlag,omitempty"`
	InfFlag     bool   `protobuf:"varint,5,opt,name=infFlag,proto3" json:"infFlag,omitempty"`
	RoleId      string `protobuf:"bytes,6,opt,name=roleId,proto3" json:"roleId,omitempty"`
	ProjectId   string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ChannelType string `protobuf:"bytes,2,opt,name=channelType,proto3" json:"channelType,omitempty"`
}

func (x *ChannelTreeReq) Reset() {
	*x = ChannelTreeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelTreeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelTreeReq) ProtoMessage() {}

func (x *ChannelTreeReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelTreeReq.ProtoReflect.Descriptor instead.
func (*ChannelTreeReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{68}
}

func (x *ChannelTreeReq) GetAreaFlag() bool {
	if x != nil {
		return x.AreaFlag
	}
	return false
}

func (x *ChannelTreeReq) GetDevFlag() bool {
	if x != nil {
		return x.DevFlag
	}
	return false
}

func (x *ChannelTreeReq) GetInfFlag() bool {
	if x != nil {
		return x.InfFlag
	}
	return false
}

func (x *ChannelTreeReq) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *ChannelTreeReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ChannelTreeReq) GetChannelType() string {
	if x != nil {
		return x.ChannelType
	}
	return ""
}

type DeviceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
}

func (x *DeviceId) Reset() {
	*x = DeviceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceId) ProtoMessage() {}

func (x *DeviceId) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceId.ProtoReflect.Descriptor instead.
func (*DeviceId) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{69}
}

func (x *DeviceId) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type InfDeviceListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	InfId      string `protobuf:"bytes,2,opt,name=infId,proto3" json:"infId,omitempty"`
	DeviceType string `protobuf:"bytes,3,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	ChnType    string `protobuf:"bytes,4,opt,name=chnType,proto3" json:"chnType,omitempty"`
}

func (x *InfDeviceListReq) Reset() {
	*x = InfDeviceListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfDeviceListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfDeviceListReq) ProtoMessage() {}

func (x *InfDeviceListReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfDeviceListReq.ProtoReflect.Descriptor instead.
func (*InfDeviceListReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{70}
}

func (x *InfDeviceListReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *InfDeviceListReq) GetInfId() string {
	if x != nil {
		return x.InfId
	}
	return ""
}

func (x *InfDeviceListReq) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *InfDeviceListReq) GetChnType() string {
	if x != nil {
		return x.ChnType
	}
	return ""
}

type DeviceInfoEditReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceType  string                `protobuf:"bytes,10,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	Remarks     string                `protobuf:"bytes,15,opt,name=remarks,proto3" json:"remarks,omitempty"`
	ExtInfo     string                `protobuf:"bytes,16,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	Ip          string                `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Port        int64                 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	Password    string                `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	InfId       string                `protobuf:"bytes,12,opt,name=infId,proto3" json:"infId,omitempty"`
	Username    string                `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	AreaId      string                `protobuf:"bytes,11,opt,name=areaId,proto3" json:"areaId,omitempty"`
	Version     int64                 `protobuf:"varint,14,opt,name=version,proto3" json:"version,omitempty"`
	ChnList     []*ChannelInfoEditReq `protobuf:"bytes,17,rep,name=chnList,proto3" json:"chnList,omitempty"`
	ProjectId   string                `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	DeviceId    string                `protobuf:"bytes,2,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	DeviceName  string                `protobuf:"bytes,3,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	Imei        string                `protobuf:"bytes,8,opt,name=imei,proto3" json:"imei,omitempty"`
	ServiceUuid string                `protobuf:"bytes,9,opt,name=serviceUuid,proto3" json:"serviceUuid,omitempty"`
	GbCode      string                `protobuf:"bytes,13,opt,name=gbCode,proto3" json:"gbCode,omitempty"`
}

func (x *DeviceInfoEditReq) Reset() {
	*x = DeviceInfoEditReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoEditReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoEditReq) ProtoMessage() {}

func (x *DeviceInfoEditReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoEditReq.ProtoReflect.Descriptor instead.
func (*DeviceInfoEditReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{71}
}

func (x *DeviceInfoEditReq) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *DeviceInfoEditReq) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *DeviceInfoEditReq) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *DeviceInfoEditReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DeviceInfoEditReq) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DeviceInfoEditReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DeviceInfoEditReq) GetInfId() string {
	if x != nil {
		return x.InfId
	}
	return ""
}

func (x *DeviceInfoEditReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DeviceInfoEditReq) GetAreaId() string {
	if x != nil {
		return x.AreaId
	}
	return ""
}

func (x *DeviceInfoEditReq) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DeviceInfoEditReq) GetChnList() []*ChannelInfoEditReq {
	if x != nil {
		return x.ChnList
	}
	return nil
}

func (x *DeviceInfoEditReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeviceInfoEditReq) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceInfoEditReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceInfoEditReq) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *DeviceInfoEditReq) GetServiceUuid() string {
	if x != nil {
		return x.ServiceUuid
	}
	return ""
}

func (x *DeviceInfoEditReq) GetGbCode() string {
	if x != nil {
		return x.GbCode
	}
	return ""
}

type DeviceTagUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtInfo   string `protobuf:"bytes,4,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	Remarks   string `protobuf:"bytes,5,opt,name=remarks,proto3" json:"remarks,omitempty"`
	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	TagId     string `protobuf:"bytes,2,opt,name=tagId,proto3" json:"tagId,omitempty"`
	TagName   string `protobuf:"bytes,3,opt,name=tagName,proto3" json:"tagName,omitempty"`
}

func (x *DeviceTagUpdateReq) Reset() {
	*x = DeviceTagUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagUpdateReq) ProtoMessage() {}

func (x *DeviceTagUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagUpdateReq.ProtoReflect.Descriptor instead.
func (*DeviceTagUpdateReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{72}
}

func (x *DeviceTagUpdateReq) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *DeviceTagUpdateReq) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *DeviceTagUpdateReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeviceTagUpdateReq) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *DeviceTagUpdateReq) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

type DeviceTagId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId string `protobuf:"bytes,1,opt,name=tagId,proto3" json:"tagId,omitempty"`
}

func (x *DeviceTagId) Reset() {
	*x = DeviceTagId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagId) ProtoMessage() {}

func (x *DeviceTagId) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagId.ProtoReflect.Descriptor instead.
func (*DeviceTagId) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{73}
}

func (x *DeviceTagId) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

type DeviceTagChnRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelationId  int64  `protobuf:"varint,2,opt,name=relationId,proto3" json:"relationId,omitempty"`
	TagId       string `protobuf:"bytes,3,opt,name=tagId,proto3" json:"tagId,omitempty"`
	ChannelType string `protobuf:"bytes,6,opt,name=channelType,proto3" json:"channelType,omitempty"`
	UpdateTime  string `protobuf:"bytes,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Remarks     string `protobuf:"bytes,10,opt,name=remarks,proto3" json:"remarks,omitempty"`
	DeviceId    string `protobuf:"bytes,11,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	DeviceName  string `protobuf:"bytes,12,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChannelId   string `protobuf:"bytes,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	ChannelName string `protobuf:"bytes,5,opt,name=channelName,proto3" json:"channelName,omitempty"`
	ExtInfo     string `protobuf:"bytes,7,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	CreateTime  string `protobuf:"bytes,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *DeviceTagChnRsp) Reset() {
	*x = DeviceTagChnRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagChnRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagChnRsp) ProtoMessage() {}

func (x *DeviceTagChnRsp) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagChnRsp.ProtoReflect.Descriptor instead.
func (*DeviceTagChnRsp) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{74}
}

func (x *DeviceTagChnRsp) GetRelationId() int64 {
	if x != nil {
		return x.RelationId
	}
	return 0
}

func (x *DeviceTagChnRsp) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *DeviceTagChnRsp) GetChannelType() string {
	if x != nil {
		return x.ChannelType
	}
	return ""
}

func (x *DeviceTagChnRsp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *DeviceTagChnRsp) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *DeviceTagChnRsp) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceTagChnRsp) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceTagChnRsp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceTagChnRsp) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *DeviceTagChnRsp) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *DeviceTagChnRsp) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *DeviceTagChnRsp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type ChannelStatusUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ChannelId  string `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	StateType  string `protobuf:"bytes,3,opt,name=stateType,proto3" json:"stateType,omitempty"`
	StateValue string `protobuf:"bytes,4,opt,name=stateValue,proto3" json:"stateValue,omitempty"`
	Time       string `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	Version    int64  `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	ExtInfo    string `protobuf:"bytes,7,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	Remarks    string `protobuf:"bytes,8,opt,name=remarks,proto3" json:"remarks,omitempty"`
}

func (x *ChannelStatusUpdateReq) Reset() {
	*x = ChannelStatusUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStatusUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStatusUpdateReq) ProtoMessage() {}

func (x *ChannelStatusUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStatusUpdateReq.ProtoReflect.Descriptor instead.
func (*ChannelStatusUpdateReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{75}
}

func (x *ChannelStatusUpdateReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ChannelStatusUpdateReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelStatusUpdateReq) GetStateType() string {
	if x != nil {
		return x.StateType
	}
	return ""
}

func (x *ChannelStatusUpdateReq) GetStateValue() string {
	if x != nil {
		return x.StateValue
	}
	return ""
}

func (x *ChannelStatusUpdateReq) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *ChannelStatusUpdateReq) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ChannelStatusUpdateReq) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *ChannelStatusUpdateReq) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

type DeviceManagedInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateTime      string        `protobuf:"bytes,10029,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	DeviceName      string        `protobuf:"bytes,10004,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	GbCode          string        `protobuf:"bytes,10018,opt,name=gbCode,proto3" json:"gbCode,omitempty"`
	SoftwareVersion string        `protobuf:"bytes,10025,opt,name=softwareVersion,proto3" json:"softwareVersion,omitempty"`
	UserPermission  *PermissionVO `protobuf:"bytes,10031,opt,name=userPermission,proto3" json:"userPermission,omitempty"`
	Id              int64         `protobuf:"varint,10001,opt,name=id,proto3" json:"id,omitempty"`
	Ip              string        `protobuf:"bytes,10011,opt,name=ip,proto3" json:"ip,omitempty"`
	SubnetMask      string        `protobuf:"bytes,10019,opt,name=subnetMask,proto3" json:"subnetMask,omitempty"`
	Dns             string        `protobuf:"bytes,10021,opt,name=dns,proto3" json:"dns,omitempty"`
	Username        string        `protobuf:"bytes,10022,opt,name=username,proto3" json:"username,omitempty"`
	Remarks         string        `protobuf:"bytes,10030,opt,name=remarks,proto3" json:"remarks,omitempty"`
	DeviceId        string        `protobuf:"bytes,10002,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	DeviceUuid      string        `protobuf:"bytes,10003,opt,name=deviceUuid,proto3" json:"deviceUuid,omitempty"`
	ProductType     string        `protobuf:"bytes,10010,opt,name=productType,proto3" json:"productType,omitempty"`
	CreateTime      string        `protobuf:"bytes,10028,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Gateway         string        `protobuf:"bytes,10020,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Manufacturer    string        `protobuf:"bytes,10024,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	IotExtInfo      string        `protobuf:"bytes,10027,opt,name=iotExtInfo,proto3" json:"iotExtInfo,omitempty"`
	Deleted         int32         `protobuf:"varint,10006,opt,name=deleted,proto3" json:"deleted,omitempty"`
	DeviceType      string        `protobuf:"bytes,10007,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	Source          int64         `protobuf:"varint,10017,opt,name=source,proto3" json:"source,omitempty"`
	Password        string        `protobuf:"bytes,10023,opt,name=password,proto3" json:"password,omitempty"`
	DeviceSn        string        `protobuf:"bytes,10009,opt,name=deviceSn,proto3" json:"deviceSn,omitempty"`
	Port            int64         `protobuf:"varint,10012,opt,name=port,proto3" json:"port,omitempty"`
	Imei            string        `protobuf:"bytes,10014,opt,name=imei,proto3" json:"imei,omitempty"`
	ExtInfo         string        `protobuf:"bytes,10015,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	HardwareVersion string        `protobuf:"bytes,10026,opt,name=hardwareVersion,proto3" json:"hardwareVersion,omitempty"`
	Enabled         int32         `protobuf:"varint,10005,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ServiceUuid     string        `protobuf:"bytes,10008,opt,name=serviceUuid,proto3" json:"serviceUuid,omitempty"`
	Mac             string        `protobuf:"bytes,10013,opt,name=mac,proto3" json:"mac,omitempty"`
	Version         int64         `protobuf:"varint,10016,opt,name=version,proto3" json:"version,omitempty"`
	OnOffline       string        `protobuf:"bytes,2,opt,name=onOffline,proto3" json:"onOffline,omitempty"`
	ChnCount        int64         `protobuf:"varint,3,opt,name=chnCount,proto3" json:"chnCount,omitempty"`
}

func (x *DeviceManagedInfoRsp) Reset() {
	*x = DeviceManagedInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceManagedInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceManagedInfoRsp) ProtoMessage() {}

func (x *DeviceManagedInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceManagedInfoRsp.ProtoReflect.Descriptor instead.
func (*DeviceManagedInfoRsp) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{76}
}

func (x *DeviceManagedInfoRsp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetGbCode() string {
	if x != nil {
		return x.GbCode
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetUserPermission() *PermissionVO {
	if x != nil {
		return x.UserPermission
	}
	return nil
}

func (x *DeviceManagedInfoRsp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceManagedInfoRsp) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetSubnetMask() string {
	if x != nil {
		return x.SubnetMask
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetDns() string {
	if x != nil {
		return x.Dns
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetDeviceUuid() string {
	if x != nil {
		return x.DeviceUuid
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetProductType() string {
	if x != nil {
		return x.ProductType
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetIotExtInfo() string {
	if x != nil {
		return x.IotExtInfo
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *DeviceManagedInfoRsp) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetSource() int64 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *DeviceManagedInfoRsp) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetDeviceSn() string {
	if x != nil {
		return x.DeviceSn
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DeviceManagedInfoRsp) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetEnabled() int32 {
	if x != nil {
		return x.Enabled
	}
	return 0
}

func (x *DeviceManagedInfoRsp) GetServiceUuid() string {
	if x != nil {
		return x.ServiceUuid
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DeviceManagedInfoRsp) GetOnOffline() string {
	if x != nil {
		return x.OnOffline
	}
	return ""
}

func (x *DeviceManagedInfoRsp) GetChnCount() int64 {
	if x != nil {
		return x.ChnCount
	}
	return 0
}

type AreaDeviceListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	AreaId     string `protobuf:"bytes,2,opt,name=areaId,proto3" json:"areaId,omitempty"`
	Recursion  bool   `protobuf:"varint,3,opt,name=recursion,proto3" json:"recursion,omitempty"`
	DeviceType string `protobuf:"bytes,4,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	ChnType    string `protobuf:"bytes,5,opt,name=chnType,proto3" json:"chnType,omitempty"`
}

func (x *AreaDeviceListReq) Reset() {
	*x = AreaDeviceListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaDeviceListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaDeviceListReq) ProtoMessage() {}

func (x *AreaDeviceListReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaDeviceListReq.ProtoReflect.Descriptor instead.
func (*AreaDeviceListReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{77}
}

func (x *AreaDeviceListReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AreaDeviceListReq) GetAreaId() string {
	if x != nil {
		return x.AreaId
	}
	return ""
}

func (x *AreaDeviceListReq) GetRecursion() bool {
	if x != nil {
		return x.Recursion
	}
	return false
}

func (x *AreaDeviceListReq) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *AreaDeviceListReq) GetChnType() string {
	if x != nil {
		return x.ChnType
	}
	return ""
}

type ImportDeviceTagChnRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ImportDeviceTagChnRsp) Reset() {
	*x = ImportDeviceTagChnRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportDeviceTagChnRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDeviceTagChnRsp) ProtoMessage() {}

func (x *ImportDeviceTagChnRsp) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDeviceTagChnRsp.ProtoReflect.Descriptor instead.
func (*ImportDeviceTagChnRsp) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{78}
}

func (x *ImportDeviceTagChnRsp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ChannelInfoUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelType    string `protobuf:"bytes,5,opt,name=channelType,proto3" json:"channelType,omitempty"`
	DeviceId       string `protobuf:"bytes,7,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	ExtInfo        string `protobuf:"bytes,10,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	Version        int64  `protobuf:"varint,12,opt,name=version,proto3" json:"version,omitempty"`
	ProjectId      string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ChannelUuid    string `protobuf:"bytes,3,opt,name=channelUuid,proto3" json:"channelUuid,omitempty"`
	Remarks        string `protobuf:"bytes,17,opt,name=remarks,proto3" json:"remarks,omitempty"`
	GbCode         string `protobuf:"bytes,13,opt,name=gbCode,proto3" json:"gbCode,omitempty"`
	Latitude       string `protobuf:"bytes,15,opt,name=latitude,proto3" json:"latitude,omitempty"`
	ChannelNo      string `protobuf:"bytes,6,opt,name=channelNo,proto3" json:"channelNo,omitempty"`
	Direction      string `protobuf:"bytes,9,opt,name=direction,proto3" json:"direction,omitempty"`
	ChannelId      string `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	ChannelName    string `protobuf:"bytes,4,opt,name=channelName,proto3" json:"channelName,omitempty"`
	CaptureAbility string `protobuf:"bytes,14,opt,name=captureAbility,proto3" json:"captureAbility,omitempty"`
	Longitude      string `protobuf:"bytes,16,opt,name=longitude,proto3" json:"longitude,omitempty"`
	ParentId       string `protobuf:"bytes,8,opt,name=parentId,proto3" json:"parentId,omitempty"`
	IotExtInfo     string `protobuf:"bytes,11,opt,name=iotExtInfo,proto3" json:"iotExtInfo,omitempty"`
}

func (x *ChannelInfoUpdateReq) Reset() {
	*x = ChannelInfoUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInfoUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInfoUpdateReq) ProtoMessage() {}

func (x *ChannelInfoUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInfoUpdateReq.ProtoReflect.Descriptor instead.
func (*ChannelInfoUpdateReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{79}
}

func (x *ChannelInfoUpdateReq) GetChannelType() string {
	if x != nil {
		return x.ChannelType
	}
	return ""
}

func (x *ChannelInfoUpdateReq) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *ChannelInfoUpdateReq) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *ChannelInfoUpdateReq) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ChannelInfoUpdateReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ChannelInfoUpdateReq) GetChannelUuid() string {
	if x != nil {
		return x.ChannelUuid
	}
	return ""
}

func (x *ChannelInfoUpdateReq) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *ChannelInfoUpdateReq) GetGbCode() string {
	if x != nil {
		return x.GbCode
	}
	return ""
}

func (x *ChannelInfoUpdateReq) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *ChannelInfoUpdateReq) GetChannelNo() string {
	if x != nil {
		return x.ChannelNo
	}
	return ""
}

func (x *ChannelInfoUpdateReq) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *ChannelInfoUpdateReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelInfoUpdateReq) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *ChannelInfoUpdateReq) GetCaptureAbility() string {
	if x != nil {
		return x.CaptureAbility
	}
	return ""
}

func (x *ChannelInfoUpdateReq) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *ChannelInfoUpdateReq) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *ChannelInfoUpdateReq) GetIotExtInfo() string {
	if x != nil {
		return x.IotExtInfo
	}
	return ""
}

type ChannelStatusDeleteRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Success   bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Msg       string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ChannelStatusDeleteRsp) Reset() {
	*x = ChannelStatusDeleteRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStatusDeleteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStatusDeleteRsp) ProtoMessage() {}

func (x *ChannelStatusDeleteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStatusDeleteRsp.ProtoReflect.Descriptor instead.
func (*ChannelStatusDeleteRsp) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{80}
}

func (x *ChannelStatusDeleteRsp) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelStatusDeleteRsp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ChannelStatusDeleteRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type DoorChnStatRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Close   int64 `protobuf:"varint,3,opt,name=close,proto3" json:"close,omitempty"`
	Alarm   int64 `protobuf:"varint,4,opt,name=alarm,proto3" json:"alarm,omitempty"`
	Online  int64 `protobuf:"varint,5,opt,name=online,proto3" json:"online,omitempty"`
	Offline int64 `protobuf:"varint,6,opt,name=offline,proto3" json:"offline,omitempty"`
	All     int64 `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
	Open    int64 `protobuf:"varint,2,opt,name=open,proto3" json:"open,omitempty"`
}

func (x *DoorChnStatRsp) Reset() {
	*x = DoorChnStatRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoorChnStatRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoorChnStatRsp) ProtoMessage() {}

func (x *DoorChnStatRsp) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoorChnStatRsp.ProtoReflect.Descriptor instead.
func (*DoorChnStatRsp) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{81}
}

func (x *DoorChnStatRsp) GetClose() int64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *DoorChnStatRsp) GetAlarm() int64 {
	if x != nil {
		return x.Alarm
	}
	return 0
}

func (x *DoorChnStatRsp) GetOnline() int64 {
	if x != nil {
		return x.Online
	}
	return 0
}

func (x *DoorChnStatRsp) GetOffline() int64 {
	if x != nil {
		return x.Offline
	}
	return 0
}

func (x *DoorChnStatRsp) GetAll() int64 {
	if x != nil {
		return x.All
	}
	return 0
}

func (x *DoorChnStatRsp) GetOpen() int64 {
	if x != nil {
		return x.Open
	}
	return 0
}

type DeviceTagAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	TagName   string `protobuf:"bytes,2,opt,name=tagName,proto3" json:"tagName,omitempty"`
	ExtInfo   string `protobuf:"bytes,3,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	Remarks   string `protobuf:"bytes,4,opt,name=remarks,proto3" json:"remarks,omitempty"`
}

func (x *DeviceTagAddReq) Reset() {
	*x = DeviceTagAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagAddReq) ProtoMessage() {}

func (x *DeviceTagAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagAddReq.ProtoReflect.Descriptor instead.
func (*DeviceTagAddReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{82}
}

func (x *DeviceTagAddReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeviceTagAddReq) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *DeviceTagAddReq) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *DeviceTagAddReq) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

type InfIdName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Floor                 string `protobuf:"bytes,3,opt,name=floor,proto3" json:"floor,omitempty"`
	Building              string `protobuf:"bytes,4,opt,name=building,proto3" json:"building,omitempty"`
	CompanyUuid           string `protobuf:"bytes,16,opt,name=companyUuid,proto3" json:"companyUuid,omitempty"`
	UpdateTime            string `protobuf:"bytes,26,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Remarks               string `protobuf:"bytes,27,opt,name=remarks,proto3" json:"remarks,omitempty"`
	ExtInfo               string `protobuf:"bytes,17,opt,name=extInfo,proto3" json:"extInfo,omitempty"`
	InfrastructureId      string `protobuf:"bytes,6,opt,name=infrastructureId,proto3" json:"infrastructureId,omitempty"`
	Address               string `protobuf:"bytes,12,opt,name=address,proto3" json:"address,omitempty"`
	CompanyCode           string `protobuf:"bytes,15,opt,name=companyCode,proto3" json:"companyCode,omitempty"`
	PersonCount           int64  `protobuf:"varint,5,opt,name=personCount,proto3" json:"personCount,omitempty"`
	InfrastructureName    string `protobuf:"bytes,7,opt,name=infrastructureName,proto3" json:"infrastructureName,omitempty"`
	ParentId              string `protobuf:"bytes,8,opt,name=parentId,proto3" json:"parentId,omitempty"`
	Picture               string `protobuf:"bytes,18,opt,name=picture,proto3" json:"picture,omitempty"`
	Deleted               int32  `protobuf:"varint,9,opt,name=deleted,proto3" json:"deleted,omitempty"`
	InfrastructureUri     string `protobuf:"bytes,10,opt,name=infrastructureUri,proto3" json:"infrastructureUri,omitempty"`
	Version               int64  `protobuf:"varint,24,opt,name=version,proto3" json:"version,omitempty"`
	ProjectId             string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	InfrastructureSn      int64  `protobuf:"varint,19,opt,name=infrastructureSn,proto3" json:"infrastructureSn,omitempty"`
	HouseAcreage          string `protobuf:"bytes,22,opt,name=houseAcreage,proto3" json:"houseAcreage,omitempty"`
	CreateTime            string `protobuf:"bytes,25,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Summary               string `protobuf:"bytes,13,opt,name=summary,proto3" json:"summary,omitempty"`
	InfrastructurePurpose string `protobuf:"bytes,20,opt,name=infrastructurePurpose,proto3" json:"infrastructurePurpose,omitempty"`
	InfrastructureType    string `protobuf:"bytes,11,opt,name=infrastructureType,proto3" json:"infrastructureType,omitempty"`
	NextCount             int64  `protobuf:"varint,14,opt,name=nextCount,proto3" json:"nextCount,omitempty"`
	HouseType             string `protobuf:"bytes,21,opt,name=houseType,proto3" json:"houseType,omitempty"`
	EnablePhone           int32  `protobuf:"varint,23,opt,name=enablePhone,proto3" json:"enablePhone,omitempty"`
}

func (x *InfIdName) Reset() {
	*x = InfIdName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfIdName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfIdName) ProtoMessage() {}

func (x *InfIdName) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfIdName.ProtoReflect.Descriptor instead.
func (*InfIdName) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{83}
}

func (x *InfIdName) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InfIdName) GetFloor() string {
	if x != nil {
		return x.Floor
	}
	return ""
}

func (x *InfIdName) GetBuilding() string {
	if x != nil {
		return x.Building
	}
	return ""
}

func (x *InfIdName) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

func (x *InfIdName) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *InfIdName) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *InfIdName) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *InfIdName) GetInfrastructureId() string {
	if x != nil {
		return x.InfrastructureId
	}
	return ""
}

func (x *InfIdName) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *InfIdName) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *InfIdName) GetPersonCount() int64 {
	if x != nil {
		return x.PersonCount
	}
	return 0
}

func (x *InfIdName) GetInfrastructureName() string {
	if x != nil {
		return x.InfrastructureName
	}
	return ""
}

func (x *InfIdName) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *InfIdName) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

func (x *InfIdName) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *InfIdName) GetInfrastructureUri() string {
	if x != nil {
		return x.InfrastructureUri
	}
	return ""
}

func (x *InfIdName) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *InfIdName) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *InfIdName) GetInfrastructureSn() int64 {
	if x != nil {
		return x.InfrastructureSn
	}
	return 0
}

func (x *InfIdName) GetHouseAcreage() string {
	if x != nil {
		return x.HouseAcreage
	}
	return ""
}

func (x *InfIdName) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *InfIdName) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *InfIdName) GetInfrastructurePurpose() string {
	if x != nil {
		return x.InfrastructurePurpose
	}
	return ""
}

func (x *InfIdName) GetInfrastructureType() string {
	if x != nil {
		return x.InfrastructureType
	}
	return ""
}

func (x *InfIdName) GetNextCount() int64 {
	if x != nil {
		return x.NextCount
	}
	return 0
}

func (x *InfIdName) GetHouseType() string {
	if x != nil {
		return x.HouseType
	}
	return ""
}

func (x *InfIdName) GetEnablePhone() int32 {
	if x != nil {
		return x.EnablePhone
	}
	return 0
}

type LogoInfoGetListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Type      string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *LogoInfoGetListReq) Reset() {
	*x = LogoInfoGetListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoInfoGetListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoInfoGetListReq) ProtoMessage() {}

func (x *LogoInfoGetListReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoInfoGetListReq.ProtoReflect.Descriptor instead.
func (*LogoInfoGetListReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{84}
}

func (x *LogoInfoGetListReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *LogoInfoGetListReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type AreaRlQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,10001,opt,name=id,proto3" json:"id,omitempty"`
	Ancestor   int64  `protobuf:"varint,10002,opt,name=ancestor,proto3" json:"ancestor,omitempty"`
	Descendant int64  `protobuf:"varint,10003,opt,name=descendant,proto3" json:"descendant,omitempty"`
	Depth      int64  `protobuf:"varint,10004,opt,name=depth,proto3" json:"depth,omitempty"`
	CreateTime string `protobuf:"bytes,10005,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime string `protobuf:"bytes,10006,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Page       int64  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit      int64  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *AreaRlQueryReq) Reset() {
	*x = AreaRlQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaRlQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaRlQueryReq) ProtoMessage() {}

func (x *AreaRlQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaRlQueryReq.ProtoReflect.Descriptor instead.
func (*AreaRlQueryReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{85}
}

func (x *AreaRlQueryReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AreaRlQueryReq) GetAncestor() int64 {
	if x != nil {
		return x.Ancestor
	}
	return 0
}

func (x *AreaRlQueryReq) GetDescendant() int64 {
	if x != nil {
		return x.Descendant
	}
	return 0
}

func (x *AreaRlQueryReq) GetDepth() int64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *AreaRlQueryReq) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *AreaRlQueryReq) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *AreaRlQueryReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AreaRlQueryReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type EmptyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
}

func (x *EmptyReq) Reset() {
	*x = EmptyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyReq) ProtoMessage() {}

func (x *EmptyReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyReq.ProtoReflect.Descriptor instead.
func (*EmptyReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{86}
}

func (x *EmptyReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type ChannelInfoEditReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude       string   `protobuf:"bytes,6,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Version        int64    `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty"`
	CaptureAbility string   `protobuf:"bytes,4,opt,name=captureAbility,proto3" json:"captureAbility,omitempty"`
	GbCode         string   `protobuf:"bytes,5,opt,name=gbCode,proto3" json:"gbCode,omitempty"`
	Longitude      string   `protobuf:"bytes,7,opt,name=longitude,proto3" json:"longitude,omitempty"`
	TagList        []string `protobuf:"bytes,9,rep,name=tagList,proto3" json:"tagList,omitempty"`
	ChannelId      string   `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	ChannelName    string   `protobuf:"bytes,2,opt,name=channelName,proto3" json:"channelName,omitempty"`
	ChannelType    string   `protobuf:"bytes,3,opt,name=channelType,proto3" json:"channelType,omitempty"`
}

func (x *ChannelInfoEditReq) Reset() {
	*x = ChannelInfoEditReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInfoEditReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInfoEditReq) ProtoMessage() {}

func (x *ChannelInfoEditReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInfoEditReq.ProtoReflect.Descriptor instead.
func (*ChannelInfoEditReq) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{87}
}

func (x *ChannelInfoEditReq) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *ChannelInfoEditReq) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ChannelInfoEditReq) GetCaptureAbility() string {
	if x != nil {
		return x.CaptureAbility
	}
	return ""
}

func (x *ChannelInfoEditReq) GetGbCode() string {
	if x != nil {
		return x.GbCode
	}
	return ""
}

func (x *ChannelInfoEditReq) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *ChannelInfoEditReq) GetTagList() []string {
	if x != nil {
		return x.TagList
	}
	return nil
}

func (x *ChannelInfoEditReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelInfoEditReq) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *ChannelInfoEditReq) GetChannelType() string {
	if x != nil {
		return x.ChannelType
	}
	return ""
}

type ImportDeviceTagChnRspResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *ImportDeviceTagChnRsp `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string                 `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64                  `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *ImportDeviceTagChnRspResult) Reset() {
	*x = ImportDeviceTagChnRspResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportDeviceTagChnRspResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDeviceTagChnRspResult) ProtoMessage() {}

func (x *ImportDeviceTagChnRspResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDeviceTagChnRspResult.ProtoReflect.Descriptor instead.
func (*ImportDeviceTagChnRspResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{88}
}

func (x *ImportDeviceTagChnRspResult) GetData() *ImportDeviceTagChnRsp {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ImportDeviceTagChnRspResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ImportDeviceTagChnRspResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type AreaInfoListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []*AreaInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Msg     string      `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64       `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *AreaInfoListResult) Reset() {
	*x = AreaInfoListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaInfoListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaInfoListResult) ProtoMessage() {}

func (x *AreaInfoListResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaInfoListResult.ProtoReflect.Descriptor instead.
func (*AreaInfoListResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{89}
}

func (x *AreaInfoListResult) GetData() []*AreaInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AreaInfoListResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AreaInfoListResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type ChannelTreeInfoPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*ChannelTreeInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ChannelTreeInfoPage) Reset() {
	*x = ChannelTreeInfoPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelTreeInfoPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelTreeInfoPage) ProtoMessage() {}

func (x *ChannelTreeInfoPage) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelTreeInfoPage.ProtoReflect.Descriptor instead.
func (*ChannelTreeInfoPage) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{90}
}

func (x *ChannelTreeInfoPage) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ChannelTreeInfoPage) GetList() []*ChannelTreeInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type ChannelTreeInfoPageResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *ChannelTreeInfoPage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string               `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64                `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *ChannelTreeInfoPageResult) Reset() {
	*x = ChannelTreeInfoPageResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelTreeInfoPageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelTreeInfoPageResult) ProtoMessage() {}

func (x *ChannelTreeInfoPageResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelTreeInfoPageResult.ProtoReflect.Descriptor instead.
func (*ChannelTreeInfoPageResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{91}
}

func (x *ChannelTreeInfoPageResult) GetData() *ChannelTreeInfoPage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChannelTreeInfoPageResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ChannelTreeInfoPageResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type DeviceInfoAddRspListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []*DeviceInfoAddRsp `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Msg     string              `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64               `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *DeviceInfoAddRspListResult) Reset() {
	*x = DeviceInfoAddRspListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoAddRspListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoAddRspListResult) ProtoMessage() {}

func (x *DeviceInfoAddRspListResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoAddRspListResult.ProtoReflect.Descriptor instead.
func (*DeviceInfoAddRspListResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{92}
}

func (x *DeviceInfoAddRspListResult) GetData() []*DeviceInfoAddRsp {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeviceInfoAddRspListResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeviceInfoAddRspListResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type DeviceStatusPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*DeviceStatus `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *DeviceStatusPage) Reset() {
	*x = DeviceStatusPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStatusPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStatusPage) ProtoMessage() {}

func (x *DeviceStatusPage) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStatusPage.ProtoReflect.Descriptor instead.
func (*DeviceStatusPage) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{93}
}

func (x *DeviceStatusPage) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DeviceStatusPage) GetList() []*DeviceStatus {
	if x != nil {
		return x.List
	}
	return nil
}

type DeviceStatusPageResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *DeviceStatusPage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string            `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64             `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *DeviceStatusPageResult) Reset() {
	*x = DeviceStatusPageResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStatusPageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStatusPageResult) ProtoMessage() {}

func (x *DeviceStatusPageResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStatusPageResult.ProtoReflect.Descriptor instead.
func (*DeviceStatusPageResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{94}
}

func (x *DeviceStatusPageResult) GetData() *DeviceStatusPage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeviceStatusPageResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeviceStatusPageResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type ChannelStatusPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*ChannelStatus `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ChannelStatusPage) Reset() {
	*x = ChannelStatusPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStatusPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStatusPage) ProtoMessage() {}

func (x *ChannelStatusPage) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStatusPage.ProtoReflect.Descriptor instead.
func (*ChannelStatusPage) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{95}
}

func (x *ChannelStatusPage) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ChannelStatusPage) GetList() []*ChannelStatus {
	if x != nil {
		return x.List
	}
	return nil
}

type ChannelStatusPageResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *ChannelStatusPage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string             `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64              `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *ChannelStatusPageResult) Reset() {
	*x = ChannelStatusPageResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStatusPageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStatusPageResult) ProtoMessage() {}

func (x *ChannelStatusPageResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStatusPageResult.ProtoReflect.Descriptor instead.
func (*ChannelStatusPageResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{96}
}

func (x *ChannelStatusPageResult) GetData() *ChannelStatusPage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChannelStatusPageResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ChannelStatusPageResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type DeviceTagChnRspPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*DeviceTagChnRsp `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *DeviceTagChnRspPage) Reset() {
	*x = DeviceTagChnRspPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagChnRspPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagChnRspPage) ProtoMessage() {}

func (x *DeviceTagChnRspPage) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagChnRspPage.ProtoReflect.Descriptor instead.
func (*DeviceTagChnRspPage) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{97}
}

func (x *DeviceTagChnRspPage) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DeviceTagChnRspPage) GetList() []*DeviceTagChnRsp {
	if x != nil {
		return x.List
	}
	return nil
}

type DeviceTagChnRspPageResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *DeviceTagChnRspPage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string               `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64                `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *DeviceTagChnRspPageResult) Reset() {
	*x = DeviceTagChnRspPageResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagChnRspPageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagChnRspPageResult) ProtoMessage() {}

func (x *DeviceTagChnRspPageResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagChnRspPageResult.ProtoReflect.Descriptor instead.
func (*DeviceTagChnRspPageResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{98}
}

func (x *DeviceTagChnRspPageResult) GetData() *DeviceTagChnRspPage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeviceTagChnRspPageResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeviceTagChnRspPageResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type LogoInfoIdResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *LogoInfoId `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string      `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64       `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *LogoInfoIdResult) Reset() {
	*x = LogoInfoIdResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoInfoIdResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoInfoIdResult) ProtoMessage() {}

func (x *LogoInfoIdResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoInfoIdResult.ProtoReflect.Descriptor instead.
func (*LogoInfoIdResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{99}
}

func (x *LogoInfoIdResult) GetData() *LogoInfoId {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LogoInfoIdResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *LogoInfoIdResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type AreaTreeInfoPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*AreaTreeInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *AreaTreeInfoPage) Reset() {
	*x = AreaTreeInfoPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaTreeInfoPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaTreeInfoPage) ProtoMessage() {}

func (x *AreaTreeInfoPage) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaTreeInfoPage.ProtoReflect.Descriptor instead.
func (*AreaTreeInfoPage) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{100}
}

func (x *AreaTreeInfoPage) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AreaTreeInfoPage) GetList() []*AreaTreeInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type AreaTreeInfoPageResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *AreaTreeInfoPage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string            `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64             `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *AreaTreeInfoPageResult) Reset() {
	*x = AreaTreeInfoPageResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaTreeInfoPageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaTreeInfoPageResult) ProtoMessage() {}

func (x *AreaTreeInfoPageResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaTreeInfoPageResult.ProtoReflect.Descriptor instead.
func (*AreaTreeInfoPageResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{101}
}

func (x *AreaTreeInfoPageResult) GetData() *AreaTreeInfoPage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AreaTreeInfoPageResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AreaTreeInfoPageResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type DeviceTreeInfoPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*DeviceTreeInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *DeviceTreeInfoPage) Reset() {
	*x = DeviceTreeInfoPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTreeInfoPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTreeInfoPage) ProtoMessage() {}

func (x *DeviceTreeInfoPage) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTreeInfoPage.ProtoReflect.Descriptor instead.
func (*DeviceTreeInfoPage) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{102}
}

func (x *DeviceTreeInfoPage) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DeviceTreeInfoPage) GetList() []*DeviceTreeInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type DeviceTreeInfoPageResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *DeviceTreeInfoPage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string              `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64               `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *DeviceTreeInfoPageResult) Reset() {
	*x = DeviceTreeInfoPageResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTreeInfoPageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTreeInfoPageResult) ProtoMessage() {}

func (x *DeviceTreeInfoPageResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTreeInfoPageResult.ProtoReflect.Descriptor instead.
func (*DeviceTreeInfoPageResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{103}
}

func (x *DeviceTreeInfoPageResult) GetData() *DeviceTreeInfoPage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeviceTreeInfoPageResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeviceTreeInfoPageResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type EmptyRspResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *EmptyRsp `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string    `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64     `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *EmptyRspResult) Reset() {
	*x = EmptyRspResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRspResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRspResult) ProtoMessage() {}

func (x *EmptyRspResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRspResult.ProtoReflect.Descriptor instead.
func (*EmptyRspResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{104}
}

func (x *EmptyRspResult) GetData() *EmptyRsp {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *EmptyRspResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *EmptyRspResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type ChannelStatusDeleteRspListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []*ChannelStatusDeleteRsp `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Msg     string                    `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64                     `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *ChannelStatusDeleteRspListResult) Reset() {
	*x = ChannelStatusDeleteRspListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStatusDeleteRspListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStatusDeleteRspListResult) ProtoMessage() {}

func (x *ChannelStatusDeleteRspListResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStatusDeleteRspListResult.ProtoReflect.Descriptor instead.
func (*ChannelStatusDeleteRspListResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{105}
}

func (x *ChannelStatusDeleteRspListResult) GetData() []*ChannelStatusDeleteRsp {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChannelStatusDeleteRspListResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ChannelStatusDeleteRspListResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type AreaIdResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *AreaId `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string  `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64   `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *AreaIdResult) Reset() {
	*x = AreaIdResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaIdResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaIdResult) ProtoMessage() {}

func (x *AreaIdResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaIdResult.ProtoReflect.Descriptor instead.
func (*AreaIdResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{106}
}

func (x *AreaIdResult) GetData() *AreaId {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AreaIdResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AreaIdResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type DeviceStatusDeleteRspListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []*DeviceStatusDeleteRsp `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Msg     string                   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64                    `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *DeviceStatusDeleteRspListResult) Reset() {
	*x = DeviceStatusDeleteRspListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStatusDeleteRspListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStatusDeleteRspListResult) ProtoMessage() {}

func (x *DeviceStatusDeleteRspListResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStatusDeleteRspListResult.ProtoReflect.Descriptor instead.
func (*DeviceStatusDeleteRspListResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{107}
}

func (x *DeviceStatusDeleteRspListResult) GetData() []*DeviceStatusDeleteRsp {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeviceStatusDeleteRspListResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeviceStatusDeleteRspListResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type AreaInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *AreaInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string    `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64     `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *AreaInfoResult) Reset() {
	*x = AreaInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaInfoResult) ProtoMessage() {}

func (x *AreaInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaInfoResult.ProtoReflect.Descriptor instead.
func (*AreaInfoResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{108}
}

func (x *AreaInfoResult) GetData() *AreaInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AreaInfoResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AreaInfoResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type ChannelIdResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *ChannelId `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string     `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64      `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *ChannelIdResult) Reset() {
	*x = ChannelIdResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelIdResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelIdResult) ProtoMessage() {}

func (x *ChannelIdResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelIdResult.ProtoReflect.Descriptor instead.
func (*ChannelIdResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{109}
}

func (x *ChannelIdResult) GetData() *ChannelId {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChannelIdResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ChannelIdResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type DeviceIdResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *DeviceId `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string    `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64     `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *DeviceIdResult) Reset() {
	*x = DeviceIdResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceIdResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceIdResult) ProtoMessage() {}

func (x *DeviceIdResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceIdResult.ProtoReflect.Descriptor instead.
func (*DeviceIdResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{110}
}

func (x *DeviceIdResult) GetData() *DeviceId {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeviceIdResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeviceIdResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type DeviceInfoPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*DeviceInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *DeviceInfoPage) Reset() {
	*x = DeviceInfoPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoPage) ProtoMessage() {}

func (x *DeviceInfoPage) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoPage.ProtoReflect.Descriptor instead.
func (*DeviceInfoPage) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{111}
}

func (x *DeviceInfoPage) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DeviceInfoPage) GetList() []*DeviceInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type DeviceInfoPageResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *DeviceInfoPage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string          `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64           `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *DeviceInfoPageResult) Reset() {
	*x = DeviceInfoPageResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoPageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoPageResult) ProtoMessage() {}

func (x *DeviceInfoPageResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoPageResult.ProtoReflect.Descriptor instead.
func (*DeviceInfoPageResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{112}
}

func (x *DeviceInfoPageResult) GetData() *DeviceInfoPage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeviceInfoPageResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeviceInfoPageResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type DeviceTagPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*DeviceTag `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *DeviceTagPage) Reset() {
	*x = DeviceTagPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagPage) ProtoMessage() {}

func (x *DeviceTagPage) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagPage.ProtoReflect.Descriptor instead.
func (*DeviceTagPage) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{113}
}

func (x *DeviceTagPage) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DeviceTagPage) GetList() []*DeviceTag {
	if x != nil {
		return x.List
	}
	return nil
}

type DeviceTagPageResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *DeviceTagPage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string         `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64          `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *DeviceTagPageResult) Reset() {
	*x = DeviceTagPageResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagPageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagPageResult) ProtoMessage() {}

func (x *DeviceTagPageResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagPageResult.ProtoReflect.Descriptor instead.
func (*DeviceTagPageResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{114}
}

func (x *DeviceTagPageResult) GetData() *DeviceTagPage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeviceTagPageResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeviceTagPageResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type LogoInfoPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*LogoInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *LogoInfoPage) Reset() {
	*x = LogoInfoPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoInfoPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoInfoPage) ProtoMessage() {}

func (x *LogoInfoPage) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoInfoPage.ProtoReflect.Descriptor instead.
func (*LogoInfoPage) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{115}
}

func (x *LogoInfoPage) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *LogoInfoPage) GetList() []*LogoInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type LogoInfoPageResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *LogoInfoPage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string        `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64         `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *LogoInfoPageResult) Reset() {
	*x = LogoInfoPageResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoInfoPageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoInfoPageResult) ProtoMessage() {}

func (x *LogoInfoPageResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoInfoPageResult.ProtoReflect.Descriptor instead.
func (*LogoInfoPageResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{116}
}

func (x *LogoInfoPageResult) GetData() *LogoInfoPage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LogoInfoPageResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *LogoInfoPageResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type DeviceManagedInfoRspPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*DeviceManagedInfoRsp `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *DeviceManagedInfoRspPage) Reset() {
	*x = DeviceManagedInfoRspPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceManagedInfoRspPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceManagedInfoRspPage) ProtoMessage() {}

func (x *DeviceManagedInfoRspPage) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceManagedInfoRspPage.ProtoReflect.Descriptor instead.
func (*DeviceManagedInfoRspPage) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{117}
}

func (x *DeviceManagedInfoRspPage) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DeviceManagedInfoRspPage) GetList() []*DeviceManagedInfoRsp {
	if x != nil {
		return x.List
	}
	return nil
}

type DeviceManagedInfoRspPageResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *DeviceManagedInfoRspPage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string                    `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64                     `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *DeviceManagedInfoRspPageResult) Reset() {
	*x = DeviceManagedInfoRspPageResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceManagedInfoRspPageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceManagedInfoRspPageResult) ProtoMessage() {}

func (x *DeviceManagedInfoRspPageResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceManagedInfoRspPageResult.ProtoReflect.Descriptor instead.
func (*DeviceManagedInfoRspPageResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{118}
}

func (x *DeviceManagedInfoRspPageResult) GetData() *DeviceManagedInfoRspPage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeviceManagedInfoRspPageResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeviceManagedInfoRspPageResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type DoorChnStatRspResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *DoorChnStatRsp `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string          `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64           `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *DoorChnStatRspResult) Reset() {
	*x = DoorChnStatRspResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoorChnStatRspResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoorChnStatRspResult) ProtoMessage() {}

func (x *DoorChnStatRspResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoorChnStatRspResult.ProtoReflect.Descriptor instead.
func (*DoorChnStatRspResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{119}
}

func (x *DoorChnStatRspResult) GetData() *DoorChnStatRsp {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DoorChnStatRspResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DoorChnStatRspResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type AreaInfoPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*AreaInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *AreaInfoPage) Reset() {
	*x = AreaInfoPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaInfoPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaInfoPage) ProtoMessage() {}

func (x *AreaInfoPage) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaInfoPage.ProtoReflect.Descriptor instead.
func (*AreaInfoPage) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{120}
}

func (x *AreaInfoPage) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AreaInfoPage) GetList() []*AreaInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type AreaInfoPageResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *AreaInfoPage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string        `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64         `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *AreaInfoPageResult) Reset() {
	*x = AreaInfoPageResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaInfoPageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaInfoPageResult) ProtoMessage() {}

func (x *AreaInfoPageResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaInfoPageResult.ProtoReflect.Descriptor instead.
func (*AreaInfoPageResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{121}
}

func (x *AreaInfoPageResult) GetData() *AreaInfoPage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AreaInfoPageResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AreaInfoPageResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type ChannelInfoPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*ChannelInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ChannelInfoPage) Reset() {
	*x = ChannelInfoPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInfoPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInfoPage) ProtoMessage() {}

func (x *ChannelInfoPage) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInfoPage.ProtoReflect.Descriptor instead.
func (*ChannelInfoPage) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{122}
}

func (x *ChannelInfoPage) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ChannelInfoPage) GetList() []*ChannelInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type ChannelInfoPageResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *ChannelInfoPage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string           `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64            `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *ChannelInfoPageResult) Reset() {
	*x = ChannelInfoPageResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInfoPageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInfoPageResult) ProtoMessage() {}

func (x *ChannelInfoPageResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInfoPageResult.ProtoReflect.Descriptor instead.
func (*ChannelInfoPageResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{123}
}

func (x *ChannelInfoPageResult) GetData() *ChannelInfoPage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChannelInfoPageResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ChannelInfoPageResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type DeviceInfoRspResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *DeviceInfoRsp `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string         `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64          `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *DeviceInfoRspResult) Reset() {
	*x = DeviceInfoRspResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoRspResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoRspResult) ProtoMessage() {}

func (x *DeviceInfoRspResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoRspResult.ProtoReflect.Descriptor instead.
func (*DeviceInfoRspResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{124}
}

func (x *DeviceInfoRspResult) GetData() *DeviceInfoRsp {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeviceInfoRspResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeviceInfoRspResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type DeviceTagIdResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *DeviceTagId `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string       `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64        `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *DeviceTagIdResult) Reset() {
	*x = DeviceTagIdResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagIdResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagIdResult) ProtoMessage() {}

func (x *DeviceTagIdResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagIdResult.ProtoReflect.Descriptor instead.
func (*DeviceTagIdResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{125}
}

func (x *DeviceTagIdResult) GetData() *DeviceTagId {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeviceTagIdResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeviceTagIdResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type LogoInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *LogoInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string    `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64     `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *LogoInfoResult) Reset() {
	*x = LogoInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoInfoResult) ProtoMessage() {}

func (x *LogoInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoInfoResult.ProtoReflect.Descriptor instead.
func (*LogoInfoResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{126}
}

func (x *LogoInfoResult) GetData() *LogoInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LogoInfoResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *LogoInfoResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type ChannelInfoRspResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *ChannelInfoRsp `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string          `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64           `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *ChannelInfoRspResult) Reset() {
	*x = ChannelInfoRspResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInfoRspResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInfoRspResult) ProtoMessage() {}

func (x *ChannelInfoRspResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInfoRspResult.ProtoReflect.Descriptor instead.
func (*ChannelInfoRspResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{127}
}

func (x *ChannelInfoRspResult) GetData() *ChannelInfoRsp {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChannelInfoRspResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ChannelInfoRspResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type DeviceDeleteRspListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []*DeviceDeleteRsp `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Msg     string             `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64              `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *DeviceDeleteRspListResult) Reset() {
	*x = DeviceDeleteRspListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDeleteRspListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDeleteRspListResult) ProtoMessage() {}

func (x *DeviceDeleteRspListResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDeleteRspListResult.ProtoReflect.Descriptor instead.
func (*DeviceDeleteRspListResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{128}
}

func (x *DeviceDeleteRspListResult) GetData() []*DeviceDeleteRsp {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeviceDeleteRspListResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeviceDeleteRspListResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type ChannelInfoRspListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []*ChannelInfoRsp `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Msg     string            `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64             `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *ChannelInfoRspListResult) Reset() {
	*x = ChannelInfoRspListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInfoRspListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInfoRspListResult) ProtoMessage() {}

func (x *ChannelInfoRspListResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInfoRspListResult.ProtoReflect.Descriptor instead.
func (*ChannelInfoRspListResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{129}
}

func (x *ChannelInfoRspListResult) GetData() []*ChannelInfoRsp {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChannelInfoRspListResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ChannelInfoRspListResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type DeviceTagResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *DeviceTag `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Msg     string     `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrCode int64      `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (x *DeviceTagResult) Reset() {
	*x = DeviceTagResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceServer_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagResult) ProtoMessage() {}

func (x *DeviceTagResult) ProtoReflect() protoreflect.Message {
	mi := &file_deviceServer_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagResult.ProtoReflect.Descriptor instead.
func (*DeviceTagResult) Descriptor() ([]byte, []int) {
	return file_deviceServer_proto_rawDescGZIP(), []int{130}
}

func (x *DeviceTagResult) GetData() *DeviceTag {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeviceTagResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeviceTagResult) GetErrCode() int64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

var File_deviceServer_proto protoreflect.FileDescriptor

var file_deviceServer_proto_rawDesc = []byte{
	0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x44, 0x6f, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xdb, 0x05, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6f, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6f, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x62,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x62, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbf, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xc8, 0x01, 0x0a, 0x12, 0x41, 0x72, 0x65, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x22, 0xb9, 0x02,
	0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x13, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9b, 0x01, 0x0a,
	0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x72, 0x65, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x61, 0x72, 0x65, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x66, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x66, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x0c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x46, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6a, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc1, 0x03, 0x0a, 0x0c, 0x41, 0x72, 0x65, 0x61,
	0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x72,
	0x65, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x65, 0x65, 0x50, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x65, 0x65, 0x50, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0xc2, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0xc3, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72,
	0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0xc4, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0xc5, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xc8, 0xb8, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xca, 0xb8, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0xcb, 0xb8, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x37, 0x0a, 0x0e, 0x75, 0x73,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xcc, 0xb8, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x56, 0x4f, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xc1, 0xb8, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0xc6, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x53, 0x6e, 0x18, 0xc7, 0xb8, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x53, 0x6e, 0x12, 0x20, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xc9, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x68, 0x0a, 0x14, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x62, 0x0a, 0x10, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x69, 0x6d, 0x50, 0x72, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x69, 0x6d, 0x50, 0x72, 0x65, 0x49, 0x64, 0x22, 0x83,
	0x01, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x61, 0x67, 0x43, 0x68, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x72, 0x65, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x64,
	0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x68, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x63, 0x68, 0x6e, 0x22, 0xcf, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x69, 0x6e, 0x64, 0x52, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x7b, 0x0a, 0x11, 0x49, 0x6e, 0x66, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x66,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x65, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x31, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x09, 0x63, 0x68, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x09, 0x63, 0x68, 0x6e, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xea, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xfa, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x49, 0x64, 0x22, 0xdf, 0x02, 0x0a,
	0x08, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65,
	0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x35, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x4f, 0x52, 0x0e,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x53,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x53, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4c,
	0x0a, 0x14, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x22, 0xac, 0x01, 0x0a,
	0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x0f, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x42, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x0d, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61,
	0x67, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x61, 0x67,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x6e, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x43,
	0x68, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x6e, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x6e,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x52, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x69, 0x6e, 0x66, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x22, 0x93, 0x06, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41,
	0x64, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x64, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x4d, 0x61, 0x73, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x6d, 0x65, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6f, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6f, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x49, 0x64, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x20, 0x0a, 0x06, 0x41, 0x72, 0x65, 0x61, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x41, 0x72,
	0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22,
	0x82, 0x07, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x73, 0x70, 0x12, 0x36, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0xa6, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x4f, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x95, 0x4e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x97, 0x4e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x65, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x9c, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x98, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x9a, 0x4e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x9e, 0x4e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0xa0, 0x4e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x1b, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0xa1, 0x4e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1f,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xa3, 0x4e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x92, 0x4e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x18, 0x93, 0x4e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x18, 0x96,
	0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x6f,
	0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xa4,
	0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0xa5, 0x4e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x9b, 0x4e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0a, 0x69,
	0x6f, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x9d, 0x4e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6f, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x06,
	0x67, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x9f, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0xa2, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x91, 0x4e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x94, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x99, 0x4e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67,
	0x52, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x69, 0x6e,
	0x64, 0x43, 0x68, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x62, 0x69,
	0x6e, 0x64, 0x43, 0x68, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0f, 0x72, 0x65, 0x61,
	0x64, 0x48, 0x65, 0x61, 0x64, 0x43, 0x68, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x73, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x48, 0x65, 0x61, 0x64, 0x43, 0x68, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xd0, 0x08, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x07, 0x69, 0x6e, 0x66, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x66, 0x49, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xa0, 0x4e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x94, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x67, 0x62, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0xa2, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x62, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x29, 0x0a, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0xa9, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xad, 0x4e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0f, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x91, 0x4e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0f,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x9b, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x1f, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0xa3, 0x4e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x36, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0xaf, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x4f, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x92, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x93, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x9a, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x64, 0x6e, 0x73,
	0x18, 0xa5, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa6, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0xae, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0xac, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x96, 0x4e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x1f, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x97,
	0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0xa1, 0x4e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0xa4, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0xa8, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0a, 0x69, 0x6f,
	0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xab, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6f, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x18, 0x99, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x12, 0x13, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x9c, 0x4e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x13, 0x0a,
	0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x9e, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d,
	0x65, 0x69, 0x12, 0x1b, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0xa7,
	0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x19, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x95, 0x4e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x98, 0x4e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x11, 0x0a,
	0x03, 0x6d, 0x61, 0x63, 0x18, 0x9d, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63,
	0x12, 0x19, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x9f, 0x4e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x0f, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xaa,
	0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x68, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x52, 0x07, 0x63, 0x68, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61,
	0x72, 0x65, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x61, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x61, 0x67, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x68, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x61, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x68, 0x6e, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x10, 0x41, 0x72, 0x65, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4e, 0x0a,
	0x0e, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x95, 0x01,
	0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x6f, 0x6f, 0x72, 0x4f, 0x70,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f,
	0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x02, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x41,
	0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x6f, 0x76, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x69, 0x6d, 0x50, 0x72, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x69, 0x6d, 0x50, 0x72, 0x65, 0x49,
	0x64, 0x22, 0x58, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xff, 0x03, 0x0a, 0x0c,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x4f, 0x12, 0x41, 0x0a, 0x14,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x4f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a,
	0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x68, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x72, 0x65, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x61, 0x72, 0x65, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x66,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x66, 0x46,
	0x6c, 0x61, 0x67, 0x22, 0x49, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x64, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xd5,
	0x01, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x53, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x61, 0x67, 0x53, 0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x0b, 0x41, 0x72, 0x65, 0x61, 0x4d,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x69, 0x6d, 0x50, 0x61, 0x72,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x69, 0x6d, 0x50, 0x61, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x75,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x75, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x50, 0x61, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x50, 0x61, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x69, 0x6d, 0x50, 0x72, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x69, 0x6d, 0x50, 0x72, 0x65, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65,
	0x76, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x64, 0x64, 0x52, 0x07, 0x64, 0x65, 0x76,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x41, 0x64, 0x64, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x80, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x65,
	0x61, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x22, 0xbd, 0x01,
	0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x68, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x22, 0x9e, 0x06,
	0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x72, 0x65, 0x65, 0x50, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x72, 0x65, 0x65, 0x50, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0xc8, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0xce, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x41, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0xd0, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0xd1, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xd3, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0xc2, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x18, 0xc3, 0xb8, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x18, 0xc6, 0xb8, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x12,
	0x1a, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0xca, 0xb8, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xd4, 0xb8, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0xd5, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x20, 0x0a, 0x0a, 0x69, 0x6f, 0x74,
	0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xcd, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6f, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x06, 0x67,
	0x62, 0x43, 0x6f, 0x64, 0x65, 0x18, 0xcf, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0xd2, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xc1, 0xb8, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xc4, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xc9, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xcb, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0xc5, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0xc7, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x65, 0x78, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0xcc, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xd6, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x4f, 0x52, 0x0e,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x87,
	0x07, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x62, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x62, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0e, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x56, 0x4f, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x64, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6f, 0x74, 0x45, 0x78, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6f, 0x74, 0x45,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x22, 0x8f, 0x08, 0x0a, 0x0e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x65, 0x65, 0x50,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x65, 0x65, 0x50, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0xd4, 0xb8, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x24, 0x0a,
	0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0xd8, 0xb8,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0a, 0x69, 0x6f, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0xdb, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6f, 0x74, 0x45, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0xc6, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0xc7, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0xd1, 0xb8,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0xd7, 0xb8, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x18, 0xc9, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0xcc, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x14, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0xce, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x1a, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0xcf, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2a, 0x0a, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0xda, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xc5, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0xc8, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x03, 0x6d, 0x61, 0x63, 0x18, 0xcd, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61,
	0x63, 0x12, 0x1a, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xd0, 0xb8, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xdd, 0xb8, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xc4, 0xb8,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x06, 0x67, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x18, 0xd2, 0xb8, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x0f, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xd9,
	0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xdf, 0xb8, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x4f,
	0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xc1, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x70, 0x18, 0xcb, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x20, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x61,
	0x73, 0x6b, 0x18, 0xd3, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0xd5, 0xb8,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xd6, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x18, 0xde, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x12, 0x1c, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x18, 0xc2, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x18, 0xc3, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0xca, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xdc, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x15, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x68,
	0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x09, 0x64,
	0x65, 0x76, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa8, 0x05, 0x0a, 0x0b, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6f, 0x74, 0x45,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6f,
	0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x62, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x62, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x35, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x4f, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x41, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x22, 0x53, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x18, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x12,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x11,
	0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x67,
	0x6f, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x49,
	0x64, 0x22, 0xaa, 0x01, 0x0a, 0x06, 0x41, 0x72, 0x65, 0x61, 0x52, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63,
	0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x65,
	0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb8,
	0x01, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x76, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x64, 0x65, 0x76, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x66, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x66, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x26, 0x0a, 0x08, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x80, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x66, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xe2, 0x03, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x66, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6e, 0x66, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x68, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x52, 0x07, 0x63, 0x68, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x6d, 0x65, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x12, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x22, 0xe9, 0x02, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x68, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x61, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xea, 0x07, 0x0a, 0x14, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0xad, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x94, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x67, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0xa2, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29,
	0x0a, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0xa9, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0e, 0x75, 0x73, 0x65,
	0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xaf, 0x4e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56,
	0x4f, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x0f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x91, 0x4e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x0f, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x9b, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x73,
	0x6b, 0x18, 0xa3, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x11, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0xa5, 0x4e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0xa6, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0xae, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12,
	0x1b, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x92, 0x4e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x93, 0x4e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x9a, 0x4e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xac,
	0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0xa4, 0x4e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x23, 0x0a, 0x0c,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0xa8, 0x4e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0a, 0x69, 0x6f, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0xab, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6f, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x19, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x96, 0x4e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x97, 0x4e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0xa1, 0x4e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0xa7, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6e,
	0x18, 0x99, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x6e, 0x12, 0x13, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x9c, 0x4e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x13, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x9e,
	0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x19, 0x0a, 0x07, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x9f, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xaa, 0x4e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x95, 0x4e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x98, 0x4e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x11, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x9d, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x61, 0x63, 0x12, 0x19, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xa0, 0x4e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x68, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x41, 0x72, 0x65, 0x61,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x65,
	0x61, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2d, 0x0a, 0x15, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x68,
	0x6e, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x94, 0x04, 0x0a, 0x14, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x67, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x67, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6f, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6f, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x62, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x94, 0x01, 0x0a, 0x0e, 0x44, 0x6f, 0x6f, 0x72, 0x43, 0x68,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x22, 0x7d, 0x0a, 0x0f,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x81, 0x07, 0x0a, 0x09,
	0x49, 0x6e, 0x66, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x72, 0x69,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x72, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x53, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x41, 0x63, 0x72, 0x65, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x41, 0x63, 0x72, 0x65, 0x61, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x22,
	0x46, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x0e, 0x41, 0x72, 0x65, 0x61,
	0x52, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x0f, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x91, 0x4e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x18, 0x92, 0x4e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63,
	0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x18, 0x93, 0x4e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64,
	0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x18, 0x94, 0x4e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x12, 0x1f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x95,
	0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x96, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x28, 0x0a, 0x08,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xa4, 0x02, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x41, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x67,
	0x62, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x62, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x75, 0x0a,
	0x1b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67,
	0x43, 0x68, 0x6e, 0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x68, 0x6e, 0x52,
	0x73, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x5f, 0x0a, 0x12, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x71, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x72, 0x65,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6f, 0x0a, 0x1a, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x64, 0x64, 0x52, 0x73, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x41, 0x64, 0x64, 0x52, 0x73, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4b, 0x0a, 0x10,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x6b, 0x0a, 0x16, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61,
	0x67, 0x43, 0x68, 0x6e, 0x52, 0x73, 0x70, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x68, 0x6e, 0x52, 0x73,
	0x70, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x71, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x61, 0x67, 0x43, 0x68, 0x6e, 0x52, 0x73, 0x70, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x68,
	0x6e, 0x52, 0x73, 0x70, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x5f, 0x0a, 0x10, 0x4c, 0x6f,
	0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4c,
	0x6f, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4b, 0x0a, 0x10, 0x41,
	0x72, 0x65, 0x61, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x6b, 0x0a, 0x16, 0x41, 0x72, 0x65, 0x61,
	0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4f, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x6f, 0x0a, 0x18, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x0e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x73, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x7b, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x73, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x73, 0x70, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x57, 0x0a, 0x0c, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x79, 0x0a, 0x1f, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x73, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x0e, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x5d, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x5b, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x47,
	0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x67, 0x0a, 0x14, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x45, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61,
	0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x61, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x43,
	0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x63, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x18, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x7b, 0x0a, 0x1e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x67, 0x0a, 0x14, 0x44, 0x6f, 0x6f, 0x72, 0x43, 0x68, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x43,
	0x68, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x73, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x43, 0x0a, 0x0c, 0x41,
	0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x63, 0x0a, 0x12, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x49, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x69, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x65, 0x0a, 0x13, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x61, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61,
	0x67, 0x49, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x67, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6d, 0x0a, 0x19, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x73, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x73, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6b, 0x0a, 0x18, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x73, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x5d, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x61, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x8b, 0x1a, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x07, 0x50, 0x75, 0x74, 0x4c, 0x6f,
	0x67, 0x6f, 0x12, 0x12, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x0b, 0x2e, 0x4c, 0x6f, 0x67, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x2e, 0x4c, 0x6f, 0x67,
	0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6a, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x0f, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x2f, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x0f, 0x2e,
	0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x11,
	0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x13, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x54,
	0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x41, 0x72, 0x65, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x15, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x0f, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x08, 0x4d,
	0x6f, 0x76, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x0c, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x4d, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x41, 0x72, 0x65,
	0x61, 0x12, 0x0f, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x12, 0x12, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x2e,
	0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0e, 0x50, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x39, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x15, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x11, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x73, 0x70, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x0f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1a, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x49, 0x6e, 0x66, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x44, 0x6f, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x4d,
	0x75, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x6f, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x10, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x17, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x34, 0x0a, 0x09, 0x50, 0x75, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x11, 0x2e,
	0x49, 0x6e, 0x66, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x15, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0a, 0x45, 0x64, 0x69, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x41, 0x72, 0x65, 0x61, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x38, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x0d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x14, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x45, 0x64, 0x69, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x50, 0x6f, 0x73,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x11, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x64, 0x64, 0x52, 0x73, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x44, 0x65, 0x76, 0x49, 0x64, 0x12, 0x19, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x17, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x50,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x3e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x68, 0x6e, 0x44, 0x6f, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x09, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x43, 0x68,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x17, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x68, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x47, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x6e, 0x44, 0x6f, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x44, 0x6f, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x12, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x68, 0x6e, 0x12,
	0x16, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61,
	0x67, 0x43, 0x68, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x68, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x10, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x68, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43,
	0x68, 0x6e, 0x52, 0x73, 0x70, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x12, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x61, 0x67, 0x43, 0x68, 0x6e, 0x12, 0x16, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x68, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61,
	0x67, 0x43, 0x68, 0x6e, 0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x3e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x61, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x35, 0x0a, 0x0d, 0x4d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67,
	0x12, 0x11, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x73, 0x70, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x12, 0x13, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x61, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x61, 0x67, 0x12, 0x10, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61,
	0x67, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x61, 0x67, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x39, 0x0a,
	0x0c, 0x50, 0x75, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x12, 0x13, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x12, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x12, 0x16, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x61, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x10, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x42, 0x5d, 0x0a, 0x29, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x6f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x63, 0x70, 0x2e, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x50, 0x00, 0x5a, 0x17, 0x7a, 0x7a, 0x5f, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x79, 0x73, 0x3b, 0x7a, 0x7a, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73,
	0x88, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_deviceServer_proto_rawDescOnce sync.Once
	file_deviceServer_proto_rawDescData = file_deviceServer_proto_rawDesc
)

func file_deviceServer_proto_rawDescGZIP() []byte {
	file_deviceServer_proto_rawDescOnce.Do(func() {
		file_deviceServer_proto_rawDescData = protoimpl.X.CompressGZIP(file_deviceServer_proto_rawDescData)
	})
	return file_deviceServer_proto_rawDescData
}

var file_deviceServer_proto_msgTypes = make([]protoimpl.MessageInfo, 131)
var file_deviceServer_proto_goTypes = []interface{}{
	(*DoorStatusListReq)(nil),                // 0: DoorStatusListReq
	(*DeviceInfoUpdateReq)(nil),              // 1: DeviceInfoUpdateReq
	(*DeviceListReq)(nil),                    // 2: DeviceListReq
	(*DeviceStatusQueryListReq)(nil),         // 3: DeviceStatusQueryListReq
	(*AreaInfoAddReq)(nil),                   // 4: AreaInfoAddReq
	(*AreaChannelListReq)(nil),               // 5: AreaChannelListReq
	(*ChannelStatus)(nil),                    // 6: ChannelStatus
	(*ChannelStatusDelete)(nil),              // 7: ChannelStatusDelete
	(*DeviceTreeReq)(nil),                    // 8: DeviceTreeReq
	(*DeviceAreaRl)(nil),                     // 9: DeviceAreaRl
	(*LogoInfoPrjTypeReq)(nil),               // 10: LogoInfoPrjTypeReq
	(*AreaTreeInfo)(nil),                     // 11: AreaTreeInfo
	(*ChannelStatusListReq)(nil),             // 12: ChannelStatusListReq
	(*ChannelStatusGetByIdReq)(nil),          // 13: ChannelStatusGetByIdReq
	(*DeviceTagMoveReq)(nil),                 // 14: DeviceTagMoveReq
	(*ImportDeviceTagChnReq)(nil),            // 15: ImportDeviceTagChnReq
	(*ChannelBindRl)(nil),                    // 16: ChannelBindRl
	(*InfChannelListReq)(nil),                // 17: InfChannelListReq
	(*DeviceTagQueryReq)(nil),                // 18: DeviceTagQueryReq
	(*ChannelStatusDeleteReq)(nil),           // 19: ChannelStatusDeleteReq
	(*DeviceTagChannel)(nil),                 // 20: DeviceTagChannel
	(*LogoInfo)(nil),                         // 21: LogoInfo
	(*AreaInfo)(nil),                         // 22: AreaInfo
	(*AreaInfoQueryByIdReq)(nil),             // 23: AreaInfoQueryByIdReq
	(*ChannelListReq)(nil),                   // 24: ChannelListReq
	(*DeviceDeleteRsp)(nil),                  // 25: DeviceDeleteRsp
	(*LogoInfoId)(nil),                       // 26: LogoInfoId
	(*ChannelGetReq)(nil),                    // 27: ChannelGetReq
	(*ChannelDeleteReq)(nil),                 // 28: ChannelDeleteReq
	(*DeviceInfRl)(nil),                      // 29: DeviceInfRl
	(*EmptyRsp)(nil),                         // 30: EmptyRsp
	(*DeviceInfoAdd)(nil),                    // 31: DeviceInfoAdd
	(*DeviceStatusDeleteRsp)(nil),            // 32: DeviceStatusDeleteRsp
	(*AreaId)(nil),                           // 33: AreaId
	(*AreaInfoUpdateReq)(nil),                // 34: AreaInfoUpdateReq
	(*ChannelInfoRsp)(nil),                   // 35: ChannelInfoRsp
	(*DeviceInfoRsp)(nil),                    // 36: DeviceInfoRsp
	(*DeviceTagQueryByIdReq)(nil),            // 37: DeviceTagQueryByIdReq
	(*RemoveDeviceTagChnReq)(nil),            // 38: RemoveDeviceTagChnReq
	(*AreaInfoQueryReq)(nil),                 // 39: AreaInfoQueryReq
	(*AreaInfoDelReq)(nil),                   // 40: AreaInfoDelReq
	(*MulCheckDoorOpenReq)(nil),              // 41: MulCheckDoorOpenReq
	(*DeviceStatus)(nil),                     // 42: DeviceStatus
	(*DeviceTagMove)(nil),                    // 43: DeviceTagMove
	(*LogoInfoAddReq)(nil),                   // 44: LogoInfoAddReq
	(*PermissionVO)(nil),                     // 45: PermissionVO
	(*ChannelId)(nil),                        // 46: ChannelId
	(*ChannelStatusGetListReq)(nil),          // 47: ChannelStatusGetListReq
	(*DeviceGetReq)(nil),                     // 48: DeviceGetReq
	(*DeviceEditReq)(nil),                    // 49: DeviceEditReq
	(*DeviceTag)(nil),                        // 50: DeviceTag
	(*AreaMoveReq)(nil),                      // 51: AreaMoveReq
	(*DeviceInfoAddReq)(nil),                 // 52: DeviceInfoAddReq
	(*DeviceInfoAddRsp)(nil),                 // 53: DeviceInfoAddRsp
	(*DeviceManagedReq)(nil),                 // 54: DeviceManagedReq
	(*DeviceTagDeleteReq)(nil),               // 55: DeviceTagDeleteReq
	(*DeviceTagChnReq)(nil),                  // 56: DeviceTagChnReq
	(*ChannelTreeInfo)(nil),                  // 57: ChannelTreeInfo
	(*DeviceInfo)(nil),                       // 58: DeviceInfo
	(*DeviceTreeInfo)(nil),                   // 59: DeviceTreeInfo
	(*DeviceStatusUpdateReq)(nil),            // 60: DeviceStatusUpdateReq
	(*DeviceStatusDeleteReq)(nil),            // 61: DeviceStatusDeleteReq
	(*ChannelInfo)(nil),                      // 62: ChannelInfo
	(*DeviceDeleteReq)(nil),                  // 63: DeviceDeleteReq
	(*DeviceStatusQueryByIdReq)(nil),         // 64: DeviceStatusQueryByIdReq
	(*DeviceStatusDelete)(nil),               // 65: DeviceStatusDelete
	(*LogoInfoUpdateReq)(nil),                // 66: LogoInfoUpdateReq
	(*AreaRl)(nil),                           // 67: AreaRl
	(*ChannelTreeReq)(nil),                   // 68: ChannelTreeReq
	(*DeviceId)(nil),                         // 69: DeviceId
	(*InfDeviceListReq)(nil),                 // 70: InfDeviceListReq
	(*DeviceInfoEditReq)(nil),                // 71: DeviceInfoEditReq
	(*DeviceTagUpdateReq)(nil),               // 72: DeviceTagUpdateReq
	(*DeviceTagId)(nil),                      // 73: DeviceTagId
	(*DeviceTagChnRsp)(nil),                  // 74: DeviceTagChnRsp
	(*ChannelStatusUpdateReq)(nil),           // 75: ChannelStatusUpdateReq
	(*DeviceManagedInfoRsp)(nil),             // 76: DeviceManagedInfoRsp
	(*AreaDeviceListReq)(nil),                // 77: AreaDeviceListReq
	(*ImportDeviceTagChnRsp)(nil),            // 78: ImportDeviceTagChnRsp
	(*ChannelInfoUpdateReq)(nil),             // 79: ChannelInfoUpdateReq
	(*ChannelStatusDeleteRsp)(nil),           // 80: ChannelStatusDeleteRsp
	(*DoorChnStatRsp)(nil),                   // 81: DoorChnStatRsp
	(*DeviceTagAddReq)(nil),                  // 82: DeviceTagAddReq
	(*InfIdName)(nil),                        // 83: InfIdName
	(*LogoInfoGetListReq)(nil),               // 84: LogoInfoGetListReq
	(*AreaRlQueryReq)(nil),                   // 85: AreaRlQueryReq
	(*EmptyReq)(nil),                         // 86: EmptyReq
	(*ChannelInfoEditReq)(nil),               // 87: ChannelInfoEditReq
	(*ImportDeviceTagChnRspResult)(nil),      // 88: ImportDeviceTagChnRspResult
	(*AreaInfoListResult)(nil),               // 89: AreaInfoListResult
	(*ChannelTreeInfoPage)(nil),              // 90: ChannelTreeInfoPage
	(*ChannelTreeInfoPageResult)(nil),        // 91: ChannelTreeInfoPageResult
	(*DeviceInfoAddRspListResult)(nil),       // 92: DeviceInfoAddRspListResult
	(*DeviceStatusPage)(nil),                 // 93: DeviceStatusPage
	(*DeviceStatusPageResult)(nil),           // 94: DeviceStatusPageResult
	(*ChannelStatusPage)(nil),                // 95: ChannelStatusPage
	(*ChannelStatusPageResult)(nil),          // 96: ChannelStatusPageResult
	(*DeviceTagChnRspPage)(nil),              // 97: DeviceTagChnRspPage
	(*DeviceTagChnRspPageResult)(nil),        // 98: DeviceTagChnRspPageResult
	(*LogoInfoIdResult)(nil),                 // 99: LogoInfoIdResult
	(*AreaTreeInfoPage)(nil),                 // 100: AreaTreeInfoPage
	(*AreaTreeInfoPageResult)(nil),           // 101: AreaTreeInfoPageResult
	(*DeviceTreeInfoPage)(nil),               // 102: DeviceTreeInfoPage
	(*DeviceTreeInfoPageResult)(nil),         // 103: DeviceTreeInfoPageResult
	(*EmptyRspResult)(nil),                   // 104: EmptyRspResult
	(*ChannelStatusDeleteRspListResult)(nil), // 105: ChannelStatusDeleteRspListResult
	(*AreaIdResult)(nil),                     // 106: AreaIdResult
	(*DeviceStatusDeleteRspListResult)(nil),  // 107: DeviceStatusDeleteRspListResult
	(*AreaInfoResult)(nil),                   // 108: AreaInfoResult
	(*ChannelIdResult)(nil),                  // 109: ChannelIdResult
	(*DeviceIdResult)(nil),                   // 110: DeviceIdResult
	(*DeviceInfoPage)(nil),                   // 111: DeviceInfoPage
	(*DeviceInfoPageResult)(nil),             // 112: DeviceInfoPageResult
	(*DeviceTagPage)(nil),                    // 113: DeviceTagPage
	(*DeviceTagPageResult)(nil),              // 114: DeviceTagPageResult
	(*LogoInfoPage)(nil),                     // 115: LogoInfoPage
	(*LogoInfoPageResult)(nil),               // 116: LogoInfoPageResult
	(*DeviceManagedInfoRspPage)(nil),         // 117: DeviceManagedInfoRspPage
	(*DeviceManagedInfoRspPageResult)(nil),   // 118: DeviceManagedInfoRspPageResult
	(*DoorChnStatRspResult)(nil),             // 119: DoorChnStatRspResult
	(*AreaInfoPage)(nil),                     // 120: AreaInfoPage
	(*AreaInfoPageResult)(nil),               // 121: AreaInfoPageResult
	(*ChannelInfoPage)(nil),                  // 122: ChannelInfoPage
	(*ChannelInfoPageResult)(nil),            // 123: ChannelInfoPageResult
	(*DeviceInfoRspResult)(nil),              // 124: DeviceInfoRspResult
	(*DeviceTagIdResult)(nil),                // 125: DeviceTagIdResult
	(*LogoInfoResult)(nil),                   // 126: LogoInfoResult
	(*ChannelInfoRspResult)(nil),             // 127: ChannelInfoRspResult
	(*DeviceDeleteRspListResult)(nil),        // 128: DeviceDeleteRspListResult
	(*ChannelInfoRspListResult)(nil),         // 129: ChannelInfoRspListResult
	(*DeviceTagResult)(nil),                  // 130: DeviceTagResult
}
var file_deviceServer_proto_depIdxs = []int32{
	45,  // 0: AreaTreeInfo.userPermission:type_name -> PermissionVO
	7,   // 1: ChannelStatusDeleteReq.chnIdList:type_name -> ChannelStatusDelete
	45,  // 2: AreaInfo.userPermission:type_name -> PermissionVO
	45,  // 3: ChannelInfoRsp.userPermission:type_name -> PermissionVO
	6,   // 4: ChannelInfoRsp.statusList:type_name -> ChannelStatus
	50,  // 5: ChannelInfoRsp.tagList:type_name -> DeviceTag
	62,  // 6: ChannelInfoRsp.bindChnList:type_name -> ChannelInfo
	35,  // 7: ChannelInfoRsp.readHeadChnList:type_name -> ChannelInfoRsp
	83,  // 8: DeviceInfoRsp.infList:type_name -> InfIdName
	45,  // 9: DeviceInfoRsp.userPermission:type_name -> PermissionVO
	35,  // 10: DeviceInfoRsp.chnList:type_name -> ChannelInfoRsp
	42,  // 11: DeviceInfoRsp.statusList:type_name -> DeviceStatus
	22,  // 12: DeviceInfoRsp.areaList:type_name -> AreaInfo
	45,  // 13: PermissionVO.operationPermissions:type_name -> PermissionVO
	31,  // 14: DeviceInfoAddReq.devList:type_name -> DeviceInfoAdd
	45,  // 15: ChannelTreeInfo.userPermission:type_name -> PermissionVO
	45,  // 16: DeviceInfo.userPermission:type_name -> PermissionVO
	45,  // 17: DeviceTreeInfo.userPermission:type_name -> PermissionVO
	65,  // 18: DeviceStatusDeleteReq.devIdList:type_name -> DeviceStatusDelete
	45,  // 19: ChannelInfo.userPermission:type_name -> PermissionVO
	87,  // 20: DeviceInfoEditReq.chnList:type_name -> ChannelInfoEditReq
	45,  // 21: DeviceManagedInfoRsp.userPermission:type_name -> PermissionVO
	78,  // 22: ImportDeviceTagChnRspResult.data:type_name -> ImportDeviceTagChnRsp
	22,  // 23: AreaInfoListResult.data:type_name -> AreaInfo
	57,  // 24: ChannelTreeInfoPage.list:type_name -> ChannelTreeInfo
	90,  // 25: ChannelTreeInfoPageResult.data:type_name -> ChannelTreeInfoPage
	53,  // 26: DeviceInfoAddRspListResult.data:type_name -> DeviceInfoAddRsp
	42,  // 27: DeviceStatusPage.list:type_name -> DeviceStatus
	93,  // 28: DeviceStatusPageResult.data:type_name -> DeviceStatusPage
	6,   // 29: ChannelStatusPage.list:type_name -> ChannelStatus
	95,  // 30: ChannelStatusPageResult.data:type_name -> ChannelStatusPage
	74,  // 31: DeviceTagChnRspPage.list:type_name -> DeviceTagChnRsp
	97,  // 32: DeviceTagChnRspPageResult.data:type_name -> DeviceTagChnRspPage
	26,  // 33: LogoInfoIdResult.data:type_name -> LogoInfoId
	11,  // 34: AreaTreeInfoPage.list:type_name -> AreaTreeInfo
	100, // 35: AreaTreeInfoPageResult.data:type_name -> AreaTreeInfoPage
	59,  // 36: DeviceTreeInfoPage.list:type_name -> DeviceTreeInfo
	102, // 37: DeviceTreeInfoPageResult.data:type_name -> DeviceTreeInfoPage
	30,  // 38: EmptyRspResult.data:type_name -> EmptyRsp
	80,  // 39: ChannelStatusDeleteRspListResult.data:type_name -> ChannelStatusDeleteRsp
	33,  // 40: AreaIdResult.data:type_name -> AreaId
	32,  // 41: DeviceStatusDeleteRspListResult.data:type_name -> DeviceStatusDeleteRsp
	22,  // 42: AreaInfoResult.data:type_name -> AreaInfo
	46,  // 43: ChannelIdResult.data:type_name -> ChannelId
	69,  // 44: DeviceIdResult.data:type_name -> DeviceId
	58,  // 45: DeviceInfoPage.list:type_name -> DeviceInfo
	111, // 46: DeviceInfoPageResult.data:type_name -> DeviceInfoPage
	50,  // 47: DeviceTagPage.list:type_name -> DeviceTag
	113, // 48: DeviceTagPageResult.data:type_name -> DeviceTagPage
	21,  // 49: LogoInfoPage.list:type_name -> LogoInfo
	115, // 50: LogoInfoPageResult.data:type_name -> LogoInfoPage
	76,  // 51: DeviceManagedInfoRspPage.list:type_name -> DeviceManagedInfoRsp
	117, // 52: DeviceManagedInfoRspPageResult.data:type_name -> DeviceManagedInfoRspPage
	81,  // 53: DoorChnStatRspResult.data:type_name -> DoorChnStatRsp
	22,  // 54: AreaInfoPage.list:type_name -> AreaInfo
	120, // 55: AreaInfoPageResult.data:type_name -> AreaInfoPage
	62,  // 56: ChannelInfoPage.list:type_name -> ChannelInfo
	122, // 57: ChannelInfoPageResult.data:type_name -> ChannelInfoPage
	36,  // 58: DeviceInfoRspResult.data:type_name -> DeviceInfoRsp
	73,  // 59: DeviceTagIdResult.data:type_name -> DeviceTagId
	21,  // 60: LogoInfoResult.data:type_name -> LogoInfo
	35,  // 61: ChannelInfoRspResult.data:type_name -> ChannelInfoRsp
	25,  // 62: DeviceDeleteRspListResult.data:type_name -> DeviceDeleteRsp
	35,  // 63: ChannelInfoRspListResult.data:type_name -> ChannelInfoRsp
	50,  // 64: DeviceTagResult.data:type_name -> DeviceTag
	66,  // 65: DeviceServer.PutLogo:input_type -> LogoInfoUpdateReq
	26,  // 66: DeviceServer.DeleteLogo:input_type -> LogoInfoId
	10,  // 67: DeviceServer.GetLogoInfo:input_type -> LogoInfoPrjTypeReq
	44,  // 68: DeviceServer.AddLogo:input_type -> LogoInfoAddReq
	84,  // 69: DeviceServer.GetLogoList:input_type -> LogoInfoGetListReq
	39,  // 70: DeviceServer.GetAreaTreeInfoList:input_type -> AreaInfoQueryReq
	39,  // 71: DeviceServer.GetAreaInfoList:input_type -> AreaInfoQueryReq
	23,  // 72: DeviceServer.GetAreaInfo:input_type -> AreaInfoQueryByIdReq
	40,  // 73: DeviceServer.DeleteArea:input_type -> AreaInfoDelReq
	51,  // 74: DeviceServer.MoveArea:input_type -> AreaMoveReq
	4,   // 75: DeviceServer.AddArea:input_type -> AreaInfoAddReq
	34,  // 76: DeviceServer.UpdateArea:input_type -> AreaInfoUpdateReq
	23,  // 77: DeviceServer.GetAreaInfoAncestor:input_type -> AreaInfoQueryByIdReq
	5,   // 78: DeviceServer.GetAreaChannelInfoList:input_type -> AreaChannelListReq
	79,  // 79: DeviceServer.PostChannelInfo:input_type -> ChannelInfoUpdateReq
	79,  // 80: DeviceServer.PutChannelInfo:input_type -> ChannelInfoUpdateReq
	27,  // 81: DeviceServer.GetChannelInfo:input_type -> ChannelGetReq
	28,  // 82: DeviceServer.DeleteChannelInfo:input_type -> ChannelDeleteReq
	68,  // 83: DeviceServer.GetChannelTreeInfoList:input_type -> ChannelTreeReq
	17,  // 84: DeviceServer.GetInfChannelInfoList:input_type -> InfChannelListReq
	41,  // 85: DeviceServer.MulCheckDoorOpenSet:input_type -> MulCheckDoorOpenReq
	24,  // 86: DeviceServer.GetChannelInfoList:input_type -> ChannelListReq
	75,  // 87: DeviceServer.UpdateChannelStatus:input_type -> ChannelStatusUpdateReq
	19,  // 88: DeviceServer.DeleteChannelStatus:input_type -> ChannelStatusDeleteReq
	1,   // 89: DeviceServer.PutDevice:input_type -> DeviceInfoUpdateReq
	63,  // 90: DeviceServer.DeleteDevice:input_type -> DeviceDeleteReq
	70,  // 91: DeviceServer.GetInfDeviceInfoList:input_type -> InfDeviceListReq
	2,   // 92: DeviceServer.GetDeviceInfoList:input_type -> DeviceListReq
	71,  // 93: DeviceServer.EditDevice:input_type -> DeviceInfoEditReq
	54,  // 94: DeviceServer.GetManagedDeviceList:input_type -> DeviceManagedReq
	77,  // 95: DeviceServer.GetAreaDeviceInfoList:input_type -> AreaDeviceListReq
	48,  // 96: DeviceServer.GetDeviceDetail:input_type -> DeviceGetReq
	49,  // 97: DeviceServer.GetEditDevice:input_type -> DeviceEditReq
	8,   // 98: DeviceServer.GetDeviceTreeInfoList:input_type -> DeviceTreeReq
	52,  // 99: DeviceServer.PostDevice:input_type -> DeviceInfoAddReq
	64,  // 100: DeviceServer.GetDeviceStatusListByDevId:input_type -> DeviceStatusQueryByIdReq
	60,  // 101: DeviceServer.UpdateDeviceStatus:input_type -> DeviceStatusUpdateReq
	61,  // 102: DeviceServer.DeleteDeviceStatus:input_type -> DeviceStatusDeleteReq
	86,  // 103: DeviceServer.GetChnDoorStatisticsList:input_type -> EmptyReq
	3,   // 104: DeviceServer.GetDeviceStatusList:input_type -> DeviceStatusQueryListReq
	13,  // 105: DeviceServer.GetChannelStatusListByChnId:input_type -> ChannelStatusGetByIdReq
	0,   // 106: DeviceServer.GetChnDoorStatusList:input_type -> DoorStatusListReq
	47,  // 107: DeviceServer.GetChannelStatusList:input_type -> ChannelStatusGetListReq
	38,  // 108: DeviceServer.RemoveDeviceTagChn:input_type -> RemoveDeviceTagChnReq
	56,  // 109: DeviceServer.GetDeviceTagChnList:input_type -> DeviceTagChnReq
	15,  // 110: DeviceServer.ImportDeviceTagChn:input_type -> ImportDeviceTagChnReq
	18,  // 111: DeviceServer.GetDeviceTagList:input_type -> DeviceTagQueryReq
	14,  // 112: DeviceServer.MoveDeviceTag:input_type -> DeviceTagMoveReq
	55,  // 113: DeviceServer.DeleteDeviceTag:input_type -> DeviceTagDeleteReq
	82,  // 114: DeviceServer.PostDeviceTag:input_type -> DeviceTagAddReq
	72,  // 115: DeviceServer.PutDeviceTag:input_type -> DeviceTagUpdateReq
	37,  // 116: DeviceServer.GetDeviceTag:input_type -> DeviceTagQueryByIdReq
	99,  // 117: DeviceServer.PutLogo:output_type -> LogoInfoIdResult
	99,  // 118: DeviceServer.DeleteLogo:output_type -> LogoInfoIdResult
	126, // 119: DeviceServer.GetLogoInfo:output_type -> LogoInfoResult
	99,  // 120: DeviceServer.AddLogo:output_type -> LogoInfoIdResult
	116, // 121: DeviceServer.GetLogoList:output_type -> LogoInfoPageResult
	101, // 122: DeviceServer.GetAreaTreeInfoList:output_type -> AreaTreeInfoPageResult
	121, // 123: DeviceServer.GetAreaInfoList:output_type -> AreaInfoPageResult
	108, // 124: DeviceServer.GetAreaInfo:output_type -> AreaInfoResult
	104, // 125: DeviceServer.DeleteArea:output_type -> EmptyRspResult
	106, // 126: DeviceServer.MoveArea:output_type -> AreaIdResult
	106, // 127: DeviceServer.AddArea:output_type -> AreaIdResult
	106, // 128: DeviceServer.UpdateArea:output_type -> AreaIdResult
	89,  // 129: DeviceServer.GetAreaInfoAncestor:output_type -> AreaInfoListResult
	123, // 130: DeviceServer.GetAreaChannelInfoList:output_type -> ChannelInfoPageResult
	109, // 131: DeviceServer.PostChannelInfo:output_type -> ChannelIdResult
	109, // 132: DeviceServer.PutChannelInfo:output_type -> ChannelIdResult
	127, // 133: DeviceServer.GetChannelInfo:output_type -> ChannelInfoRspResult
	104, // 134: DeviceServer.DeleteChannelInfo:output_type -> EmptyRspResult
	91,  // 135: DeviceServer.GetChannelTreeInfoList:output_type -> ChannelTreeInfoPageResult
	123, // 136: DeviceServer.GetInfChannelInfoList:output_type -> ChannelInfoPageResult
	109, // 137: DeviceServer.MulCheckDoorOpenSet:output_type -> ChannelIdResult
	123, // 138: DeviceServer.GetChannelInfoList:output_type -> ChannelInfoPageResult
	104, // 139: DeviceServer.UpdateChannelStatus:output_type -> EmptyRspResult
	105, // 140: DeviceServer.DeleteChannelStatus:output_type -> ChannelStatusDeleteRspListResult
	110, // 141: DeviceServer.PutDevice:output_type -> DeviceIdResult
	128, // 142: DeviceServer.DeleteDevice:output_type -> DeviceDeleteRspListResult
	112, // 143: DeviceServer.GetInfDeviceInfoList:output_type -> DeviceInfoPageResult
	112, // 144: DeviceServer.GetDeviceInfoList:output_type -> DeviceInfoPageResult
	110, // 145: DeviceServer.EditDevice:output_type -> DeviceIdResult
	118, // 146: DeviceServer.GetManagedDeviceList:output_type -> DeviceManagedInfoRspPageResult
	112, // 147: DeviceServer.GetAreaDeviceInfoList:output_type -> DeviceInfoPageResult
	124, // 148: DeviceServer.GetDeviceDetail:output_type -> DeviceInfoRspResult
	124, // 149: DeviceServer.GetEditDevice:output_type -> DeviceInfoRspResult
	103, // 150: DeviceServer.GetDeviceTreeInfoList:output_type -> DeviceTreeInfoPageResult
	92,  // 151: DeviceServer.PostDevice:output_type -> DeviceInfoAddRspListResult
	94,  // 152: DeviceServer.GetDeviceStatusListByDevId:output_type -> DeviceStatusPageResult
	104, // 153: DeviceServer.UpdateDeviceStatus:output_type -> EmptyRspResult
	107, // 154: DeviceServer.DeleteDeviceStatus:output_type -> DeviceStatusDeleteRspListResult
	119, // 155: DeviceServer.GetChnDoorStatisticsList:output_type -> DoorChnStatRspResult
	94,  // 156: DeviceServer.GetDeviceStatusList:output_type -> DeviceStatusPageResult
	96,  // 157: DeviceServer.GetChannelStatusListByChnId:output_type -> ChannelStatusPageResult
	129, // 158: DeviceServer.GetChnDoorStatusList:output_type -> ChannelInfoRspListResult
	96,  // 159: DeviceServer.GetChannelStatusList:output_type -> ChannelStatusPageResult
	104, // 160: DeviceServer.RemoveDeviceTagChn:output_type -> EmptyRspResult
	98,  // 161: DeviceServer.GetDeviceTagChnList:output_type -> DeviceTagChnRspPageResult
	88,  // 162: DeviceServer.ImportDeviceTagChn:output_type -> ImportDeviceTagChnRspResult
	114, // 163: DeviceServer.GetDeviceTagList:output_type -> DeviceTagPageResult
	104, // 164: DeviceServer.MoveDeviceTag:output_type -> EmptyRspResult
	125, // 165: DeviceServer.DeleteDeviceTag:output_type -> DeviceTagIdResult
	125, // 166: DeviceServer.PostDeviceTag:output_type -> DeviceTagIdResult
	125, // 167: DeviceServer.PutDeviceTag:output_type -> DeviceTagIdResult
	130, // 168: DeviceServer.GetDeviceTag:output_type -> DeviceTagResult
	117, // [117:169] is the sub-list for method output_type
	65,  // [65:117] is the sub-list for method input_type
	65,  // [65:65] is the sub-list for extension type_name
	65,  // [65:65] is the sub-list for extension extendee
	0,   // [0:65] is the sub-list for field type_name
}

func init() { file_deviceServer_proto_init() }
func file_deviceServer_proto_init() {
	if File_deviceServer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_deviceServer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoorStatusListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStatusQueryListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaInfoAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaChannelListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStatusDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTreeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceAreaRl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoInfoPrjTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaTreeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStatusListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStatusGetByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagMoveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportDeviceTagChnReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelBindRl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfChannelListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStatusDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaInfoQueryByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDeleteRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoInfoId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelGetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfRl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStatusDeleteRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaInfoUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagQueryByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDeviceTagChnReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaInfoQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaInfoDelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MulCheckDoorOpenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagMove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoInfoAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionVO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStatusGetListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceGetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceEditReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaMoveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoAddRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceManagedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagChnReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelTreeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTreeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStatusUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStatusDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStatusQueryByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStatusDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoInfoUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaRl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelTreeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfDeviceListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoEditReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagChnRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStatusUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceManagedInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaDeviceListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportDeviceTagChnRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInfoUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStatusDeleteRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoorChnStatRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfIdName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoInfoGetListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaRlQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInfoEditReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportDeviceTagChnRspResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaInfoListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelTreeInfoPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelTreeInfoPageResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoAddRspListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStatusPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStatusPageResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStatusPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStatusPageResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagChnRspPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagChnRspPageResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoInfoIdResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaTreeInfoPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaTreeInfoPageResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTreeInfoPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTreeInfoPageResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRspResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStatusDeleteRspListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaIdResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStatusDeleteRspListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelIdResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceIdResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoPageResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagPageResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoInfoPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoInfoPageResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceManagedInfoRspPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceManagedInfoRspPageResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoorChnStatRspResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaInfoPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaInfoPageResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInfoPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInfoPageResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoRspResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagIdResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInfoRspResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDeleteRspListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInfoRspListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceServer_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_deviceServer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   131,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_deviceServer_proto_goTypes,
		DependencyIndexes: file_deviceServer_proto_depIdxs,
		MessageInfos:      file_deviceServer_proto_msgTypes,
	}.Build()
	File_deviceServer_proto = out.File
	file_deviceServer_proto_rawDesc = nil
	file_deviceServer_proto_goTypes = nil
	file_deviceServer_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeviceServerClient is the client API for DeviceServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceServerClient interface {
	PutLogo(ctx context.Context, in *LogoInfoUpdateReq, opts ...grpc.CallOption) (*LogoInfoIdResult, error)
	DeleteLogo(ctx context.Context, in *LogoInfoId, opts ...grpc.CallOption) (*LogoInfoIdResult, error)
	GetLogoInfo(ctx context.Context, in *LogoInfoPrjTypeReq, opts ...grpc.CallOption) (*LogoInfoResult, error)
	AddLogo(ctx context.Context, in *LogoInfoAddReq, opts ...grpc.CallOption) (*LogoInfoIdResult, error)
	GetLogoList(ctx context.Context, in *LogoInfoGetListReq, opts ...grpc.CallOption) (*LogoInfoPageResult, error)
	GetAreaTreeInfoList(ctx context.Context, in *AreaInfoQueryReq, opts ...grpc.CallOption) (*AreaTreeInfoPageResult, error)
	GetAreaInfoList(ctx context.Context, in *AreaInfoQueryReq, opts ...grpc.CallOption) (*AreaInfoPageResult, error)
	GetAreaInfo(ctx context.Context, in *AreaInfoQueryByIdReq, opts ...grpc.CallOption) (*AreaInfoResult, error)
	DeleteArea(ctx context.Context, in *AreaInfoDelReq, opts ...grpc.CallOption) (*EmptyRspResult, error)
	MoveArea(ctx context.Context, in *AreaMoveReq, opts ...grpc.CallOption) (*AreaIdResult, error)
	AddArea(ctx context.Context, in *AreaInfoAddReq, opts ...grpc.CallOption) (*AreaIdResult, error)
	UpdateArea(ctx context.Context, in *AreaInfoUpdateReq, opts ...grpc.CallOption) (*AreaIdResult, error)
	GetAreaInfoAncestor(ctx context.Context, in *AreaInfoQueryByIdReq, opts ...grpc.CallOption) (*AreaInfoListResult, error)
	GetAreaChannelInfoList(ctx context.Context, in *AreaChannelListReq, opts ...grpc.CallOption) (*ChannelInfoPageResult, error)
	PostChannelInfo(ctx context.Context, in *ChannelInfoUpdateReq, opts ...grpc.CallOption) (*ChannelIdResult, error)
	PutChannelInfo(ctx context.Context, in *ChannelInfoUpdateReq, opts ...grpc.CallOption) (*ChannelIdResult, error)
	GetChannelInfo(ctx context.Context, in *ChannelGetReq, opts ...grpc.CallOption) (*ChannelInfoRspResult, error)
	DeleteChannelInfo(ctx context.Context, in *ChannelDeleteReq, opts ...grpc.CallOption) (*EmptyRspResult, error)
	GetChannelTreeInfoList(ctx context.Context, in *ChannelTreeReq, opts ...grpc.CallOption) (*ChannelTreeInfoPageResult, error)
	GetInfChannelInfoList(ctx context.Context, in *InfChannelListReq, opts ...grpc.CallOption) (*ChannelInfoPageResult, error)
	MulCheckDoorOpenSet(ctx context.Context, in *MulCheckDoorOpenReq, opts ...grpc.CallOption) (*ChannelIdResult, error)
	GetChannelInfoList(ctx context.Context, in *ChannelListReq, opts ...grpc.CallOption) (*ChannelInfoPageResult, error)
	UpdateChannelStatus(ctx context.Context, in *ChannelStatusUpdateReq, opts ...grpc.CallOption) (*EmptyRspResult, error)
	DeleteChannelStatus(ctx context.Context, in *ChannelStatusDeleteReq, opts ...grpc.CallOption) (*ChannelStatusDeleteRspListResult, error)
	PutDevice(ctx context.Context, in *DeviceInfoUpdateReq, opts ...grpc.CallOption) (*DeviceIdResult, error)
	DeleteDevice(ctx context.Context, in *DeviceDeleteReq, opts ...grpc.CallOption) (*DeviceDeleteRspListResult, error)
	GetInfDeviceInfoList(ctx context.Context, in *InfDeviceListReq, opts ...grpc.CallOption) (*DeviceInfoPageResult, error)
	GetDeviceInfoList(ctx context.Context, in *DeviceListReq, opts ...grpc.CallOption) (*DeviceInfoPageResult, error)
	EditDevice(ctx context.Context, in *DeviceInfoEditReq, opts ...grpc.CallOption) (*DeviceIdResult, error)
	GetManagedDeviceList(ctx context.Context, in *DeviceManagedReq, opts ...grpc.CallOption) (*DeviceManagedInfoRspPageResult, error)
	GetAreaDeviceInfoList(ctx context.Context, in *AreaDeviceListReq, opts ...grpc.CallOption) (*DeviceInfoPageResult, error)
	GetDeviceDetail(ctx context.Context, in *DeviceGetReq, opts ...grpc.CallOption) (*DeviceInfoRspResult, error)
	GetEditDevice(ctx context.Context, in *DeviceEditReq, opts ...grpc.CallOption) (*DeviceInfoRspResult, error)
	GetDeviceTreeInfoList(ctx context.Context, in *DeviceTreeReq, opts ...grpc.CallOption) (*DeviceTreeInfoPageResult, error)
	PostDevice(ctx context.Context, in *DeviceInfoAddReq, opts ...grpc.CallOption) (*DeviceInfoAddRspListResult, error)
	GetDeviceStatusListByDevId(ctx context.Context, in *DeviceStatusQueryByIdReq, opts ...grpc.CallOption) (*DeviceStatusPageResult, error)
	UpdateDeviceStatus(ctx context.Context, in *DeviceStatusUpdateReq, opts ...grpc.CallOption) (*EmptyRspResult, error)
	DeleteDeviceStatus(ctx context.Context, in *DeviceStatusDeleteReq, opts ...grpc.CallOption) (*DeviceStatusDeleteRspListResult, error)
	GetChnDoorStatisticsList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*DoorChnStatRspResult, error)
	GetDeviceStatusList(ctx context.Context, in *DeviceStatusQueryListReq, opts ...grpc.CallOption) (*DeviceStatusPageResult, error)
	GetChannelStatusListByChnId(ctx context.Context, in *ChannelStatusGetByIdReq, opts ...grpc.CallOption) (*ChannelStatusPageResult, error)
	GetChnDoorStatusList(ctx context.Context, in *DoorStatusListReq, opts ...grpc.CallOption) (*ChannelInfoRspListResult, error)
	GetChannelStatusList(ctx context.Context, in *ChannelStatusGetListReq, opts ...grpc.CallOption) (*ChannelStatusPageResult, error)
	RemoveDeviceTagChn(ctx context.Context, in *RemoveDeviceTagChnReq, opts ...grpc.CallOption) (*EmptyRspResult, error)
	GetDeviceTagChnList(ctx context.Context, in *DeviceTagChnReq, opts ...grpc.CallOption) (*DeviceTagChnRspPageResult, error)
	ImportDeviceTagChn(ctx context.Context, in *ImportDeviceTagChnReq, opts ...grpc.CallOption) (*ImportDeviceTagChnRspResult, error)
	GetDeviceTagList(ctx context.Context, in *DeviceTagQueryReq, opts ...grpc.CallOption) (*DeviceTagPageResult, error)
	MoveDeviceTag(ctx context.Context, in *DeviceTagMoveReq, opts ...grpc.CallOption) (*EmptyRspResult, error)
	DeleteDeviceTag(ctx context.Context, in *DeviceTagDeleteReq, opts ...grpc.CallOption) (*DeviceTagIdResult, error)
	PostDeviceTag(ctx context.Context, in *DeviceTagAddReq, opts ...grpc.CallOption) (*DeviceTagIdResult, error)
	PutDeviceTag(ctx context.Context, in *DeviceTagUpdateReq, opts ...grpc.CallOption) (*DeviceTagIdResult, error)
	GetDeviceTag(ctx context.Context, in *DeviceTagQueryByIdReq, opts ...grpc.CallOption) (*DeviceTagResult, error)
}

type deviceServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServerClient(cc grpc.ClientConnInterface) DeviceServerClient {
	return &deviceServerClient{cc}
}

func (c *deviceServerClient) PutLogo(ctx context.Context, in *LogoInfoUpdateReq, opts ...grpc.CallOption) (*LogoInfoIdResult, error) {
	out := new(LogoInfoIdResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/PutLogo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) DeleteLogo(ctx context.Context, in *LogoInfoId, opts ...grpc.CallOption) (*LogoInfoIdResult, error) {
	out := new(LogoInfoIdResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/DeleteLogo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetLogoInfo(ctx context.Context, in *LogoInfoPrjTypeReq, opts ...grpc.CallOption) (*LogoInfoResult, error) {
	out := new(LogoInfoResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetLogoInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) AddLogo(ctx context.Context, in *LogoInfoAddReq, opts ...grpc.CallOption) (*LogoInfoIdResult, error) {
	out := new(LogoInfoIdResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/AddLogo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetLogoList(ctx context.Context, in *LogoInfoGetListReq, opts ...grpc.CallOption) (*LogoInfoPageResult, error) {
	out := new(LogoInfoPageResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetLogoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetAreaTreeInfoList(ctx context.Context, in *AreaInfoQueryReq, opts ...grpc.CallOption) (*AreaTreeInfoPageResult, error) {
	out := new(AreaTreeInfoPageResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetAreaTreeInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetAreaInfoList(ctx context.Context, in *AreaInfoQueryReq, opts ...grpc.CallOption) (*AreaInfoPageResult, error) {
	out := new(AreaInfoPageResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetAreaInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetAreaInfo(ctx context.Context, in *AreaInfoQueryByIdReq, opts ...grpc.CallOption) (*AreaInfoResult, error) {
	out := new(AreaInfoResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetAreaInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) DeleteArea(ctx context.Context, in *AreaInfoDelReq, opts ...grpc.CallOption) (*EmptyRspResult, error) {
	out := new(EmptyRspResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/DeleteArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) MoveArea(ctx context.Context, in *AreaMoveReq, opts ...grpc.CallOption) (*AreaIdResult, error) {
	out := new(AreaIdResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/MoveArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) AddArea(ctx context.Context, in *AreaInfoAddReq, opts ...grpc.CallOption) (*AreaIdResult, error) {
	out := new(AreaIdResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/AddArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) UpdateArea(ctx context.Context, in *AreaInfoUpdateReq, opts ...grpc.CallOption) (*AreaIdResult, error) {
	out := new(AreaIdResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/UpdateArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetAreaInfoAncestor(ctx context.Context, in *AreaInfoQueryByIdReq, opts ...grpc.CallOption) (*AreaInfoListResult, error) {
	out := new(AreaInfoListResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetAreaInfoAncestor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetAreaChannelInfoList(ctx context.Context, in *AreaChannelListReq, opts ...grpc.CallOption) (*ChannelInfoPageResult, error) {
	out := new(ChannelInfoPageResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetAreaChannelInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) PostChannelInfo(ctx context.Context, in *ChannelInfoUpdateReq, opts ...grpc.CallOption) (*ChannelIdResult, error) {
	out := new(ChannelIdResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/PostChannelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) PutChannelInfo(ctx context.Context, in *ChannelInfoUpdateReq, opts ...grpc.CallOption) (*ChannelIdResult, error) {
	out := new(ChannelIdResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/PutChannelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetChannelInfo(ctx context.Context, in *ChannelGetReq, opts ...grpc.CallOption) (*ChannelInfoRspResult, error) {
	out := new(ChannelInfoRspResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetChannelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) DeleteChannelInfo(ctx context.Context, in *ChannelDeleteReq, opts ...grpc.CallOption) (*EmptyRspResult, error) {
	out := new(EmptyRspResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/DeleteChannelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetChannelTreeInfoList(ctx context.Context, in *ChannelTreeReq, opts ...grpc.CallOption) (*ChannelTreeInfoPageResult, error) {
	out := new(ChannelTreeInfoPageResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetChannelTreeInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetInfChannelInfoList(ctx context.Context, in *InfChannelListReq, opts ...grpc.CallOption) (*ChannelInfoPageResult, error) {
	out := new(ChannelInfoPageResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetInfChannelInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) MulCheckDoorOpenSet(ctx context.Context, in *MulCheckDoorOpenReq, opts ...grpc.CallOption) (*ChannelIdResult, error) {
	out := new(ChannelIdResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/MulCheckDoorOpenSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetChannelInfoList(ctx context.Context, in *ChannelListReq, opts ...grpc.CallOption) (*ChannelInfoPageResult, error) {
	out := new(ChannelInfoPageResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetChannelInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) UpdateChannelStatus(ctx context.Context, in *ChannelStatusUpdateReq, opts ...grpc.CallOption) (*EmptyRspResult, error) {
	out := new(EmptyRspResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/UpdateChannelStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) DeleteChannelStatus(ctx context.Context, in *ChannelStatusDeleteReq, opts ...grpc.CallOption) (*ChannelStatusDeleteRspListResult, error) {
	out := new(ChannelStatusDeleteRspListResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/DeleteChannelStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) PutDevice(ctx context.Context, in *DeviceInfoUpdateReq, opts ...grpc.CallOption) (*DeviceIdResult, error) {
	out := new(DeviceIdResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/PutDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) DeleteDevice(ctx context.Context, in *DeviceDeleteReq, opts ...grpc.CallOption) (*DeviceDeleteRspListResult, error) {
	out := new(DeviceDeleteRspListResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetInfDeviceInfoList(ctx context.Context, in *InfDeviceListReq, opts ...grpc.CallOption) (*DeviceInfoPageResult, error) {
	out := new(DeviceInfoPageResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetInfDeviceInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetDeviceInfoList(ctx context.Context, in *DeviceListReq, opts ...grpc.CallOption) (*DeviceInfoPageResult, error) {
	out := new(DeviceInfoPageResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetDeviceInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) EditDevice(ctx context.Context, in *DeviceInfoEditReq, opts ...grpc.CallOption) (*DeviceIdResult, error) {
	out := new(DeviceIdResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/EditDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetManagedDeviceList(ctx context.Context, in *DeviceManagedReq, opts ...grpc.CallOption) (*DeviceManagedInfoRspPageResult, error) {
	out := new(DeviceManagedInfoRspPageResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetManagedDeviceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetAreaDeviceInfoList(ctx context.Context, in *AreaDeviceListReq, opts ...grpc.CallOption) (*DeviceInfoPageResult, error) {
	out := new(DeviceInfoPageResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetAreaDeviceInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetDeviceDetail(ctx context.Context, in *DeviceGetReq, opts ...grpc.CallOption) (*DeviceInfoRspResult, error) {
	out := new(DeviceInfoRspResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetDeviceDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetEditDevice(ctx context.Context, in *DeviceEditReq, opts ...grpc.CallOption) (*DeviceInfoRspResult, error) {
	out := new(DeviceInfoRspResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetEditDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetDeviceTreeInfoList(ctx context.Context, in *DeviceTreeReq, opts ...grpc.CallOption) (*DeviceTreeInfoPageResult, error) {
	out := new(DeviceTreeInfoPageResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetDeviceTreeInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) PostDevice(ctx context.Context, in *DeviceInfoAddReq, opts ...grpc.CallOption) (*DeviceInfoAddRspListResult, error) {
	out := new(DeviceInfoAddRspListResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/PostDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetDeviceStatusListByDevId(ctx context.Context, in *DeviceStatusQueryByIdReq, opts ...grpc.CallOption) (*DeviceStatusPageResult, error) {
	out := new(DeviceStatusPageResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetDeviceStatusListByDevId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) UpdateDeviceStatus(ctx context.Context, in *DeviceStatusUpdateReq, opts ...grpc.CallOption) (*EmptyRspResult, error) {
	out := new(EmptyRspResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/UpdateDeviceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) DeleteDeviceStatus(ctx context.Context, in *DeviceStatusDeleteReq, opts ...grpc.CallOption) (*DeviceStatusDeleteRspListResult, error) {
	out := new(DeviceStatusDeleteRspListResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/DeleteDeviceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetChnDoorStatisticsList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*DoorChnStatRspResult, error) {
	out := new(DoorChnStatRspResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetChnDoorStatisticsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetDeviceStatusList(ctx context.Context, in *DeviceStatusQueryListReq, opts ...grpc.CallOption) (*DeviceStatusPageResult, error) {
	out := new(DeviceStatusPageResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetDeviceStatusList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetChannelStatusListByChnId(ctx context.Context, in *ChannelStatusGetByIdReq, opts ...grpc.CallOption) (*ChannelStatusPageResult, error) {
	out := new(ChannelStatusPageResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetChannelStatusListByChnId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetChnDoorStatusList(ctx context.Context, in *DoorStatusListReq, opts ...grpc.CallOption) (*ChannelInfoRspListResult, error) {
	out := new(ChannelInfoRspListResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetChnDoorStatusList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetChannelStatusList(ctx context.Context, in *ChannelStatusGetListReq, opts ...grpc.CallOption) (*ChannelStatusPageResult, error) {
	out := new(ChannelStatusPageResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetChannelStatusList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) RemoveDeviceTagChn(ctx context.Context, in *RemoveDeviceTagChnReq, opts ...grpc.CallOption) (*EmptyRspResult, error) {
	out := new(EmptyRspResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/RemoveDeviceTagChn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetDeviceTagChnList(ctx context.Context, in *DeviceTagChnReq, opts ...grpc.CallOption) (*DeviceTagChnRspPageResult, error) {
	out := new(DeviceTagChnRspPageResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetDeviceTagChnList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) ImportDeviceTagChn(ctx context.Context, in *ImportDeviceTagChnReq, opts ...grpc.CallOption) (*ImportDeviceTagChnRspResult, error) {
	out := new(ImportDeviceTagChnRspResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/ImportDeviceTagChn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetDeviceTagList(ctx context.Context, in *DeviceTagQueryReq, opts ...grpc.CallOption) (*DeviceTagPageResult, error) {
	out := new(DeviceTagPageResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetDeviceTagList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) MoveDeviceTag(ctx context.Context, in *DeviceTagMoveReq, opts ...grpc.CallOption) (*EmptyRspResult, error) {
	out := new(EmptyRspResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/MoveDeviceTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) DeleteDeviceTag(ctx context.Context, in *DeviceTagDeleteReq, opts ...grpc.CallOption) (*DeviceTagIdResult, error) {
	out := new(DeviceTagIdResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/DeleteDeviceTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) PostDeviceTag(ctx context.Context, in *DeviceTagAddReq, opts ...grpc.CallOption) (*DeviceTagIdResult, error) {
	out := new(DeviceTagIdResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/PostDeviceTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) PutDeviceTag(ctx context.Context, in *DeviceTagUpdateReq, opts ...grpc.CallOption) (*DeviceTagIdResult, error) {
	out := new(DeviceTagIdResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/PutDeviceTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) GetDeviceTag(ctx context.Context, in *DeviceTagQueryByIdReq, opts ...grpc.CallOption) (*DeviceTagResult, error) {
	out := new(DeviceTagResult)
	err := c.cc.Invoke(ctx, "/DeviceServer/GetDeviceTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServerServer is the server API for DeviceServer service.
type DeviceServerServer interface {
	PutLogo(context.Context, *LogoInfoUpdateReq) (*LogoInfoIdResult, error)
	DeleteLogo(context.Context, *LogoInfoId) (*LogoInfoIdResult, error)
	GetLogoInfo(context.Context, *LogoInfoPrjTypeReq) (*LogoInfoResult, error)
	AddLogo(context.Context, *LogoInfoAddReq) (*LogoInfoIdResult, error)
	GetLogoList(context.Context, *LogoInfoGetListReq) (*LogoInfoPageResult, error)
	GetAreaTreeInfoList(context.Context, *AreaInfoQueryReq) (*AreaTreeInfoPageResult, error)
	GetAreaInfoList(context.Context, *AreaInfoQueryReq) (*AreaInfoPageResult, error)
	GetAreaInfo(context.Context, *AreaInfoQueryByIdReq) (*AreaInfoResult, error)
	DeleteArea(context.Context, *AreaInfoDelReq) (*EmptyRspResult, error)
	MoveArea(context.Context, *AreaMoveReq) (*AreaIdResult, error)
	AddArea(context.Context, *AreaInfoAddReq) (*AreaIdResult, error)
	UpdateArea(context.Context, *AreaInfoUpdateReq) (*AreaIdResult, error)
	GetAreaInfoAncestor(context.Context, *AreaInfoQueryByIdReq) (*AreaInfoListResult, error)
	GetAreaChannelInfoList(context.Context, *AreaChannelListReq) (*ChannelInfoPageResult, error)
	PostChannelInfo(context.Context, *ChannelInfoUpdateReq) (*ChannelIdResult, error)
	PutChannelInfo(context.Context, *ChannelInfoUpdateReq) (*ChannelIdResult, error)
	GetChannelInfo(context.Context, *ChannelGetReq) (*ChannelInfoRspResult, error)
	DeleteChannelInfo(context.Context, *ChannelDeleteReq) (*EmptyRspResult, error)
	GetChannelTreeInfoList(context.Context, *ChannelTreeReq) (*ChannelTreeInfoPageResult, error)
	GetInfChannelInfoList(context.Context, *InfChannelListReq) (*ChannelInfoPageResult, error)
	MulCheckDoorOpenSet(context.Context, *MulCheckDoorOpenReq) (*ChannelIdResult, error)
	GetChannelInfoList(context.Context, *ChannelListReq) (*ChannelInfoPageResult, error)
	UpdateChannelStatus(context.Context, *ChannelStatusUpdateReq) (*EmptyRspResult, error)
	DeleteChannelStatus(context.Context, *ChannelStatusDeleteReq) (*ChannelStatusDeleteRspListResult, error)
	PutDevice(context.Context, *DeviceInfoUpdateReq) (*DeviceIdResult, error)
	DeleteDevice(context.Context, *DeviceDeleteReq) (*DeviceDeleteRspListResult, error)
	GetInfDeviceInfoList(context.Context, *InfDeviceListReq) (*DeviceInfoPageResult, error)
	GetDeviceInfoList(context.Context, *DeviceListReq) (*DeviceInfoPageResult, error)
	EditDevice(context.Context, *DeviceInfoEditReq) (*DeviceIdResult, error)
	GetManagedDeviceList(context.Context, *DeviceManagedReq) (*DeviceManagedInfoRspPageResult, error)
	GetAreaDeviceInfoList(context.Context, *AreaDeviceListReq) (*DeviceInfoPageResult, error)
	GetDeviceDetail(context.Context, *DeviceGetReq) (*DeviceInfoRspResult, error)
	GetEditDevice(context.Context, *DeviceEditReq) (*DeviceInfoRspResult, error)
	GetDeviceTreeInfoList(context.Context, *DeviceTreeReq) (*DeviceTreeInfoPageResult, error)
	PostDevice(context.Context, *DeviceInfoAddReq) (*DeviceInfoAddRspListResult, error)
	GetDeviceStatusListByDevId(context.Context, *DeviceStatusQueryByIdReq) (*DeviceStatusPageResult, error)
	UpdateDeviceStatus(context.Context, *DeviceStatusUpdateReq) (*EmptyRspResult, error)
	DeleteDeviceStatus(context.Context, *DeviceStatusDeleteReq) (*DeviceStatusDeleteRspListResult, error)
	GetChnDoorStatisticsList(context.Context, *EmptyReq) (*DoorChnStatRspResult, error)
	GetDeviceStatusList(context.Context, *DeviceStatusQueryListReq) (*DeviceStatusPageResult, error)
	GetChannelStatusListByChnId(context.Context, *ChannelStatusGetByIdReq) (*ChannelStatusPageResult, error)
	GetChnDoorStatusList(context.Context, *DoorStatusListReq) (*ChannelInfoRspListResult, error)
	GetChannelStatusList(context.Context, *ChannelStatusGetListReq) (*ChannelStatusPageResult, error)
	RemoveDeviceTagChn(context.Context, *RemoveDeviceTagChnReq) (*EmptyRspResult, error)
	GetDeviceTagChnList(context.Context, *DeviceTagChnReq) (*DeviceTagChnRspPageResult, error)
	ImportDeviceTagChn(context.Context, *ImportDeviceTagChnReq) (*ImportDeviceTagChnRspResult, error)
	GetDeviceTagList(context.Context, *DeviceTagQueryReq) (*DeviceTagPageResult, error)
	MoveDeviceTag(context.Context, *DeviceTagMoveReq) (*EmptyRspResult, error)
	DeleteDeviceTag(context.Context, *DeviceTagDeleteReq) (*DeviceTagIdResult, error)
	PostDeviceTag(context.Context, *DeviceTagAddReq) (*DeviceTagIdResult, error)
	PutDeviceTag(context.Context, *DeviceTagUpdateReq) (*DeviceTagIdResult, error)
	GetDeviceTag(context.Context, *DeviceTagQueryByIdReq) (*DeviceTagResult, error)
}

// UnimplementedDeviceServerServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceServerServer struct {
}

func (*UnimplementedDeviceServerServer) PutLogo(context.Context, *LogoInfoUpdateReq) (*LogoInfoIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutLogo not implemented")
}
func (*UnimplementedDeviceServerServer) DeleteLogo(context.Context, *LogoInfoId) (*LogoInfoIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLogo not implemented")
}
func (*UnimplementedDeviceServerServer) GetLogoInfo(context.Context, *LogoInfoPrjTypeReq) (*LogoInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogoInfo not implemented")
}
func (*UnimplementedDeviceServerServer) AddLogo(context.Context, *LogoInfoAddReq) (*LogoInfoIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLogo not implemented")
}
func (*UnimplementedDeviceServerServer) GetLogoList(context.Context, *LogoInfoGetListReq) (*LogoInfoPageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogoList not implemented")
}
func (*UnimplementedDeviceServerServer) GetAreaTreeInfoList(context.Context, *AreaInfoQueryReq) (*AreaTreeInfoPageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAreaTreeInfoList not implemented")
}
func (*UnimplementedDeviceServerServer) GetAreaInfoList(context.Context, *AreaInfoQueryReq) (*AreaInfoPageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAreaInfoList not implemented")
}
func (*UnimplementedDeviceServerServer) GetAreaInfo(context.Context, *AreaInfoQueryByIdReq) (*AreaInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAreaInfo not implemented")
}
func (*UnimplementedDeviceServerServer) DeleteArea(context.Context, *AreaInfoDelReq) (*EmptyRspResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArea not implemented")
}
func (*UnimplementedDeviceServerServer) MoveArea(context.Context, *AreaMoveReq) (*AreaIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveArea not implemented")
}
func (*UnimplementedDeviceServerServer) AddArea(context.Context, *AreaInfoAddReq) (*AreaIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddArea not implemented")
}
func (*UnimplementedDeviceServerServer) UpdateArea(context.Context, *AreaInfoUpdateReq) (*AreaIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArea not implemented")
}
func (*UnimplementedDeviceServerServer) GetAreaInfoAncestor(context.Context, *AreaInfoQueryByIdReq) (*AreaInfoListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAreaInfoAncestor not implemented")
}
func (*UnimplementedDeviceServerServer) GetAreaChannelInfoList(context.Context, *AreaChannelListReq) (*ChannelInfoPageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAreaChannelInfoList not implemented")
}
func (*UnimplementedDeviceServerServer) PostChannelInfo(context.Context, *ChannelInfoUpdateReq) (*ChannelIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostChannelInfo not implemented")
}
func (*UnimplementedDeviceServerServer) PutChannelInfo(context.Context, *ChannelInfoUpdateReq) (*ChannelIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutChannelInfo not implemented")
}
func (*UnimplementedDeviceServerServer) GetChannelInfo(context.Context, *ChannelGetReq) (*ChannelInfoRspResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelInfo not implemented")
}
func (*UnimplementedDeviceServerServer) DeleteChannelInfo(context.Context, *ChannelDeleteReq) (*EmptyRspResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannelInfo not implemented")
}
func (*UnimplementedDeviceServerServer) GetChannelTreeInfoList(context.Context, *ChannelTreeReq) (*ChannelTreeInfoPageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelTreeInfoList not implemented")
}
func (*UnimplementedDeviceServerServer) GetInfChannelInfoList(context.Context, *InfChannelListReq) (*ChannelInfoPageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfChannelInfoList not implemented")
}
func (*UnimplementedDeviceServerServer) MulCheckDoorOpenSet(context.Context, *MulCheckDoorOpenReq) (*ChannelIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MulCheckDoorOpenSet not implemented")
}
func (*UnimplementedDeviceServerServer) GetChannelInfoList(context.Context, *ChannelListReq) (*ChannelInfoPageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelInfoList not implemented")
}
func (*UnimplementedDeviceServerServer) UpdateChannelStatus(context.Context, *ChannelStatusUpdateReq) (*EmptyRspResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelStatus not implemented")
}
func (*UnimplementedDeviceServerServer) DeleteChannelStatus(context.Context, *ChannelStatusDeleteReq) (*ChannelStatusDeleteRspListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannelStatus not implemented")
}
func (*UnimplementedDeviceServerServer) PutDevice(context.Context, *DeviceInfoUpdateReq) (*DeviceIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutDevice not implemented")
}
func (*UnimplementedDeviceServerServer) DeleteDevice(context.Context, *DeviceDeleteReq) (*DeviceDeleteRspListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (*UnimplementedDeviceServerServer) GetInfDeviceInfoList(context.Context, *InfDeviceListReq) (*DeviceInfoPageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfDeviceInfoList not implemented")
}
func (*UnimplementedDeviceServerServer) GetDeviceInfoList(context.Context, *DeviceListReq) (*DeviceInfoPageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfoList not implemented")
}
func (*UnimplementedDeviceServerServer) EditDevice(context.Context, *DeviceInfoEditReq) (*DeviceIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditDevice not implemented")
}
func (*UnimplementedDeviceServerServer) GetManagedDeviceList(context.Context, *DeviceManagedReq) (*DeviceManagedInfoRspPageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagedDeviceList not implemented")
}
func (*UnimplementedDeviceServerServer) GetAreaDeviceInfoList(context.Context, *AreaDeviceListReq) (*DeviceInfoPageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAreaDeviceInfoList not implemented")
}
func (*UnimplementedDeviceServerServer) GetDeviceDetail(context.Context, *DeviceGetReq) (*DeviceInfoRspResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDetail not implemented")
}
func (*UnimplementedDeviceServerServer) GetEditDevice(context.Context, *DeviceEditReq) (*DeviceInfoRspResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEditDevice not implemented")
}
func (*UnimplementedDeviceServerServer) GetDeviceTreeInfoList(context.Context, *DeviceTreeReq) (*DeviceTreeInfoPageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceTreeInfoList not implemented")
}
func (*UnimplementedDeviceServerServer) PostDevice(context.Context, *DeviceInfoAddReq) (*DeviceInfoAddRspListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDevice not implemented")
}
func (*UnimplementedDeviceServerServer) GetDeviceStatusListByDevId(context.Context, *DeviceStatusQueryByIdReq) (*DeviceStatusPageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceStatusListByDevId not implemented")
}
func (*UnimplementedDeviceServerServer) UpdateDeviceStatus(context.Context, *DeviceStatusUpdateReq) (*EmptyRspResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceStatus not implemented")
}
func (*UnimplementedDeviceServerServer) DeleteDeviceStatus(context.Context, *DeviceStatusDeleteReq) (*DeviceStatusDeleteRspListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceStatus not implemented")
}
func (*UnimplementedDeviceServerServer) GetChnDoorStatisticsList(context.Context, *EmptyReq) (*DoorChnStatRspResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChnDoorStatisticsList not implemented")
}
func (*UnimplementedDeviceServerServer) GetDeviceStatusList(context.Context, *DeviceStatusQueryListReq) (*DeviceStatusPageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceStatusList not implemented")
}
func (*UnimplementedDeviceServerServer) GetChannelStatusListByChnId(context.Context, *ChannelStatusGetByIdReq) (*ChannelStatusPageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelStatusListByChnId not implemented")
}
func (*UnimplementedDeviceServerServer) GetChnDoorStatusList(context.Context, *DoorStatusListReq) (*ChannelInfoRspListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChnDoorStatusList not implemented")
}
func (*UnimplementedDeviceServerServer) GetChannelStatusList(context.Context, *ChannelStatusGetListReq) (*ChannelStatusPageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelStatusList not implemented")
}
func (*UnimplementedDeviceServerServer) RemoveDeviceTagChn(context.Context, *RemoveDeviceTagChnReq) (*EmptyRspResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDeviceTagChn not implemented")
}
func (*UnimplementedDeviceServerServer) GetDeviceTagChnList(context.Context, *DeviceTagChnReq) (*DeviceTagChnRspPageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceTagChnList not implemented")
}
func (*UnimplementedDeviceServerServer) ImportDeviceTagChn(context.Context, *ImportDeviceTagChnReq) (*ImportDeviceTagChnRspResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportDeviceTagChn not implemented")
}
func (*UnimplementedDeviceServerServer) GetDeviceTagList(context.Context, *DeviceTagQueryReq) (*DeviceTagPageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceTagList not implemented")
}
func (*UnimplementedDeviceServerServer) MoveDeviceTag(context.Context, *DeviceTagMoveReq) (*EmptyRspResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveDeviceTag not implemented")
}
func (*UnimplementedDeviceServerServer) DeleteDeviceTag(context.Context, *DeviceTagDeleteReq) (*DeviceTagIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceTag not implemented")
}
func (*UnimplementedDeviceServerServer) PostDeviceTag(context.Context, *DeviceTagAddReq) (*DeviceTagIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDeviceTag not implemented")
}
func (*UnimplementedDeviceServerServer) PutDeviceTag(context.Context, *DeviceTagUpdateReq) (*DeviceTagIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutDeviceTag not implemented")
}
func (*UnimplementedDeviceServerServer) GetDeviceTag(context.Context, *DeviceTagQueryByIdReq) (*DeviceTagResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceTag not implemented")
}

func RegisterDeviceServerServer(s *grpc.Server, srv DeviceServerServer) {
	s.RegisterService(&_DeviceServer_serviceDesc, srv)
}

func _DeviceServer_PutLogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoInfoUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).PutLogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/PutLogo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).PutLogo(ctx, req.(*LogoInfoUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_DeleteLogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoInfoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).DeleteLogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/DeleteLogo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).DeleteLogo(ctx, req.(*LogoInfoId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetLogoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoInfoPrjTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetLogoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetLogoInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetLogoInfo(ctx, req.(*LogoInfoPrjTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_AddLogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoInfoAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).AddLogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/AddLogo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).AddLogo(ctx, req.(*LogoInfoAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetLogoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoInfoGetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetLogoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetLogoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetLogoList(ctx, req.(*LogoInfoGetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetAreaTreeInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaInfoQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetAreaTreeInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetAreaTreeInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetAreaTreeInfoList(ctx, req.(*AreaInfoQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetAreaInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaInfoQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetAreaInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetAreaInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetAreaInfoList(ctx, req.(*AreaInfoQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetAreaInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaInfoQueryByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetAreaInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetAreaInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetAreaInfo(ctx, req.(*AreaInfoQueryByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_DeleteArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaInfoDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).DeleteArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/DeleteArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).DeleteArea(ctx, req.(*AreaInfoDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_MoveArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaMoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).MoveArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/MoveArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).MoveArea(ctx, req.(*AreaMoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_AddArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaInfoAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).AddArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/AddArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).AddArea(ctx, req.(*AreaInfoAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_UpdateArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaInfoUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).UpdateArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/UpdateArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).UpdateArea(ctx, req.(*AreaInfoUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetAreaInfoAncestor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaInfoQueryByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetAreaInfoAncestor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetAreaInfoAncestor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetAreaInfoAncestor(ctx, req.(*AreaInfoQueryByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetAreaChannelInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaChannelListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetAreaChannelInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetAreaChannelInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetAreaChannelInfoList(ctx, req.(*AreaChannelListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_PostChannelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelInfoUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).PostChannelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/PostChannelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).PostChannelInfo(ctx, req.(*ChannelInfoUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_PutChannelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelInfoUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).PutChannelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/PutChannelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).PutChannelInfo(ctx, req.(*ChannelInfoUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetChannelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetChannelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetChannelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetChannelInfo(ctx, req.(*ChannelGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_DeleteChannelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).DeleteChannelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/DeleteChannelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).DeleteChannelInfo(ctx, req.(*ChannelDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetChannelTreeInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetChannelTreeInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetChannelTreeInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetChannelTreeInfoList(ctx, req.(*ChannelTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetInfChannelInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfChannelListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetInfChannelInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetInfChannelInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetInfChannelInfoList(ctx, req.(*InfChannelListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_MulCheckDoorOpenSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulCheckDoorOpenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).MulCheckDoorOpenSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/MulCheckDoorOpenSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).MulCheckDoorOpenSet(ctx, req.(*MulCheckDoorOpenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetChannelInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetChannelInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetChannelInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetChannelInfoList(ctx, req.(*ChannelListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_UpdateChannelStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelStatusUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).UpdateChannelStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/UpdateChannelStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).UpdateChannelStatus(ctx, req.(*ChannelStatusUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_DeleteChannelStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelStatusDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).DeleteChannelStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/DeleteChannelStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).DeleteChannelStatus(ctx, req.(*ChannelStatusDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_PutDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).PutDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/PutDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).PutDevice(ctx, req.(*DeviceInfoUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).DeleteDevice(ctx, req.(*DeviceDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetInfDeviceInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfDeviceListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetInfDeviceInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetInfDeviceInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetInfDeviceInfoList(ctx, req.(*InfDeviceListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetDeviceInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetDeviceInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetDeviceInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetDeviceInfoList(ctx, req.(*DeviceListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_EditDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoEditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).EditDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/EditDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).EditDevice(ctx, req.(*DeviceInfoEditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetManagedDeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceManagedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetManagedDeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetManagedDeviceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetManagedDeviceList(ctx, req.(*DeviceManagedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetAreaDeviceInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaDeviceListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetAreaDeviceInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetAreaDeviceInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetAreaDeviceInfoList(ctx, req.(*AreaDeviceListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetDeviceDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetDeviceDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetDeviceDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetDeviceDetail(ctx, req.(*DeviceGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetEditDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceEditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetEditDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetEditDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetEditDevice(ctx, req.(*DeviceEditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetDeviceTreeInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetDeviceTreeInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetDeviceTreeInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetDeviceTreeInfoList(ctx, req.(*DeviceTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_PostDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).PostDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/PostDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).PostDevice(ctx, req.(*DeviceInfoAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetDeviceStatusListByDevId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceStatusQueryByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetDeviceStatusListByDevId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetDeviceStatusListByDevId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetDeviceStatusListByDevId(ctx, req.(*DeviceStatusQueryByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_UpdateDeviceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceStatusUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).UpdateDeviceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/UpdateDeviceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).UpdateDeviceStatus(ctx, req.(*DeviceStatusUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_DeleteDeviceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceStatusDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).DeleteDeviceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/DeleteDeviceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).DeleteDeviceStatus(ctx, req.(*DeviceStatusDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetChnDoorStatisticsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetChnDoorStatisticsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetChnDoorStatisticsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetChnDoorStatisticsList(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetDeviceStatusList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceStatusQueryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetDeviceStatusList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetDeviceStatusList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetDeviceStatusList(ctx, req.(*DeviceStatusQueryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetChannelStatusListByChnId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelStatusGetByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetChannelStatusListByChnId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetChannelStatusListByChnId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetChannelStatusListByChnId(ctx, req.(*ChannelStatusGetByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetChnDoorStatusList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoorStatusListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetChnDoorStatusList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetChnDoorStatusList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetChnDoorStatusList(ctx, req.(*DoorStatusListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetChannelStatusList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelStatusGetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetChannelStatusList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetChannelStatusList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetChannelStatusList(ctx, req.(*ChannelStatusGetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_RemoveDeviceTagChn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDeviceTagChnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).RemoveDeviceTagChn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/RemoveDeviceTagChn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).RemoveDeviceTagChn(ctx, req.(*RemoveDeviceTagChnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetDeviceTagChnList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTagChnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetDeviceTagChnList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetDeviceTagChnList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetDeviceTagChnList(ctx, req.(*DeviceTagChnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_ImportDeviceTagChn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportDeviceTagChnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).ImportDeviceTagChn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/ImportDeviceTagChn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).ImportDeviceTagChn(ctx, req.(*ImportDeviceTagChnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetDeviceTagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTagQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetDeviceTagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetDeviceTagList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetDeviceTagList(ctx, req.(*DeviceTagQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_MoveDeviceTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTagMoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).MoveDeviceTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/MoveDeviceTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).MoveDeviceTag(ctx, req.(*DeviceTagMoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_DeleteDeviceTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTagDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).DeleteDeviceTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/DeleteDeviceTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).DeleteDeviceTag(ctx, req.(*DeviceTagDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_PostDeviceTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTagAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).PostDeviceTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/PostDeviceTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).PostDeviceTag(ctx, req.(*DeviceTagAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_PutDeviceTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTagUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).PutDeviceTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/PutDeviceTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).PutDeviceTag(ctx, req.(*DeviceTagUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_GetDeviceTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTagQueryByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).GetDeviceTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/GetDeviceTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).GetDeviceTag(ctx, req.(*DeviceTagQueryByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DeviceServer",
	HandlerType: (*DeviceServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutLogo",
			Handler:    _DeviceServer_PutLogo_Handler,
		},
		{
			MethodName: "DeleteLogo",
			Handler:    _DeviceServer_DeleteLogo_Handler,
		},
		{
			MethodName: "GetLogoInfo",
			Handler:    _DeviceServer_GetLogoInfo_Handler,
		},
		{
			MethodName: "AddLogo",
			Handler:    _DeviceServer_AddLogo_Handler,
		},
		{
			MethodName: "GetLogoList",
			Handler:    _DeviceServer_GetLogoList_Handler,
		},
		{
			MethodName: "GetAreaTreeInfoList",
			Handler:    _DeviceServer_GetAreaTreeInfoList_Handler,
		},
		{
			MethodName: "GetAreaInfoList",
			Handler:    _DeviceServer_GetAreaInfoList_Handler,
		},
		{
			MethodName: "GetAreaInfo",
			Handler:    _DeviceServer_GetAreaInfo_Handler,
		},
		{
			MethodName: "DeleteArea",
			Handler:    _DeviceServer_DeleteArea_Handler,
		},
		{
			MethodName: "MoveArea",
			Handler:    _DeviceServer_MoveArea_Handler,
		},
		{
			MethodName: "AddArea",
			Handler:    _DeviceServer_AddArea_Handler,
		},
		{
			MethodName: "UpdateArea",
			Handler:    _DeviceServer_UpdateArea_Handler,
		},
		{
			MethodName: "GetAreaInfoAncestor",
			Handler:    _DeviceServer_GetAreaInfoAncestor_Handler,
		},
		{
			MethodName: "GetAreaChannelInfoList",
			Handler:    _DeviceServer_GetAreaChannelInfoList_Handler,
		},
		{
			MethodName: "PostChannelInfo",
			Handler:    _DeviceServer_PostChannelInfo_Handler,
		},
		{
			MethodName: "PutChannelInfo",
			Handler:    _DeviceServer_PutChannelInfo_Handler,
		},
		{
			MethodName: "GetChannelInfo",
			Handler:    _DeviceServer_GetChannelInfo_Handler,
		},
		{
			MethodName: "DeleteChannelInfo",
			Handler:    _DeviceServer_DeleteChannelInfo_Handler,
		},
		{
			MethodName: "GetChannelTreeInfoList",
			Handler:    _DeviceServer_GetChannelTreeInfoList_Handler,
		},
		{
			MethodName: "GetInfChannelInfoList",
			Handler:    _DeviceServer_GetInfChannelInfoList_Handler,
		},
		{
			MethodName: "MulCheckDoorOpenSet",
			Handler:    _DeviceServer_MulCheckDoorOpenSet_Handler,
		},
		{
			MethodName: "GetChannelInfoList",
			Handler:    _DeviceServer_GetChannelInfoList_Handler,
		},
		{
			MethodName: "UpdateChannelStatus",
			Handler:    _DeviceServer_UpdateChannelStatus_Handler,
		},
		{
			MethodName: "DeleteChannelStatus",
			Handler:    _DeviceServer_DeleteChannelStatus_Handler,
		},
		{
			MethodName: "PutDevice",
			Handler:    _DeviceServer_PutDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _DeviceServer_DeleteDevice_Handler,
		},
		{
			MethodName: "GetInfDeviceInfoList",
			Handler:    _DeviceServer_GetInfDeviceInfoList_Handler,
		},
		{
			MethodName: "GetDeviceInfoList",
			Handler:    _DeviceServer_GetDeviceInfoList_Handler,
		},
		{
			MethodName: "EditDevice",
			Handler:    _DeviceServer_EditDevice_Handler,
		},
		{
			MethodName: "GetManagedDeviceList",
			Handler:    _DeviceServer_GetManagedDeviceList_Handler,
		},
		{
			MethodName: "GetAreaDeviceInfoList",
			Handler:    _DeviceServer_GetAreaDeviceInfoList_Handler,
		},
		{
			MethodName: "GetDeviceDetail",
			Handler:    _DeviceServer_GetDeviceDetail_Handler,
		},
		{
			MethodName: "GetEditDevice",
			Handler:    _DeviceServer_GetEditDevice_Handler,
		},
		{
			MethodName: "GetDeviceTreeInfoList",
			Handler:    _DeviceServer_GetDeviceTreeInfoList_Handler,
		},
		{
			MethodName: "PostDevice",
			Handler:    _DeviceServer_PostDevice_Handler,
		},
		{
			MethodName: "GetDeviceStatusListByDevId",
			Handler:    _DeviceServer_GetDeviceStatusListByDevId_Handler,
		},
		{
			MethodName: "UpdateDeviceStatus",
			Handler:    _DeviceServer_UpdateDeviceStatus_Handler,
		},
		{
			MethodName: "DeleteDeviceStatus",
			Handler:    _DeviceServer_DeleteDeviceStatus_Handler,
		},
		{
			MethodName: "GetChnDoorStatisticsList",
			Handler:    _DeviceServer_GetChnDoorStatisticsList_Handler,
		},
		{
			MethodName: "GetDeviceStatusList",
			Handler:    _DeviceServer_GetDeviceStatusList_Handler,
		},
		{
			MethodName: "GetChannelStatusListByChnId",
			Handler:    _DeviceServer_GetChannelStatusListByChnId_Handler,
		},
		{
			MethodName: "GetChnDoorStatusList",
			Handler:    _DeviceServer_GetChnDoorStatusList_Handler,
		},
		{
			MethodName: "GetChannelStatusList",
			Handler:    _DeviceServer_GetChannelStatusList_Handler,
		},
		{
			MethodName: "RemoveDeviceTagChn",
			Handler:    _DeviceServer_RemoveDeviceTagChn_Handler,
		},
		{
			MethodName: "GetDeviceTagChnList",
			Handler:    _DeviceServer_GetDeviceTagChnList_Handler,
		},
		{
			MethodName: "ImportDeviceTagChn",
			Handler:    _DeviceServer_ImportDeviceTagChn_Handler,
		},
		{
			MethodName: "GetDeviceTagList",
			Handler:    _DeviceServer_GetDeviceTagList_Handler,
		},
		{
			MethodName: "MoveDeviceTag",
			Handler:    _DeviceServer_MoveDeviceTag_Handler,
		},
		{
			MethodName: "DeleteDeviceTag",
			Handler:    _DeviceServer_DeleteDeviceTag_Handler,
		},
		{
			MethodName: "PostDeviceTag",
			Handler:    _DeviceServer_PostDeviceTag_Handler,
		},
		{
			MethodName: "PutDeviceTag",
			Handler:    _DeviceServer_PutDeviceTag_Handler,
		},
		{
			MethodName: "GetDeviceTag",
			Handler:    _DeviceServer_GetDeviceTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deviceServer.proto",
}
